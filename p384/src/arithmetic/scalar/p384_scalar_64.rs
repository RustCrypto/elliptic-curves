#![doc = " fiat-crypto output postprocessed by fiat-constify: https://github.com/rustcrypto/utils"]
#![doc = " Autogenerated: './word_by_word_montgomery' --lang Rust --inline p384_scalar"]
#![doc = " 64 39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643"]
#![doc = " curve description: p384_scalar"]
#![doc = " machine_wordsize = 64 (from \"64\")"]
#![doc = " requested operations: (all)"]
#![doc = " m = 0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973 (from \"39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643\")"]
#![doc = ""]
#![doc = " NOTE: In addition to the bounds specified above each function, all"]
#![doc = "   functions synthesized for this Montgomery arithmetic require the"]
#![doc = "   input to be strictly less than the prime modulus (m), and also"]
#![doc = "   require the input to be in the unique saturated representation."]
#![doc = "   All functions also ensure that these two properties are true of"]
#![doc = "   return values."]
#![doc = ""]
#![doc = " Computed values:"]
#![doc = "   eval z = z[0] + (z[1] << 64) + (z[2] << 128) + (z[3] << 192) + (z[4] <<"]
#![doc = " 256) + (z[5] << 0x140)   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) +"]
#![doc = " (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) +"]
#![doc = " (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96)"]
#![doc = " + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17]"]
#![doc = " << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168)"]
#![doc = " + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26]"]
#![doc = " << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240)"]
#![doc = " + (z[31] << 248) + (z[32] << 256) + (z[33] << 0x108) + (z[34] << 0x110) +"]
#![doc = " (z[35] << 0x118) + (z[36] << 0x120) + (z[37] << 0x128) + (z[38] << 0x130) +"]
#![doc = " (z[39] << 0x138) + (z[40] << 0x140) + (z[41] << 0x148) + (z[42] << 0x150) +"]
#![doc = " (z[43] << 0x158) + (z[44] << 0x160) + (z[45] << 0x168) + (z[46] << 0x170) +"]
#![doc = " (z[47] << 0x178)   twos_complement_eval z = let x1 := z[0] + (z[1] << 64) +"]
#![doc = " (z[2] << 128) + (z[3] << 192) + (z[4] << 256) + (z[5] << 0x140) in"]
#![doc = "                            if x1 & (2^384-1) < 2^383 then x1 & (2^384-1)"]
#![doc = " else (x1 & (2^384-1)) - 2^384"]
#![allow(unused_parens)]
#![allow(non_camel_case_types)]
#![allow(
    dead_code,
    rustdoc::bare_urls,
    rustdoc::broken_intra_doc_links,
    unused_assignments,
    unused_mut,
    unused_variables
)]
pub type fiat_p384_scalar_u1 = u8;
pub type fiat_p384_scalar_i1 = i8;
pub type fiat_p384_scalar_i2 = i8;
pub type fiat_p384_scalar_montgomery_domain_field_element = [u64; 6];
pub type fiat_p384_scalar_non_montgomery_domain_field_element = [u64; 6];
#[doc = " The function fiat_p384_scalar_addcarryx_u64 is an addition with carry."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (arg1 + arg2 + arg3) mod 2^64"]
#[doc = "   out2 = ⌊(arg1 + arg2 + arg3) / 2^64⌋"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [0x0 ~> 0xffffffffffffffff]"]
#[doc = "   arg3: [0x0 ~> 0xffffffffffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffffffffffff]"]
#[doc = "   out2: [0x0 ~> 0x1]"]
#[inline]
pub const fn fiat_p384_scalar_addcarryx_u64(
    arg1: fiat_p384_scalar_u1,
    arg2: u64,
    arg3: u64,
) -> (u64, fiat_p384_scalar_u1) {
    let mut out1: u64 = 0;
    let mut out2: fiat_p384_scalar_u1 = 0;
    let x1: u128 = (((arg1 as u128) + (arg2 as u128)) + (arg3 as u128));
    let x2: u64 = ((x1 & 0xffffffffffffffff_u128) as u64);
    let x3: fiat_p384_scalar_u1 = ((x1 >> 64) as fiat_p384_scalar_u1);
    out1 = x2;
    out2 = x3;
    (out1, out2)
}
#[doc = " The function fiat_p384_scalar_subborrowx_u64 is a subtraction with borrow."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (-arg1 + arg2 + -arg3) mod 2^64"]
#[doc = "   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^64⌋"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [0x0 ~> 0xffffffffffffffff]"]
#[doc = "   arg3: [0x0 ~> 0xffffffffffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffffffffffff]"]
#[doc = "   out2: [0x0 ~> 0x1]"]
#[inline]
pub const fn fiat_p384_scalar_subborrowx_u64(
    arg1: fiat_p384_scalar_u1,
    arg2: u64,
    arg3: u64,
) -> (u64, fiat_p384_scalar_u1) {
    let mut out1: u64 = 0;
    let mut out2: fiat_p384_scalar_u1 = 0;
    let x1: i128 = (((arg2 as i128) - (arg1 as i128)) - (arg3 as i128));
    let x2: fiat_p384_scalar_i1 = ((x1 >> 64) as fiat_p384_scalar_i1);
    let x3: u64 = ((x1 & 0xffffffffffffffff_i128) as u64);
    out1 = x3;
    out2 = (((0x0 as fiat_p384_scalar_i2) - (x2 as fiat_p384_scalar_i2)) as fiat_p384_scalar_u1);
    (out1, out2)
}
#[doc = " The function fiat_p384_scalar_mulx_u64 is a multiplication, returning the"]
#[doc = " full double-width result."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (arg1 * arg2) mod 2^64"]
#[doc = "   out2 = ⌊arg1 * arg2 / 2^64⌋"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0xffffffffffffffff]"]
#[doc = "   arg2: [0x0 ~> 0xffffffffffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffffffffffff]"]
#[doc = "   out2: [0x0 ~> 0xffffffffffffffff]"]
#[inline]
pub const fn fiat_p384_scalar_mulx_u64(arg1: u64, arg2: u64) -> (u64, u64) {
    let mut out1: u64 = 0;
    let mut out2: u64 = 0;
    let x1: u128 = ((arg1 as u128) * (arg2 as u128));
    let x2: u64 = ((x1 & 0xffffffffffffffff_u128) as u64);
    let x3: u64 = ((x1 >> 64) as u64);
    out1 = x2;
    out2 = x3;
    (out1, out2)
}
#[doc = " The function fiat_p384_scalar_cmovznz_u64 is a single-word conditional move."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (if arg1 = 0 then arg2 else arg3)"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [0x0 ~> 0xffffffffffffffff]"]
#[doc = "   arg3: [0x0 ~> 0xffffffffffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffffffffffff]"]
#[inline]
pub const fn fiat_p384_scalar_cmovznz_u64(arg1: fiat_p384_scalar_u1, arg2: u64, arg3: u64) -> u64 {
    let mut out1: u64 = 0;
    let x1: fiat_p384_scalar_u1 = (!(!arg1));
    let x2: u64 = ((((((0x0 as fiat_p384_scalar_i2) - (x1 as fiat_p384_scalar_i2))
        as fiat_p384_scalar_i1) as i128)
        & 0xffffffffffffffff_i128) as u64);
    let x3: u64 = ((x2 & arg3) | ((!x2) & arg2));
    out1 = x3;
    out1
}
#[doc = " The function fiat_p384_scalar_mul multiplies two field elements in the"]
#[doc = " Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = "   0 ≤ eval arg2 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval"]
#[doc = " (from_montgomery arg2)) mod m   0 ≤ eval out1 < m"]
#[inline]
pub const fn fiat_p384_scalar_mul(
    arg1: &fiat_p384_scalar_montgomery_domain_field_element,
    arg2: &fiat_p384_scalar_montgomery_domain_field_element,
) -> fiat_p384_scalar_montgomery_domain_field_element {
    let mut out1: fiat_p384_scalar_montgomery_domain_field_element = [0; 6];
    let x1: u64 = (arg1[1]);
    let x2: u64 = (arg1[2]);
    let x3: u64 = (arg1[3]);
    let x4: u64 = (arg1[4]);
    let x5: u64 = (arg1[5]);
    let x6: u64 = (arg1[0]);
    let (x7, x8) = fiat_p384_scalar_mulx_u64(x6, (arg2[5]));
    let (x9, x10) = fiat_p384_scalar_mulx_u64(x6, (arg2[4]));
    let (x11, x12) = fiat_p384_scalar_mulx_u64(x6, (arg2[3]));
    let (x13, x14) = fiat_p384_scalar_mulx_u64(x6, (arg2[2]));
    let (x15, x16) = fiat_p384_scalar_mulx_u64(x6, (arg2[1]));
    let (x17, x18) = fiat_p384_scalar_mulx_u64(x6, (arg2[0]));
    let (x19, x20) = fiat_p384_scalar_addcarryx_u64(0x0, x18, x15);
    let (x21, x22) = fiat_p384_scalar_addcarryx_u64(x20, x16, x13);
    let (x23, x24) = fiat_p384_scalar_addcarryx_u64(x22, x14, x11);
    let (x25, x26) = fiat_p384_scalar_addcarryx_u64(x24, x12, x9);
    let (x27, x28) = fiat_p384_scalar_addcarryx_u64(x26, x10, x7);
    let x29: u64 = ((x28 as u64) + x8);
    let (x30, x31) = fiat_p384_scalar_mulx_u64(x17, 0x6ed46089e88fdc45);
    let (x32, x33) = fiat_p384_scalar_mulx_u64(x30, 0xffffffffffffffff);
    let (x34, x35) = fiat_p384_scalar_mulx_u64(x30, 0xffffffffffffffff);
    let (x36, x37) = fiat_p384_scalar_mulx_u64(x30, 0xffffffffffffffff);
    let (x38, x39) = fiat_p384_scalar_mulx_u64(x30, 0xc7634d81f4372ddf);
    let (x40, x41) = fiat_p384_scalar_mulx_u64(x30, 0x581a0db248b0a77a);
    let (x42, x43) = fiat_p384_scalar_mulx_u64(x30, 0xecec196accc52973);
    let (x44, x45) = fiat_p384_scalar_addcarryx_u64(0x0, x43, x40);
    let (x46, x47) = fiat_p384_scalar_addcarryx_u64(x45, x41, x38);
    let (x48, x49) = fiat_p384_scalar_addcarryx_u64(x47, x39, x36);
    let (x50, x51) = fiat_p384_scalar_addcarryx_u64(x49, x37, x34);
    let (x52, x53) = fiat_p384_scalar_addcarryx_u64(x51, x35, x32);
    let x54: u64 = ((x53 as u64) + x33);
    let (x55, x56) = fiat_p384_scalar_addcarryx_u64(0x0, x17, x42);
    let (x57, x58) = fiat_p384_scalar_addcarryx_u64(x56, x19, x44);
    let (x59, x60) = fiat_p384_scalar_addcarryx_u64(x58, x21, x46);
    let (x61, x62) = fiat_p384_scalar_addcarryx_u64(x60, x23, x48);
    let (x63, x64) = fiat_p384_scalar_addcarryx_u64(x62, x25, x50);
    let (x65, x66) = fiat_p384_scalar_addcarryx_u64(x64, x27, x52);
    let (x67, x68) = fiat_p384_scalar_addcarryx_u64(x66, x29, x54);
    let (x69, x70) = fiat_p384_scalar_mulx_u64(x1, (arg2[5]));
    let (x71, x72) = fiat_p384_scalar_mulx_u64(x1, (arg2[4]));
    let (x73, x74) = fiat_p384_scalar_mulx_u64(x1, (arg2[3]));
    let (x75, x76) = fiat_p384_scalar_mulx_u64(x1, (arg2[2]));
    let (x77, x78) = fiat_p384_scalar_mulx_u64(x1, (arg2[1]));
    let (x79, x80) = fiat_p384_scalar_mulx_u64(x1, (arg2[0]));
    let (x81, x82) = fiat_p384_scalar_addcarryx_u64(0x0, x80, x77);
    let (x83, x84) = fiat_p384_scalar_addcarryx_u64(x82, x78, x75);
    let (x85, x86) = fiat_p384_scalar_addcarryx_u64(x84, x76, x73);
    let (x87, x88) = fiat_p384_scalar_addcarryx_u64(x86, x74, x71);
    let (x89, x90) = fiat_p384_scalar_addcarryx_u64(x88, x72, x69);
    let x91: u64 = ((x90 as u64) + x70);
    let (x92, x93) = fiat_p384_scalar_addcarryx_u64(0x0, x57, x79);
    let (x94, x95) = fiat_p384_scalar_addcarryx_u64(x93, x59, x81);
    let (x96, x97) = fiat_p384_scalar_addcarryx_u64(x95, x61, x83);
    let (x98, x99) = fiat_p384_scalar_addcarryx_u64(x97, x63, x85);
    let (x100, x101) = fiat_p384_scalar_addcarryx_u64(x99, x65, x87);
    let (x102, x103) = fiat_p384_scalar_addcarryx_u64(x101, x67, x89);
    let (x104, x105) = fiat_p384_scalar_addcarryx_u64(x103, (x68 as u64), x91);
    let (x106, x107) = fiat_p384_scalar_mulx_u64(x92, 0x6ed46089e88fdc45);
    let (x108, x109) = fiat_p384_scalar_mulx_u64(x106, 0xffffffffffffffff);
    let (x110, x111) = fiat_p384_scalar_mulx_u64(x106, 0xffffffffffffffff);
    let (x112, x113) = fiat_p384_scalar_mulx_u64(x106, 0xffffffffffffffff);
    let (x114, x115) = fiat_p384_scalar_mulx_u64(x106, 0xc7634d81f4372ddf);
    let (x116, x117) = fiat_p384_scalar_mulx_u64(x106, 0x581a0db248b0a77a);
    let (x118, x119) = fiat_p384_scalar_mulx_u64(x106, 0xecec196accc52973);
    let (x120, x121) = fiat_p384_scalar_addcarryx_u64(0x0, x119, x116);
    let (x122, x123) = fiat_p384_scalar_addcarryx_u64(x121, x117, x114);
    let (x124, x125) = fiat_p384_scalar_addcarryx_u64(x123, x115, x112);
    let (x126, x127) = fiat_p384_scalar_addcarryx_u64(x125, x113, x110);
    let (x128, x129) = fiat_p384_scalar_addcarryx_u64(x127, x111, x108);
    let x130: u64 = ((x129 as u64) + x109);
    let (x131, x132) = fiat_p384_scalar_addcarryx_u64(0x0, x92, x118);
    let (x133, x134) = fiat_p384_scalar_addcarryx_u64(x132, x94, x120);
    let (x135, x136) = fiat_p384_scalar_addcarryx_u64(x134, x96, x122);
    let (x137, x138) = fiat_p384_scalar_addcarryx_u64(x136, x98, x124);
    let (x139, x140) = fiat_p384_scalar_addcarryx_u64(x138, x100, x126);
    let (x141, x142) = fiat_p384_scalar_addcarryx_u64(x140, x102, x128);
    let (x143, x144) = fiat_p384_scalar_addcarryx_u64(x142, x104, x130);
    let x145: u64 = ((x144 as u64) + (x105 as u64));
    let (x146, x147) = fiat_p384_scalar_mulx_u64(x2, (arg2[5]));
    let (x148, x149) = fiat_p384_scalar_mulx_u64(x2, (arg2[4]));
    let (x150, x151) = fiat_p384_scalar_mulx_u64(x2, (arg2[3]));
    let (x152, x153) = fiat_p384_scalar_mulx_u64(x2, (arg2[2]));
    let (x154, x155) = fiat_p384_scalar_mulx_u64(x2, (arg2[1]));
    let (x156, x157) = fiat_p384_scalar_mulx_u64(x2, (arg2[0]));
    let (x158, x159) = fiat_p384_scalar_addcarryx_u64(0x0, x157, x154);
    let (x160, x161) = fiat_p384_scalar_addcarryx_u64(x159, x155, x152);
    let (x162, x163) = fiat_p384_scalar_addcarryx_u64(x161, x153, x150);
    let (x164, x165) = fiat_p384_scalar_addcarryx_u64(x163, x151, x148);
    let (x166, x167) = fiat_p384_scalar_addcarryx_u64(x165, x149, x146);
    let x168: u64 = ((x167 as u64) + x147);
    let (x169, x170) = fiat_p384_scalar_addcarryx_u64(0x0, x133, x156);
    let (x171, x172) = fiat_p384_scalar_addcarryx_u64(x170, x135, x158);
    let (x173, x174) = fiat_p384_scalar_addcarryx_u64(x172, x137, x160);
    let (x175, x176) = fiat_p384_scalar_addcarryx_u64(x174, x139, x162);
    let (x177, x178) = fiat_p384_scalar_addcarryx_u64(x176, x141, x164);
    let (x179, x180) = fiat_p384_scalar_addcarryx_u64(x178, x143, x166);
    let (x181, x182) = fiat_p384_scalar_addcarryx_u64(x180, x145, x168);
    let (x183, x184) = fiat_p384_scalar_mulx_u64(x169, 0x6ed46089e88fdc45);
    let (x185, x186) = fiat_p384_scalar_mulx_u64(x183, 0xffffffffffffffff);
    let (x187, x188) = fiat_p384_scalar_mulx_u64(x183, 0xffffffffffffffff);
    let (x189, x190) = fiat_p384_scalar_mulx_u64(x183, 0xffffffffffffffff);
    let (x191, x192) = fiat_p384_scalar_mulx_u64(x183, 0xc7634d81f4372ddf);
    let (x193, x194) = fiat_p384_scalar_mulx_u64(x183, 0x581a0db248b0a77a);
    let (x195, x196) = fiat_p384_scalar_mulx_u64(x183, 0xecec196accc52973);
    let (x197, x198) = fiat_p384_scalar_addcarryx_u64(0x0, x196, x193);
    let (x199, x200) = fiat_p384_scalar_addcarryx_u64(x198, x194, x191);
    let (x201, x202) = fiat_p384_scalar_addcarryx_u64(x200, x192, x189);
    let (x203, x204) = fiat_p384_scalar_addcarryx_u64(x202, x190, x187);
    let (x205, x206) = fiat_p384_scalar_addcarryx_u64(x204, x188, x185);
    let x207: u64 = ((x206 as u64) + x186);
    let (x208, x209) = fiat_p384_scalar_addcarryx_u64(0x0, x169, x195);
    let (x210, x211) = fiat_p384_scalar_addcarryx_u64(x209, x171, x197);
    let (x212, x213) = fiat_p384_scalar_addcarryx_u64(x211, x173, x199);
    let (x214, x215) = fiat_p384_scalar_addcarryx_u64(x213, x175, x201);
    let (x216, x217) = fiat_p384_scalar_addcarryx_u64(x215, x177, x203);
    let (x218, x219) = fiat_p384_scalar_addcarryx_u64(x217, x179, x205);
    let (x220, x221) = fiat_p384_scalar_addcarryx_u64(x219, x181, x207);
    let x222: u64 = ((x221 as u64) + (x182 as u64));
    let (x223, x224) = fiat_p384_scalar_mulx_u64(x3, (arg2[5]));
    let (x225, x226) = fiat_p384_scalar_mulx_u64(x3, (arg2[4]));
    let (x227, x228) = fiat_p384_scalar_mulx_u64(x3, (arg2[3]));
    let (x229, x230) = fiat_p384_scalar_mulx_u64(x3, (arg2[2]));
    let (x231, x232) = fiat_p384_scalar_mulx_u64(x3, (arg2[1]));
    let (x233, x234) = fiat_p384_scalar_mulx_u64(x3, (arg2[0]));
    let (x235, x236) = fiat_p384_scalar_addcarryx_u64(0x0, x234, x231);
    let (x237, x238) = fiat_p384_scalar_addcarryx_u64(x236, x232, x229);
    let (x239, x240) = fiat_p384_scalar_addcarryx_u64(x238, x230, x227);
    let (x241, x242) = fiat_p384_scalar_addcarryx_u64(x240, x228, x225);
    let (x243, x244) = fiat_p384_scalar_addcarryx_u64(x242, x226, x223);
    let x245: u64 = ((x244 as u64) + x224);
    let (x246, x247) = fiat_p384_scalar_addcarryx_u64(0x0, x210, x233);
    let (x248, x249) = fiat_p384_scalar_addcarryx_u64(x247, x212, x235);
    let (x250, x251) = fiat_p384_scalar_addcarryx_u64(x249, x214, x237);
    let (x252, x253) = fiat_p384_scalar_addcarryx_u64(x251, x216, x239);
    let (x254, x255) = fiat_p384_scalar_addcarryx_u64(x253, x218, x241);
    let (x256, x257) = fiat_p384_scalar_addcarryx_u64(x255, x220, x243);
    let (x258, x259) = fiat_p384_scalar_addcarryx_u64(x257, x222, x245);
    let (x260, x261) = fiat_p384_scalar_mulx_u64(x246, 0x6ed46089e88fdc45);
    let (x262, x263) = fiat_p384_scalar_mulx_u64(x260, 0xffffffffffffffff);
    let (x264, x265) = fiat_p384_scalar_mulx_u64(x260, 0xffffffffffffffff);
    let (x266, x267) = fiat_p384_scalar_mulx_u64(x260, 0xffffffffffffffff);
    let (x268, x269) = fiat_p384_scalar_mulx_u64(x260, 0xc7634d81f4372ddf);
    let (x270, x271) = fiat_p384_scalar_mulx_u64(x260, 0x581a0db248b0a77a);
    let (x272, x273) = fiat_p384_scalar_mulx_u64(x260, 0xecec196accc52973);
    let (x274, x275) = fiat_p384_scalar_addcarryx_u64(0x0, x273, x270);
    let (x276, x277) = fiat_p384_scalar_addcarryx_u64(x275, x271, x268);
    let (x278, x279) = fiat_p384_scalar_addcarryx_u64(x277, x269, x266);
    let (x280, x281) = fiat_p384_scalar_addcarryx_u64(x279, x267, x264);
    let (x282, x283) = fiat_p384_scalar_addcarryx_u64(x281, x265, x262);
    let x284: u64 = ((x283 as u64) + x263);
    let (x285, x286) = fiat_p384_scalar_addcarryx_u64(0x0, x246, x272);
    let (x287, x288) = fiat_p384_scalar_addcarryx_u64(x286, x248, x274);
    let (x289, x290) = fiat_p384_scalar_addcarryx_u64(x288, x250, x276);
    let (x291, x292) = fiat_p384_scalar_addcarryx_u64(x290, x252, x278);
    let (x293, x294) = fiat_p384_scalar_addcarryx_u64(x292, x254, x280);
    let (x295, x296) = fiat_p384_scalar_addcarryx_u64(x294, x256, x282);
    let (x297, x298) = fiat_p384_scalar_addcarryx_u64(x296, x258, x284);
    let x299: u64 = ((x298 as u64) + (x259 as u64));
    let (x300, x301) = fiat_p384_scalar_mulx_u64(x4, (arg2[5]));
    let (x302, x303) = fiat_p384_scalar_mulx_u64(x4, (arg2[4]));
    let (x304, x305) = fiat_p384_scalar_mulx_u64(x4, (arg2[3]));
    let (x306, x307) = fiat_p384_scalar_mulx_u64(x4, (arg2[2]));
    let (x308, x309) = fiat_p384_scalar_mulx_u64(x4, (arg2[1]));
    let (x310, x311) = fiat_p384_scalar_mulx_u64(x4, (arg2[0]));
    let (x312, x313) = fiat_p384_scalar_addcarryx_u64(0x0, x311, x308);
    let (x314, x315) = fiat_p384_scalar_addcarryx_u64(x313, x309, x306);
    let (x316, x317) = fiat_p384_scalar_addcarryx_u64(x315, x307, x304);
    let (x318, x319) = fiat_p384_scalar_addcarryx_u64(x317, x305, x302);
    let (x320, x321) = fiat_p384_scalar_addcarryx_u64(x319, x303, x300);
    let x322: u64 = ((x321 as u64) + x301);
    let (x323, x324) = fiat_p384_scalar_addcarryx_u64(0x0, x287, x310);
    let (x325, x326) = fiat_p384_scalar_addcarryx_u64(x324, x289, x312);
    let (x327, x328) = fiat_p384_scalar_addcarryx_u64(x326, x291, x314);
    let (x329, x330) = fiat_p384_scalar_addcarryx_u64(x328, x293, x316);
    let (x331, x332) = fiat_p384_scalar_addcarryx_u64(x330, x295, x318);
    let (x333, x334) = fiat_p384_scalar_addcarryx_u64(x332, x297, x320);
    let (x335, x336) = fiat_p384_scalar_addcarryx_u64(x334, x299, x322);
    let (x337, x338) = fiat_p384_scalar_mulx_u64(x323, 0x6ed46089e88fdc45);
    let (x339, x340) = fiat_p384_scalar_mulx_u64(x337, 0xffffffffffffffff);
    let (x341, x342) = fiat_p384_scalar_mulx_u64(x337, 0xffffffffffffffff);
    let (x343, x344) = fiat_p384_scalar_mulx_u64(x337, 0xffffffffffffffff);
    let (x345, x346) = fiat_p384_scalar_mulx_u64(x337, 0xc7634d81f4372ddf);
    let (x347, x348) = fiat_p384_scalar_mulx_u64(x337, 0x581a0db248b0a77a);
    let (x349, x350) = fiat_p384_scalar_mulx_u64(x337, 0xecec196accc52973);
    let (x351, x352) = fiat_p384_scalar_addcarryx_u64(0x0, x350, x347);
    let (x353, x354) = fiat_p384_scalar_addcarryx_u64(x352, x348, x345);
    let (x355, x356) = fiat_p384_scalar_addcarryx_u64(x354, x346, x343);
    let (x357, x358) = fiat_p384_scalar_addcarryx_u64(x356, x344, x341);
    let (x359, x360) = fiat_p384_scalar_addcarryx_u64(x358, x342, x339);
    let x361: u64 = ((x360 as u64) + x340);
    let (x362, x363) = fiat_p384_scalar_addcarryx_u64(0x0, x323, x349);
    let (x364, x365) = fiat_p384_scalar_addcarryx_u64(x363, x325, x351);
    let (x366, x367) = fiat_p384_scalar_addcarryx_u64(x365, x327, x353);
    let (x368, x369) = fiat_p384_scalar_addcarryx_u64(x367, x329, x355);
    let (x370, x371) = fiat_p384_scalar_addcarryx_u64(x369, x331, x357);
    let (x372, x373) = fiat_p384_scalar_addcarryx_u64(x371, x333, x359);
    let (x374, x375) = fiat_p384_scalar_addcarryx_u64(x373, x335, x361);
    let x376: u64 = ((x375 as u64) + (x336 as u64));
    let (x377, x378) = fiat_p384_scalar_mulx_u64(x5, (arg2[5]));
    let (x379, x380) = fiat_p384_scalar_mulx_u64(x5, (arg2[4]));
    let (x381, x382) = fiat_p384_scalar_mulx_u64(x5, (arg2[3]));
    let (x383, x384) = fiat_p384_scalar_mulx_u64(x5, (arg2[2]));
    let (x385, x386) = fiat_p384_scalar_mulx_u64(x5, (arg2[1]));
    let (x387, x388) = fiat_p384_scalar_mulx_u64(x5, (arg2[0]));
    let (x389, x390) = fiat_p384_scalar_addcarryx_u64(0x0, x388, x385);
    let (x391, x392) = fiat_p384_scalar_addcarryx_u64(x390, x386, x383);
    let (x393, x394) = fiat_p384_scalar_addcarryx_u64(x392, x384, x381);
    let (x395, x396) = fiat_p384_scalar_addcarryx_u64(x394, x382, x379);
    let (x397, x398) = fiat_p384_scalar_addcarryx_u64(x396, x380, x377);
    let x399: u64 = ((x398 as u64) + x378);
    let (x400, x401) = fiat_p384_scalar_addcarryx_u64(0x0, x364, x387);
    let (x402, x403) = fiat_p384_scalar_addcarryx_u64(x401, x366, x389);
    let (x404, x405) = fiat_p384_scalar_addcarryx_u64(x403, x368, x391);
    let (x406, x407) = fiat_p384_scalar_addcarryx_u64(x405, x370, x393);
    let (x408, x409) = fiat_p384_scalar_addcarryx_u64(x407, x372, x395);
    let (x410, x411) = fiat_p384_scalar_addcarryx_u64(x409, x374, x397);
    let (x412, x413) = fiat_p384_scalar_addcarryx_u64(x411, x376, x399);
    let (x414, x415) = fiat_p384_scalar_mulx_u64(x400, 0x6ed46089e88fdc45);
    let (x416, x417) = fiat_p384_scalar_mulx_u64(x414, 0xffffffffffffffff);
    let (x418, x419) = fiat_p384_scalar_mulx_u64(x414, 0xffffffffffffffff);
    let (x420, x421) = fiat_p384_scalar_mulx_u64(x414, 0xffffffffffffffff);
    let (x422, x423) = fiat_p384_scalar_mulx_u64(x414, 0xc7634d81f4372ddf);
    let (x424, x425) = fiat_p384_scalar_mulx_u64(x414, 0x581a0db248b0a77a);
    let (x426, x427) = fiat_p384_scalar_mulx_u64(x414, 0xecec196accc52973);
    let (x428, x429) = fiat_p384_scalar_addcarryx_u64(0x0, x427, x424);
    let (x430, x431) = fiat_p384_scalar_addcarryx_u64(x429, x425, x422);
    let (x432, x433) = fiat_p384_scalar_addcarryx_u64(x431, x423, x420);
    let (x434, x435) = fiat_p384_scalar_addcarryx_u64(x433, x421, x418);
    let (x436, x437) = fiat_p384_scalar_addcarryx_u64(x435, x419, x416);
    let x438: u64 = ((x437 as u64) + x417);
    let (x439, x440) = fiat_p384_scalar_addcarryx_u64(0x0, x400, x426);
    let (x441, x442) = fiat_p384_scalar_addcarryx_u64(x440, x402, x428);
    let (x443, x444) = fiat_p384_scalar_addcarryx_u64(x442, x404, x430);
    let (x445, x446) = fiat_p384_scalar_addcarryx_u64(x444, x406, x432);
    let (x447, x448) = fiat_p384_scalar_addcarryx_u64(x446, x408, x434);
    let (x449, x450) = fiat_p384_scalar_addcarryx_u64(x448, x410, x436);
    let (x451, x452) = fiat_p384_scalar_addcarryx_u64(x450, x412, x438);
    let x453: u64 = ((x452 as u64) + (x413 as u64));
    let (x454, x455) = fiat_p384_scalar_subborrowx_u64(0x0, x441, 0xecec196accc52973);
    let (x456, x457) = fiat_p384_scalar_subborrowx_u64(x455, x443, 0x581a0db248b0a77a);
    let (x458, x459) = fiat_p384_scalar_subborrowx_u64(x457, x445, 0xc7634d81f4372ddf);
    let (x460, x461) = fiat_p384_scalar_subborrowx_u64(x459, x447, 0xffffffffffffffff);
    let (x462, x463) = fiat_p384_scalar_subborrowx_u64(x461, x449, 0xffffffffffffffff);
    let (x464, x465) = fiat_p384_scalar_subborrowx_u64(x463, x451, 0xffffffffffffffff);
    let (x466, x467) = fiat_p384_scalar_subborrowx_u64(x465, x453, 0x0_u64);
    let (x468) = fiat_p384_scalar_cmovznz_u64(x467, x454, x441);
    let (x469) = fiat_p384_scalar_cmovznz_u64(x467, x456, x443);
    let (x470) = fiat_p384_scalar_cmovznz_u64(x467, x458, x445);
    let (x471) = fiat_p384_scalar_cmovznz_u64(x467, x460, x447);
    let (x472) = fiat_p384_scalar_cmovznz_u64(x467, x462, x449);
    let (x473) = fiat_p384_scalar_cmovznz_u64(x467, x464, x451);
    out1[0] = x468;
    out1[1] = x469;
    out1[2] = x470;
    out1[3] = x471;
    out1[4] = x472;
    out1[5] = x473;
    out1
}
#[doc = " The function fiat_p384_scalar_square squares a field element in the"]
#[doc = " Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval"]
#[doc = " (from_montgomery arg1)) mod m   0 ≤ eval out1 < m"]
#[inline]
pub const fn fiat_p384_scalar_square(
    arg1: &fiat_p384_scalar_montgomery_domain_field_element,
) -> fiat_p384_scalar_montgomery_domain_field_element {
    let mut out1: fiat_p384_scalar_montgomery_domain_field_element = [0; 6];
    let x1: u64 = (arg1[1]);
    let x2: u64 = (arg1[2]);
    let x3: u64 = (arg1[3]);
    let x4: u64 = (arg1[4]);
    let x5: u64 = (arg1[5]);
    let x6: u64 = (arg1[0]);
    let (x7, x8) = fiat_p384_scalar_mulx_u64(x6, (arg1[5]));
    let (x9, x10) = fiat_p384_scalar_mulx_u64(x6, (arg1[4]));
    let (x11, x12) = fiat_p384_scalar_mulx_u64(x6, (arg1[3]));
    let (x13, x14) = fiat_p384_scalar_mulx_u64(x6, (arg1[2]));
    let (x15, x16) = fiat_p384_scalar_mulx_u64(x6, (arg1[1]));
    let (x17, x18) = fiat_p384_scalar_mulx_u64(x6, (arg1[0]));
    let (x19, x20) = fiat_p384_scalar_addcarryx_u64(0x0, x18, x15);
    let (x21, x22) = fiat_p384_scalar_addcarryx_u64(x20, x16, x13);
    let (x23, x24) = fiat_p384_scalar_addcarryx_u64(x22, x14, x11);
    let (x25, x26) = fiat_p384_scalar_addcarryx_u64(x24, x12, x9);
    let (x27, x28) = fiat_p384_scalar_addcarryx_u64(x26, x10, x7);
    let x29: u64 = ((x28 as u64) + x8);
    let (x30, x31) = fiat_p384_scalar_mulx_u64(x17, 0x6ed46089e88fdc45);
    let (x32, x33) = fiat_p384_scalar_mulx_u64(x30, 0xffffffffffffffff);
    let (x34, x35) = fiat_p384_scalar_mulx_u64(x30, 0xffffffffffffffff);
    let (x36, x37) = fiat_p384_scalar_mulx_u64(x30, 0xffffffffffffffff);
    let (x38, x39) = fiat_p384_scalar_mulx_u64(x30, 0xc7634d81f4372ddf);
    let (x40, x41) = fiat_p384_scalar_mulx_u64(x30, 0x581a0db248b0a77a);
    let (x42, x43) = fiat_p384_scalar_mulx_u64(x30, 0xecec196accc52973);
    let (x44, x45) = fiat_p384_scalar_addcarryx_u64(0x0, x43, x40);
    let (x46, x47) = fiat_p384_scalar_addcarryx_u64(x45, x41, x38);
    let (x48, x49) = fiat_p384_scalar_addcarryx_u64(x47, x39, x36);
    let (x50, x51) = fiat_p384_scalar_addcarryx_u64(x49, x37, x34);
    let (x52, x53) = fiat_p384_scalar_addcarryx_u64(x51, x35, x32);
    let x54: u64 = ((x53 as u64) + x33);
    let (x55, x56) = fiat_p384_scalar_addcarryx_u64(0x0, x17, x42);
    let (x57, x58) = fiat_p384_scalar_addcarryx_u64(x56, x19, x44);
    let (x59, x60) = fiat_p384_scalar_addcarryx_u64(x58, x21, x46);
    let (x61, x62) = fiat_p384_scalar_addcarryx_u64(x60, x23, x48);
    let (x63, x64) = fiat_p384_scalar_addcarryx_u64(x62, x25, x50);
    let (x65, x66) = fiat_p384_scalar_addcarryx_u64(x64, x27, x52);
    let (x67, x68) = fiat_p384_scalar_addcarryx_u64(x66, x29, x54);
    let (x69, x70) = fiat_p384_scalar_mulx_u64(x1, (arg1[5]));
    let (x71, x72) = fiat_p384_scalar_mulx_u64(x1, (arg1[4]));
    let (x73, x74) = fiat_p384_scalar_mulx_u64(x1, (arg1[3]));
    let (x75, x76) = fiat_p384_scalar_mulx_u64(x1, (arg1[2]));
    let (x77, x78) = fiat_p384_scalar_mulx_u64(x1, (arg1[1]));
    let (x79, x80) = fiat_p384_scalar_mulx_u64(x1, (arg1[0]));
    let (x81, x82) = fiat_p384_scalar_addcarryx_u64(0x0, x80, x77);
    let (x83, x84) = fiat_p384_scalar_addcarryx_u64(x82, x78, x75);
    let (x85, x86) = fiat_p384_scalar_addcarryx_u64(x84, x76, x73);
    let (x87, x88) = fiat_p384_scalar_addcarryx_u64(x86, x74, x71);
    let (x89, x90) = fiat_p384_scalar_addcarryx_u64(x88, x72, x69);
    let x91: u64 = ((x90 as u64) + x70);
    let (x92, x93) = fiat_p384_scalar_addcarryx_u64(0x0, x57, x79);
    let (x94, x95) = fiat_p384_scalar_addcarryx_u64(x93, x59, x81);
    let (x96, x97) = fiat_p384_scalar_addcarryx_u64(x95, x61, x83);
    let (x98, x99) = fiat_p384_scalar_addcarryx_u64(x97, x63, x85);
    let (x100, x101) = fiat_p384_scalar_addcarryx_u64(x99, x65, x87);
    let (x102, x103) = fiat_p384_scalar_addcarryx_u64(x101, x67, x89);
    let (x104, x105) = fiat_p384_scalar_addcarryx_u64(x103, (x68 as u64), x91);
    let (x106, x107) = fiat_p384_scalar_mulx_u64(x92, 0x6ed46089e88fdc45);
    let (x108, x109) = fiat_p384_scalar_mulx_u64(x106, 0xffffffffffffffff);
    let (x110, x111) = fiat_p384_scalar_mulx_u64(x106, 0xffffffffffffffff);
    let (x112, x113) = fiat_p384_scalar_mulx_u64(x106, 0xffffffffffffffff);
    let (x114, x115) = fiat_p384_scalar_mulx_u64(x106, 0xc7634d81f4372ddf);
    let (x116, x117) = fiat_p384_scalar_mulx_u64(x106, 0x581a0db248b0a77a);
    let (x118, x119) = fiat_p384_scalar_mulx_u64(x106, 0xecec196accc52973);
    let (x120, x121) = fiat_p384_scalar_addcarryx_u64(0x0, x119, x116);
    let (x122, x123) = fiat_p384_scalar_addcarryx_u64(x121, x117, x114);
    let (x124, x125) = fiat_p384_scalar_addcarryx_u64(x123, x115, x112);
    let (x126, x127) = fiat_p384_scalar_addcarryx_u64(x125, x113, x110);
    let (x128, x129) = fiat_p384_scalar_addcarryx_u64(x127, x111, x108);
    let x130: u64 = ((x129 as u64) + x109);
    let (x131, x132) = fiat_p384_scalar_addcarryx_u64(0x0, x92, x118);
    let (x133, x134) = fiat_p384_scalar_addcarryx_u64(x132, x94, x120);
    let (x135, x136) = fiat_p384_scalar_addcarryx_u64(x134, x96, x122);
    let (x137, x138) = fiat_p384_scalar_addcarryx_u64(x136, x98, x124);
    let (x139, x140) = fiat_p384_scalar_addcarryx_u64(x138, x100, x126);
    let (x141, x142) = fiat_p384_scalar_addcarryx_u64(x140, x102, x128);
    let (x143, x144) = fiat_p384_scalar_addcarryx_u64(x142, x104, x130);
    let x145: u64 = ((x144 as u64) + (x105 as u64));
    let (x146, x147) = fiat_p384_scalar_mulx_u64(x2, (arg1[5]));
    let (x148, x149) = fiat_p384_scalar_mulx_u64(x2, (arg1[4]));
    let (x150, x151) = fiat_p384_scalar_mulx_u64(x2, (arg1[3]));
    let (x152, x153) = fiat_p384_scalar_mulx_u64(x2, (arg1[2]));
    let (x154, x155) = fiat_p384_scalar_mulx_u64(x2, (arg1[1]));
    let (x156, x157) = fiat_p384_scalar_mulx_u64(x2, (arg1[0]));
    let (x158, x159) = fiat_p384_scalar_addcarryx_u64(0x0, x157, x154);
    let (x160, x161) = fiat_p384_scalar_addcarryx_u64(x159, x155, x152);
    let (x162, x163) = fiat_p384_scalar_addcarryx_u64(x161, x153, x150);
    let (x164, x165) = fiat_p384_scalar_addcarryx_u64(x163, x151, x148);
    let (x166, x167) = fiat_p384_scalar_addcarryx_u64(x165, x149, x146);
    let x168: u64 = ((x167 as u64) + x147);
    let (x169, x170) = fiat_p384_scalar_addcarryx_u64(0x0, x133, x156);
    let (x171, x172) = fiat_p384_scalar_addcarryx_u64(x170, x135, x158);
    let (x173, x174) = fiat_p384_scalar_addcarryx_u64(x172, x137, x160);
    let (x175, x176) = fiat_p384_scalar_addcarryx_u64(x174, x139, x162);
    let (x177, x178) = fiat_p384_scalar_addcarryx_u64(x176, x141, x164);
    let (x179, x180) = fiat_p384_scalar_addcarryx_u64(x178, x143, x166);
    let (x181, x182) = fiat_p384_scalar_addcarryx_u64(x180, x145, x168);
    let (x183, x184) = fiat_p384_scalar_mulx_u64(x169, 0x6ed46089e88fdc45);
    let (x185, x186) = fiat_p384_scalar_mulx_u64(x183, 0xffffffffffffffff);
    let (x187, x188) = fiat_p384_scalar_mulx_u64(x183, 0xffffffffffffffff);
    let (x189, x190) = fiat_p384_scalar_mulx_u64(x183, 0xffffffffffffffff);
    let (x191, x192) = fiat_p384_scalar_mulx_u64(x183, 0xc7634d81f4372ddf);
    let (x193, x194) = fiat_p384_scalar_mulx_u64(x183, 0x581a0db248b0a77a);
    let (x195, x196) = fiat_p384_scalar_mulx_u64(x183, 0xecec196accc52973);
    let (x197, x198) = fiat_p384_scalar_addcarryx_u64(0x0, x196, x193);
    let (x199, x200) = fiat_p384_scalar_addcarryx_u64(x198, x194, x191);
    let (x201, x202) = fiat_p384_scalar_addcarryx_u64(x200, x192, x189);
    let (x203, x204) = fiat_p384_scalar_addcarryx_u64(x202, x190, x187);
    let (x205, x206) = fiat_p384_scalar_addcarryx_u64(x204, x188, x185);
    let x207: u64 = ((x206 as u64) + x186);
    let (x208, x209) = fiat_p384_scalar_addcarryx_u64(0x0, x169, x195);
    let (x210, x211) = fiat_p384_scalar_addcarryx_u64(x209, x171, x197);
    let (x212, x213) = fiat_p384_scalar_addcarryx_u64(x211, x173, x199);
    let (x214, x215) = fiat_p384_scalar_addcarryx_u64(x213, x175, x201);
    let (x216, x217) = fiat_p384_scalar_addcarryx_u64(x215, x177, x203);
    let (x218, x219) = fiat_p384_scalar_addcarryx_u64(x217, x179, x205);
    let (x220, x221) = fiat_p384_scalar_addcarryx_u64(x219, x181, x207);
    let x222: u64 = ((x221 as u64) + (x182 as u64));
    let (x223, x224) = fiat_p384_scalar_mulx_u64(x3, (arg1[5]));
    let (x225, x226) = fiat_p384_scalar_mulx_u64(x3, (arg1[4]));
    let (x227, x228) = fiat_p384_scalar_mulx_u64(x3, (arg1[3]));
    let (x229, x230) = fiat_p384_scalar_mulx_u64(x3, (arg1[2]));
    let (x231, x232) = fiat_p384_scalar_mulx_u64(x3, (arg1[1]));
    let (x233, x234) = fiat_p384_scalar_mulx_u64(x3, (arg1[0]));
    let (x235, x236) = fiat_p384_scalar_addcarryx_u64(0x0, x234, x231);
    let (x237, x238) = fiat_p384_scalar_addcarryx_u64(x236, x232, x229);
    let (x239, x240) = fiat_p384_scalar_addcarryx_u64(x238, x230, x227);
    let (x241, x242) = fiat_p384_scalar_addcarryx_u64(x240, x228, x225);
    let (x243, x244) = fiat_p384_scalar_addcarryx_u64(x242, x226, x223);
    let x245: u64 = ((x244 as u64) + x224);
    let (x246, x247) = fiat_p384_scalar_addcarryx_u64(0x0, x210, x233);
    let (x248, x249) = fiat_p384_scalar_addcarryx_u64(x247, x212, x235);
    let (x250, x251) = fiat_p384_scalar_addcarryx_u64(x249, x214, x237);
    let (x252, x253) = fiat_p384_scalar_addcarryx_u64(x251, x216, x239);
    let (x254, x255) = fiat_p384_scalar_addcarryx_u64(x253, x218, x241);
    let (x256, x257) = fiat_p384_scalar_addcarryx_u64(x255, x220, x243);
    let (x258, x259) = fiat_p384_scalar_addcarryx_u64(x257, x222, x245);
    let (x260, x261) = fiat_p384_scalar_mulx_u64(x246, 0x6ed46089e88fdc45);
    let (x262, x263) = fiat_p384_scalar_mulx_u64(x260, 0xffffffffffffffff);
    let (x264, x265) = fiat_p384_scalar_mulx_u64(x260, 0xffffffffffffffff);
    let (x266, x267) = fiat_p384_scalar_mulx_u64(x260, 0xffffffffffffffff);
    let (x268, x269) = fiat_p384_scalar_mulx_u64(x260, 0xc7634d81f4372ddf);
    let (x270, x271) = fiat_p384_scalar_mulx_u64(x260, 0x581a0db248b0a77a);
    let (x272, x273) = fiat_p384_scalar_mulx_u64(x260, 0xecec196accc52973);
    let (x274, x275) = fiat_p384_scalar_addcarryx_u64(0x0, x273, x270);
    let (x276, x277) = fiat_p384_scalar_addcarryx_u64(x275, x271, x268);
    let (x278, x279) = fiat_p384_scalar_addcarryx_u64(x277, x269, x266);
    let (x280, x281) = fiat_p384_scalar_addcarryx_u64(x279, x267, x264);
    let (x282, x283) = fiat_p384_scalar_addcarryx_u64(x281, x265, x262);
    let x284: u64 = ((x283 as u64) + x263);
    let (x285, x286) = fiat_p384_scalar_addcarryx_u64(0x0, x246, x272);
    let (x287, x288) = fiat_p384_scalar_addcarryx_u64(x286, x248, x274);
    let (x289, x290) = fiat_p384_scalar_addcarryx_u64(x288, x250, x276);
    let (x291, x292) = fiat_p384_scalar_addcarryx_u64(x290, x252, x278);
    let (x293, x294) = fiat_p384_scalar_addcarryx_u64(x292, x254, x280);
    let (x295, x296) = fiat_p384_scalar_addcarryx_u64(x294, x256, x282);
    let (x297, x298) = fiat_p384_scalar_addcarryx_u64(x296, x258, x284);
    let x299: u64 = ((x298 as u64) + (x259 as u64));
    let (x300, x301) = fiat_p384_scalar_mulx_u64(x4, (arg1[5]));
    let (x302, x303) = fiat_p384_scalar_mulx_u64(x4, (arg1[4]));
    let (x304, x305) = fiat_p384_scalar_mulx_u64(x4, (arg1[3]));
    let (x306, x307) = fiat_p384_scalar_mulx_u64(x4, (arg1[2]));
    let (x308, x309) = fiat_p384_scalar_mulx_u64(x4, (arg1[1]));
    let (x310, x311) = fiat_p384_scalar_mulx_u64(x4, (arg1[0]));
    let (x312, x313) = fiat_p384_scalar_addcarryx_u64(0x0, x311, x308);
    let (x314, x315) = fiat_p384_scalar_addcarryx_u64(x313, x309, x306);
    let (x316, x317) = fiat_p384_scalar_addcarryx_u64(x315, x307, x304);
    let (x318, x319) = fiat_p384_scalar_addcarryx_u64(x317, x305, x302);
    let (x320, x321) = fiat_p384_scalar_addcarryx_u64(x319, x303, x300);
    let x322: u64 = ((x321 as u64) + x301);
    let (x323, x324) = fiat_p384_scalar_addcarryx_u64(0x0, x287, x310);
    let (x325, x326) = fiat_p384_scalar_addcarryx_u64(x324, x289, x312);
    let (x327, x328) = fiat_p384_scalar_addcarryx_u64(x326, x291, x314);
    let (x329, x330) = fiat_p384_scalar_addcarryx_u64(x328, x293, x316);
    let (x331, x332) = fiat_p384_scalar_addcarryx_u64(x330, x295, x318);
    let (x333, x334) = fiat_p384_scalar_addcarryx_u64(x332, x297, x320);
    let (x335, x336) = fiat_p384_scalar_addcarryx_u64(x334, x299, x322);
    let (x337, x338) = fiat_p384_scalar_mulx_u64(x323, 0x6ed46089e88fdc45);
    let (x339, x340) = fiat_p384_scalar_mulx_u64(x337, 0xffffffffffffffff);
    let (x341, x342) = fiat_p384_scalar_mulx_u64(x337, 0xffffffffffffffff);
    let (x343, x344) = fiat_p384_scalar_mulx_u64(x337, 0xffffffffffffffff);
    let (x345, x346) = fiat_p384_scalar_mulx_u64(x337, 0xc7634d81f4372ddf);
    let (x347, x348) = fiat_p384_scalar_mulx_u64(x337, 0x581a0db248b0a77a);
    let (x349, x350) = fiat_p384_scalar_mulx_u64(x337, 0xecec196accc52973);
    let (x351, x352) = fiat_p384_scalar_addcarryx_u64(0x0, x350, x347);
    let (x353, x354) = fiat_p384_scalar_addcarryx_u64(x352, x348, x345);
    let (x355, x356) = fiat_p384_scalar_addcarryx_u64(x354, x346, x343);
    let (x357, x358) = fiat_p384_scalar_addcarryx_u64(x356, x344, x341);
    let (x359, x360) = fiat_p384_scalar_addcarryx_u64(x358, x342, x339);
    let x361: u64 = ((x360 as u64) + x340);
    let (x362, x363) = fiat_p384_scalar_addcarryx_u64(0x0, x323, x349);
    let (x364, x365) = fiat_p384_scalar_addcarryx_u64(x363, x325, x351);
    let (x366, x367) = fiat_p384_scalar_addcarryx_u64(x365, x327, x353);
    let (x368, x369) = fiat_p384_scalar_addcarryx_u64(x367, x329, x355);
    let (x370, x371) = fiat_p384_scalar_addcarryx_u64(x369, x331, x357);
    let (x372, x373) = fiat_p384_scalar_addcarryx_u64(x371, x333, x359);
    let (x374, x375) = fiat_p384_scalar_addcarryx_u64(x373, x335, x361);
    let x376: u64 = ((x375 as u64) + (x336 as u64));
    let (x377, x378) = fiat_p384_scalar_mulx_u64(x5, (arg1[5]));
    let (x379, x380) = fiat_p384_scalar_mulx_u64(x5, (arg1[4]));
    let (x381, x382) = fiat_p384_scalar_mulx_u64(x5, (arg1[3]));
    let (x383, x384) = fiat_p384_scalar_mulx_u64(x5, (arg1[2]));
    let (x385, x386) = fiat_p384_scalar_mulx_u64(x5, (arg1[1]));
    let (x387, x388) = fiat_p384_scalar_mulx_u64(x5, (arg1[0]));
    let (x389, x390) = fiat_p384_scalar_addcarryx_u64(0x0, x388, x385);
    let (x391, x392) = fiat_p384_scalar_addcarryx_u64(x390, x386, x383);
    let (x393, x394) = fiat_p384_scalar_addcarryx_u64(x392, x384, x381);
    let (x395, x396) = fiat_p384_scalar_addcarryx_u64(x394, x382, x379);
    let (x397, x398) = fiat_p384_scalar_addcarryx_u64(x396, x380, x377);
    let x399: u64 = ((x398 as u64) + x378);
    let (x400, x401) = fiat_p384_scalar_addcarryx_u64(0x0, x364, x387);
    let (x402, x403) = fiat_p384_scalar_addcarryx_u64(x401, x366, x389);
    let (x404, x405) = fiat_p384_scalar_addcarryx_u64(x403, x368, x391);
    let (x406, x407) = fiat_p384_scalar_addcarryx_u64(x405, x370, x393);
    let (x408, x409) = fiat_p384_scalar_addcarryx_u64(x407, x372, x395);
    let (x410, x411) = fiat_p384_scalar_addcarryx_u64(x409, x374, x397);
    let (x412, x413) = fiat_p384_scalar_addcarryx_u64(x411, x376, x399);
    let (x414, x415) = fiat_p384_scalar_mulx_u64(x400, 0x6ed46089e88fdc45);
    let (x416, x417) = fiat_p384_scalar_mulx_u64(x414, 0xffffffffffffffff);
    let (x418, x419) = fiat_p384_scalar_mulx_u64(x414, 0xffffffffffffffff);
    let (x420, x421) = fiat_p384_scalar_mulx_u64(x414, 0xffffffffffffffff);
    let (x422, x423) = fiat_p384_scalar_mulx_u64(x414, 0xc7634d81f4372ddf);
    let (x424, x425) = fiat_p384_scalar_mulx_u64(x414, 0x581a0db248b0a77a);
    let (x426, x427) = fiat_p384_scalar_mulx_u64(x414, 0xecec196accc52973);
    let (x428, x429) = fiat_p384_scalar_addcarryx_u64(0x0, x427, x424);
    let (x430, x431) = fiat_p384_scalar_addcarryx_u64(x429, x425, x422);
    let (x432, x433) = fiat_p384_scalar_addcarryx_u64(x431, x423, x420);
    let (x434, x435) = fiat_p384_scalar_addcarryx_u64(x433, x421, x418);
    let (x436, x437) = fiat_p384_scalar_addcarryx_u64(x435, x419, x416);
    let x438: u64 = ((x437 as u64) + x417);
    let (x439, x440) = fiat_p384_scalar_addcarryx_u64(0x0, x400, x426);
    let (x441, x442) = fiat_p384_scalar_addcarryx_u64(x440, x402, x428);
    let (x443, x444) = fiat_p384_scalar_addcarryx_u64(x442, x404, x430);
    let (x445, x446) = fiat_p384_scalar_addcarryx_u64(x444, x406, x432);
    let (x447, x448) = fiat_p384_scalar_addcarryx_u64(x446, x408, x434);
    let (x449, x450) = fiat_p384_scalar_addcarryx_u64(x448, x410, x436);
    let (x451, x452) = fiat_p384_scalar_addcarryx_u64(x450, x412, x438);
    let x453: u64 = ((x452 as u64) + (x413 as u64));
    let (x454, x455) = fiat_p384_scalar_subborrowx_u64(0x0, x441, 0xecec196accc52973);
    let (x456, x457) = fiat_p384_scalar_subborrowx_u64(x455, x443, 0x581a0db248b0a77a);
    let (x458, x459) = fiat_p384_scalar_subborrowx_u64(x457, x445, 0xc7634d81f4372ddf);
    let (x460, x461) = fiat_p384_scalar_subborrowx_u64(x459, x447, 0xffffffffffffffff);
    let (x462, x463) = fiat_p384_scalar_subborrowx_u64(x461, x449, 0xffffffffffffffff);
    let (x464, x465) = fiat_p384_scalar_subborrowx_u64(x463, x451, 0xffffffffffffffff);
    let (x466, x467) = fiat_p384_scalar_subborrowx_u64(x465, x453, 0x0_u64);
    let (x468) = fiat_p384_scalar_cmovznz_u64(x467, x454, x441);
    let (x469) = fiat_p384_scalar_cmovznz_u64(x467, x456, x443);
    let (x470) = fiat_p384_scalar_cmovznz_u64(x467, x458, x445);
    let (x471) = fiat_p384_scalar_cmovznz_u64(x467, x460, x447);
    let (x472) = fiat_p384_scalar_cmovznz_u64(x467, x462, x449);
    let (x473) = fiat_p384_scalar_cmovznz_u64(x467, x464, x451);
    out1[0] = x468;
    out1[1] = x469;
    out1[2] = x470;
    out1[3] = x471;
    out1[4] = x472;
    out1[5] = x473;
    out1
}
#[doc = " The function fiat_p384_scalar_add adds two field elements in the Montgomery"]
#[doc = " domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = "   0 ≤ eval arg2 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval"]
#[doc = " (from_montgomery arg2)) mod m   0 ≤ eval out1 < m"]
#[inline]
pub const fn fiat_p384_scalar_add(
    arg1: &fiat_p384_scalar_montgomery_domain_field_element,
    arg2: &fiat_p384_scalar_montgomery_domain_field_element,
) -> fiat_p384_scalar_montgomery_domain_field_element {
    let mut out1: fiat_p384_scalar_montgomery_domain_field_element = [0; 6];
    let (x1, x2) = fiat_p384_scalar_addcarryx_u64(0x0, (arg1[0]), (arg2[0]));
    let (x3, x4) = fiat_p384_scalar_addcarryx_u64(x2, (arg1[1]), (arg2[1]));
    let (x5, x6) = fiat_p384_scalar_addcarryx_u64(x4, (arg1[2]), (arg2[2]));
    let (x7, x8) = fiat_p384_scalar_addcarryx_u64(x6, (arg1[3]), (arg2[3]));
    let (x9, x10) = fiat_p384_scalar_addcarryx_u64(x8, (arg1[4]), (arg2[4]));
    let (x11, x12) = fiat_p384_scalar_addcarryx_u64(x10, (arg1[5]), (arg2[5]));
    let (x13, x14) = fiat_p384_scalar_subborrowx_u64(0x0, x1, 0xecec196accc52973);
    let (x15, x16) = fiat_p384_scalar_subborrowx_u64(x14, x3, 0x581a0db248b0a77a);
    let (x17, x18) = fiat_p384_scalar_subborrowx_u64(x16, x5, 0xc7634d81f4372ddf);
    let (x19, x20) = fiat_p384_scalar_subborrowx_u64(x18, x7, 0xffffffffffffffff);
    let (x21, x22) = fiat_p384_scalar_subborrowx_u64(x20, x9, 0xffffffffffffffff);
    let (x23, x24) = fiat_p384_scalar_subborrowx_u64(x22, x11, 0xffffffffffffffff);
    let (x25, x26) = fiat_p384_scalar_subborrowx_u64(x24, (x12 as u64), 0x0_u64);
    let (x27) = fiat_p384_scalar_cmovznz_u64(x26, x13, x1);
    let (x28) = fiat_p384_scalar_cmovznz_u64(x26, x15, x3);
    let (x29) = fiat_p384_scalar_cmovznz_u64(x26, x17, x5);
    let (x30) = fiat_p384_scalar_cmovznz_u64(x26, x19, x7);
    let (x31) = fiat_p384_scalar_cmovznz_u64(x26, x21, x9);
    let (x32) = fiat_p384_scalar_cmovznz_u64(x26, x23, x11);
    out1[0] = x27;
    out1[1] = x28;
    out1[2] = x29;
    out1[3] = x30;
    out1[4] = x31;
    out1[5] = x32;
    out1
}
#[doc = " The function fiat_p384_scalar_sub subtracts two field elements in the"]
#[doc = " Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = "   0 ≤ eval arg2 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval"]
#[doc = " (from_montgomery arg2)) mod m   0 ≤ eval out1 < m"]
#[inline]
pub const fn fiat_p384_scalar_sub(
    arg1: &fiat_p384_scalar_montgomery_domain_field_element,
    arg2: &fiat_p384_scalar_montgomery_domain_field_element,
) -> fiat_p384_scalar_montgomery_domain_field_element {
    let mut out1: fiat_p384_scalar_montgomery_domain_field_element = [0; 6];
    let (x1, x2) = fiat_p384_scalar_subborrowx_u64(0x0, (arg1[0]), (arg2[0]));
    let (x3, x4) = fiat_p384_scalar_subborrowx_u64(x2, (arg1[1]), (arg2[1]));
    let (x5, x6) = fiat_p384_scalar_subborrowx_u64(x4, (arg1[2]), (arg2[2]));
    let (x7, x8) = fiat_p384_scalar_subborrowx_u64(x6, (arg1[3]), (arg2[3]));
    let (x9, x10) = fiat_p384_scalar_subborrowx_u64(x8, (arg1[4]), (arg2[4]));
    let (x11, x12) = fiat_p384_scalar_subborrowx_u64(x10, (arg1[5]), (arg2[5]));
    let (x13) = fiat_p384_scalar_cmovznz_u64(x12, 0x0_u64, 0xffffffffffffffff);
    let (x14, x15) = fiat_p384_scalar_addcarryx_u64(0x0, x1, (x13 & 0xecec196accc52973));
    let (x16, x17) = fiat_p384_scalar_addcarryx_u64(x15, x3, (x13 & 0x581a0db248b0a77a));
    let (x18, x19) = fiat_p384_scalar_addcarryx_u64(x17, x5, (x13 & 0xc7634d81f4372ddf));
    let (x20, x21) = fiat_p384_scalar_addcarryx_u64(x19, x7, x13);
    let (x22, x23) = fiat_p384_scalar_addcarryx_u64(x21, x9, x13);
    let (x24, x25) = fiat_p384_scalar_addcarryx_u64(x23, x11, x13);
    out1[0] = x14;
    out1[1] = x16;
    out1[2] = x18;
    out1[3] = x20;
    out1[4] = x22;
    out1[5] = x24;
    out1
}
#[doc = " The function fiat_p384_scalar_opp negates a field element in the Montgomery"]
#[doc = " domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[inline]
pub const fn fiat_p384_scalar_opp(
    arg1: &fiat_p384_scalar_montgomery_domain_field_element,
) -> fiat_p384_scalar_montgomery_domain_field_element {
    let mut out1: fiat_p384_scalar_montgomery_domain_field_element = [0; 6];
    let (x1, x2) = fiat_p384_scalar_subborrowx_u64(0x0, 0x0_u64, (arg1[0]));
    let (x3, x4) = fiat_p384_scalar_subborrowx_u64(x2, 0x0_u64, (arg1[1]));
    let (x5, x6) = fiat_p384_scalar_subborrowx_u64(x4, 0x0_u64, (arg1[2]));
    let (x7, x8) = fiat_p384_scalar_subborrowx_u64(x6, 0x0_u64, (arg1[3]));
    let (x9, x10) = fiat_p384_scalar_subborrowx_u64(x8, 0x0_u64, (arg1[4]));
    let (x11, x12) = fiat_p384_scalar_subborrowx_u64(x10, 0x0_u64, (arg1[5]));
    let (x13) = fiat_p384_scalar_cmovznz_u64(x12, 0x0_u64, 0xffffffffffffffff);
    let (x14, x15) = fiat_p384_scalar_addcarryx_u64(0x0, x1, (x13 & 0xecec196accc52973));
    let (x16, x17) = fiat_p384_scalar_addcarryx_u64(x15, x3, (x13 & 0x581a0db248b0a77a));
    let (x18, x19) = fiat_p384_scalar_addcarryx_u64(x17, x5, (x13 & 0xc7634d81f4372ddf));
    let (x20, x21) = fiat_p384_scalar_addcarryx_u64(x19, x7, x13);
    let (x22, x23) = fiat_p384_scalar_addcarryx_u64(x21, x9, x13);
    let (x24, x25) = fiat_p384_scalar_addcarryx_u64(x23, x11, x13);
    out1[0] = x14;
    out1[1] = x16;
    out1[2] = x18;
    out1[3] = x20;
    out1[4] = x22;
    out1[5] = x24;
    out1
}
#[doc = " The function fiat_p384_scalar_from_montgomery translates a field element out"]
#[doc = " of the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^6) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[inline]
pub const fn fiat_p384_scalar_from_montgomery(
    arg1: &fiat_p384_scalar_montgomery_domain_field_element,
) -> fiat_p384_scalar_non_montgomery_domain_field_element {
    let mut out1: fiat_p384_scalar_non_montgomery_domain_field_element = [0; 6];
    let x1: u64 = (arg1[0]);
    let (x2, x3) = fiat_p384_scalar_mulx_u64(x1, 0x6ed46089e88fdc45);
    let (x4, x5) = fiat_p384_scalar_mulx_u64(x2, 0xffffffffffffffff);
    let (x6, x7) = fiat_p384_scalar_mulx_u64(x2, 0xffffffffffffffff);
    let (x8, x9) = fiat_p384_scalar_mulx_u64(x2, 0xffffffffffffffff);
    let (x10, x11) = fiat_p384_scalar_mulx_u64(x2, 0xc7634d81f4372ddf);
    let (x12, x13) = fiat_p384_scalar_mulx_u64(x2, 0x581a0db248b0a77a);
    let (x14, x15) = fiat_p384_scalar_mulx_u64(x2, 0xecec196accc52973);
    let (x16, x17) = fiat_p384_scalar_addcarryx_u64(0x0, x15, x12);
    let (x18, x19) = fiat_p384_scalar_addcarryx_u64(x17, x13, x10);
    let (x20, x21) = fiat_p384_scalar_addcarryx_u64(x19, x11, x8);
    let (x22, x23) = fiat_p384_scalar_addcarryx_u64(x21, x9, x6);
    let (x24, x25) = fiat_p384_scalar_addcarryx_u64(x23, x7, x4);
    let (x26, x27) = fiat_p384_scalar_addcarryx_u64(0x0, x1, x14);
    let (x28, x29) = fiat_p384_scalar_addcarryx_u64(x27, 0x0_u64, x16);
    let (x30, x31) = fiat_p384_scalar_addcarryx_u64(x29, 0x0_u64, x18);
    let (x32, x33) = fiat_p384_scalar_addcarryx_u64(x31, 0x0_u64, x20);
    let (x34, x35) = fiat_p384_scalar_addcarryx_u64(x33, 0x0_u64, x22);
    let (x36, x37) = fiat_p384_scalar_addcarryx_u64(x35, 0x0_u64, x24);
    let (x38, x39) = fiat_p384_scalar_addcarryx_u64(x37, 0x0_u64, ((x25 as u64) + x5));
    let (x40, x41) = fiat_p384_scalar_addcarryx_u64(0x0, x28, (arg1[1]));
    let (x42, x43) = fiat_p384_scalar_addcarryx_u64(x41, x30, 0x0_u64);
    let (x44, x45) = fiat_p384_scalar_addcarryx_u64(x43, x32, 0x0_u64);
    let (x46, x47) = fiat_p384_scalar_addcarryx_u64(x45, x34, 0x0_u64);
    let (x48, x49) = fiat_p384_scalar_addcarryx_u64(x47, x36, 0x0_u64);
    let (x50, x51) = fiat_p384_scalar_addcarryx_u64(x49, x38, 0x0_u64);
    let (x52, x53) = fiat_p384_scalar_mulx_u64(x40, 0x6ed46089e88fdc45);
    let (x54, x55) = fiat_p384_scalar_mulx_u64(x52, 0xffffffffffffffff);
    let (x56, x57) = fiat_p384_scalar_mulx_u64(x52, 0xffffffffffffffff);
    let (x58, x59) = fiat_p384_scalar_mulx_u64(x52, 0xffffffffffffffff);
    let (x60, x61) = fiat_p384_scalar_mulx_u64(x52, 0xc7634d81f4372ddf);
    let (x62, x63) = fiat_p384_scalar_mulx_u64(x52, 0x581a0db248b0a77a);
    let (x64, x65) = fiat_p384_scalar_mulx_u64(x52, 0xecec196accc52973);
    let (x66, x67) = fiat_p384_scalar_addcarryx_u64(0x0, x65, x62);
    let (x68, x69) = fiat_p384_scalar_addcarryx_u64(x67, x63, x60);
    let (x70, x71) = fiat_p384_scalar_addcarryx_u64(x69, x61, x58);
    let (x72, x73) = fiat_p384_scalar_addcarryx_u64(x71, x59, x56);
    let (x74, x75) = fiat_p384_scalar_addcarryx_u64(x73, x57, x54);
    let (x76, x77) = fiat_p384_scalar_addcarryx_u64(0x0, x40, x64);
    let (x78, x79) = fiat_p384_scalar_addcarryx_u64(x77, x42, x66);
    let (x80, x81) = fiat_p384_scalar_addcarryx_u64(x79, x44, x68);
    let (x82, x83) = fiat_p384_scalar_addcarryx_u64(x81, x46, x70);
    let (x84, x85) = fiat_p384_scalar_addcarryx_u64(x83, x48, x72);
    let (x86, x87) = fiat_p384_scalar_addcarryx_u64(x85, x50, x74);
    let (x88, x89) =
        fiat_p384_scalar_addcarryx_u64(x87, ((x51 as u64) + (x39 as u64)), ((x75 as u64) + x55));
    let (x90, x91) = fiat_p384_scalar_addcarryx_u64(0x0, x78, (arg1[2]));
    let (x92, x93) = fiat_p384_scalar_addcarryx_u64(x91, x80, 0x0_u64);
    let (x94, x95) = fiat_p384_scalar_addcarryx_u64(x93, x82, 0x0_u64);
    let (x96, x97) = fiat_p384_scalar_addcarryx_u64(x95, x84, 0x0_u64);
    let (x98, x99) = fiat_p384_scalar_addcarryx_u64(x97, x86, 0x0_u64);
    let (x100, x101) = fiat_p384_scalar_addcarryx_u64(x99, x88, 0x0_u64);
    let (x102, x103) = fiat_p384_scalar_mulx_u64(x90, 0x6ed46089e88fdc45);
    let (x104, x105) = fiat_p384_scalar_mulx_u64(x102, 0xffffffffffffffff);
    let (x106, x107) = fiat_p384_scalar_mulx_u64(x102, 0xffffffffffffffff);
    let (x108, x109) = fiat_p384_scalar_mulx_u64(x102, 0xffffffffffffffff);
    let (x110, x111) = fiat_p384_scalar_mulx_u64(x102, 0xc7634d81f4372ddf);
    let (x112, x113) = fiat_p384_scalar_mulx_u64(x102, 0x581a0db248b0a77a);
    let (x114, x115) = fiat_p384_scalar_mulx_u64(x102, 0xecec196accc52973);
    let (x116, x117) = fiat_p384_scalar_addcarryx_u64(0x0, x115, x112);
    let (x118, x119) = fiat_p384_scalar_addcarryx_u64(x117, x113, x110);
    let (x120, x121) = fiat_p384_scalar_addcarryx_u64(x119, x111, x108);
    let (x122, x123) = fiat_p384_scalar_addcarryx_u64(x121, x109, x106);
    let (x124, x125) = fiat_p384_scalar_addcarryx_u64(x123, x107, x104);
    let (x126, x127) = fiat_p384_scalar_addcarryx_u64(0x0, x90, x114);
    let (x128, x129) = fiat_p384_scalar_addcarryx_u64(x127, x92, x116);
    let (x130, x131) = fiat_p384_scalar_addcarryx_u64(x129, x94, x118);
    let (x132, x133) = fiat_p384_scalar_addcarryx_u64(x131, x96, x120);
    let (x134, x135) = fiat_p384_scalar_addcarryx_u64(x133, x98, x122);
    let (x136, x137) = fiat_p384_scalar_addcarryx_u64(x135, x100, x124);
    let (x138, x139) = fiat_p384_scalar_addcarryx_u64(
        x137,
        ((x101 as u64) + (x89 as u64)),
        ((x125 as u64) + x105),
    );
    let (x140, x141) = fiat_p384_scalar_addcarryx_u64(0x0, x128, (arg1[3]));
    let (x142, x143) = fiat_p384_scalar_addcarryx_u64(x141, x130, 0x0_u64);
    let (x144, x145) = fiat_p384_scalar_addcarryx_u64(x143, x132, 0x0_u64);
    let (x146, x147) = fiat_p384_scalar_addcarryx_u64(x145, x134, 0x0_u64);
    let (x148, x149) = fiat_p384_scalar_addcarryx_u64(x147, x136, 0x0_u64);
    let (x150, x151) = fiat_p384_scalar_addcarryx_u64(x149, x138, 0x0_u64);
    let (x152, x153) = fiat_p384_scalar_mulx_u64(x140, 0x6ed46089e88fdc45);
    let (x154, x155) = fiat_p384_scalar_mulx_u64(x152, 0xffffffffffffffff);
    let (x156, x157) = fiat_p384_scalar_mulx_u64(x152, 0xffffffffffffffff);
    let (x158, x159) = fiat_p384_scalar_mulx_u64(x152, 0xffffffffffffffff);
    let (x160, x161) = fiat_p384_scalar_mulx_u64(x152, 0xc7634d81f4372ddf);
    let (x162, x163) = fiat_p384_scalar_mulx_u64(x152, 0x581a0db248b0a77a);
    let (x164, x165) = fiat_p384_scalar_mulx_u64(x152, 0xecec196accc52973);
    let (x166, x167) = fiat_p384_scalar_addcarryx_u64(0x0, x165, x162);
    let (x168, x169) = fiat_p384_scalar_addcarryx_u64(x167, x163, x160);
    let (x170, x171) = fiat_p384_scalar_addcarryx_u64(x169, x161, x158);
    let (x172, x173) = fiat_p384_scalar_addcarryx_u64(x171, x159, x156);
    let (x174, x175) = fiat_p384_scalar_addcarryx_u64(x173, x157, x154);
    let (x176, x177) = fiat_p384_scalar_addcarryx_u64(0x0, x140, x164);
    let (x178, x179) = fiat_p384_scalar_addcarryx_u64(x177, x142, x166);
    let (x180, x181) = fiat_p384_scalar_addcarryx_u64(x179, x144, x168);
    let (x182, x183) = fiat_p384_scalar_addcarryx_u64(x181, x146, x170);
    let (x184, x185) = fiat_p384_scalar_addcarryx_u64(x183, x148, x172);
    let (x186, x187) = fiat_p384_scalar_addcarryx_u64(x185, x150, x174);
    let (x188, x189) = fiat_p384_scalar_addcarryx_u64(
        x187,
        ((x151 as u64) + (x139 as u64)),
        ((x175 as u64) + x155),
    );
    let (x190, x191) = fiat_p384_scalar_addcarryx_u64(0x0, x178, (arg1[4]));
    let (x192, x193) = fiat_p384_scalar_addcarryx_u64(x191, x180, 0x0_u64);
    let (x194, x195) = fiat_p384_scalar_addcarryx_u64(x193, x182, 0x0_u64);
    let (x196, x197) = fiat_p384_scalar_addcarryx_u64(x195, x184, 0x0_u64);
    let (x198, x199) = fiat_p384_scalar_addcarryx_u64(x197, x186, 0x0_u64);
    let (x200, x201) = fiat_p384_scalar_addcarryx_u64(x199, x188, 0x0_u64);
    let (x202, x203) = fiat_p384_scalar_mulx_u64(x190, 0x6ed46089e88fdc45);
    let (x204, x205) = fiat_p384_scalar_mulx_u64(x202, 0xffffffffffffffff);
    let (x206, x207) = fiat_p384_scalar_mulx_u64(x202, 0xffffffffffffffff);
    let (x208, x209) = fiat_p384_scalar_mulx_u64(x202, 0xffffffffffffffff);
    let (x210, x211) = fiat_p384_scalar_mulx_u64(x202, 0xc7634d81f4372ddf);
    let (x212, x213) = fiat_p384_scalar_mulx_u64(x202, 0x581a0db248b0a77a);
    let (x214, x215) = fiat_p384_scalar_mulx_u64(x202, 0xecec196accc52973);
    let (x216, x217) = fiat_p384_scalar_addcarryx_u64(0x0, x215, x212);
    let (x218, x219) = fiat_p384_scalar_addcarryx_u64(x217, x213, x210);
    let (x220, x221) = fiat_p384_scalar_addcarryx_u64(x219, x211, x208);
    let (x222, x223) = fiat_p384_scalar_addcarryx_u64(x221, x209, x206);
    let (x224, x225) = fiat_p384_scalar_addcarryx_u64(x223, x207, x204);
    let (x226, x227) = fiat_p384_scalar_addcarryx_u64(0x0, x190, x214);
    let (x228, x229) = fiat_p384_scalar_addcarryx_u64(x227, x192, x216);
    let (x230, x231) = fiat_p384_scalar_addcarryx_u64(x229, x194, x218);
    let (x232, x233) = fiat_p384_scalar_addcarryx_u64(x231, x196, x220);
    let (x234, x235) = fiat_p384_scalar_addcarryx_u64(x233, x198, x222);
    let (x236, x237) = fiat_p384_scalar_addcarryx_u64(x235, x200, x224);
    let (x238, x239) = fiat_p384_scalar_addcarryx_u64(
        x237,
        ((x201 as u64) + (x189 as u64)),
        ((x225 as u64) + x205),
    );
    let (x240, x241) = fiat_p384_scalar_addcarryx_u64(0x0, x228, (arg1[5]));
    let (x242, x243) = fiat_p384_scalar_addcarryx_u64(x241, x230, 0x0_u64);
    let (x244, x245) = fiat_p384_scalar_addcarryx_u64(x243, x232, 0x0_u64);
    let (x246, x247) = fiat_p384_scalar_addcarryx_u64(x245, x234, 0x0_u64);
    let (x248, x249) = fiat_p384_scalar_addcarryx_u64(x247, x236, 0x0_u64);
    let (x250, x251) = fiat_p384_scalar_addcarryx_u64(x249, x238, 0x0_u64);
    let (x252, x253) = fiat_p384_scalar_mulx_u64(x240, 0x6ed46089e88fdc45);
    let (x254, x255) = fiat_p384_scalar_mulx_u64(x252, 0xffffffffffffffff);
    let (x256, x257) = fiat_p384_scalar_mulx_u64(x252, 0xffffffffffffffff);
    let (x258, x259) = fiat_p384_scalar_mulx_u64(x252, 0xffffffffffffffff);
    let (x260, x261) = fiat_p384_scalar_mulx_u64(x252, 0xc7634d81f4372ddf);
    let (x262, x263) = fiat_p384_scalar_mulx_u64(x252, 0x581a0db248b0a77a);
    let (x264, x265) = fiat_p384_scalar_mulx_u64(x252, 0xecec196accc52973);
    let (x266, x267) = fiat_p384_scalar_addcarryx_u64(0x0, x265, x262);
    let (x268, x269) = fiat_p384_scalar_addcarryx_u64(x267, x263, x260);
    let (x270, x271) = fiat_p384_scalar_addcarryx_u64(x269, x261, x258);
    let (x272, x273) = fiat_p384_scalar_addcarryx_u64(x271, x259, x256);
    let (x274, x275) = fiat_p384_scalar_addcarryx_u64(x273, x257, x254);
    let (x276, x277) = fiat_p384_scalar_addcarryx_u64(0x0, x240, x264);
    let (x278, x279) = fiat_p384_scalar_addcarryx_u64(x277, x242, x266);
    let (x280, x281) = fiat_p384_scalar_addcarryx_u64(x279, x244, x268);
    let (x282, x283) = fiat_p384_scalar_addcarryx_u64(x281, x246, x270);
    let (x284, x285) = fiat_p384_scalar_addcarryx_u64(x283, x248, x272);
    let (x286, x287) = fiat_p384_scalar_addcarryx_u64(x285, x250, x274);
    let (x288, x289) = fiat_p384_scalar_addcarryx_u64(
        x287,
        ((x251 as u64) + (x239 as u64)),
        ((x275 as u64) + x255),
    );
    let (x290, x291) = fiat_p384_scalar_subborrowx_u64(0x0, x278, 0xecec196accc52973);
    let (x292, x293) = fiat_p384_scalar_subborrowx_u64(x291, x280, 0x581a0db248b0a77a);
    let (x294, x295) = fiat_p384_scalar_subborrowx_u64(x293, x282, 0xc7634d81f4372ddf);
    let (x296, x297) = fiat_p384_scalar_subborrowx_u64(x295, x284, 0xffffffffffffffff);
    let (x298, x299) = fiat_p384_scalar_subborrowx_u64(x297, x286, 0xffffffffffffffff);
    let (x300, x301) = fiat_p384_scalar_subborrowx_u64(x299, x288, 0xffffffffffffffff);
    let (x302, x303) = fiat_p384_scalar_subborrowx_u64(x301, (x289 as u64), 0x0_u64);
    let (x304) = fiat_p384_scalar_cmovznz_u64(x303, x290, x278);
    let (x305) = fiat_p384_scalar_cmovznz_u64(x303, x292, x280);
    let (x306) = fiat_p384_scalar_cmovznz_u64(x303, x294, x282);
    let (x307) = fiat_p384_scalar_cmovznz_u64(x303, x296, x284);
    let (x308) = fiat_p384_scalar_cmovznz_u64(x303, x298, x286);
    let (x309) = fiat_p384_scalar_cmovznz_u64(x303, x300, x288);
    out1[0] = x304;
    out1[1] = x305;
    out1[2] = x306;
    out1[3] = x307;
    out1[4] = x308;
    out1[5] = x309;
    out1
}
#[doc = " The function fiat_p384_scalar_to_montgomery translates a field element into"]
#[doc = " the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = eval arg1 mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[inline]
pub const fn fiat_p384_scalar_to_montgomery(
    arg1: &fiat_p384_scalar_non_montgomery_domain_field_element,
) -> fiat_p384_scalar_montgomery_domain_field_element {
    let mut out1: fiat_p384_scalar_montgomery_domain_field_element = [0; 6];
    let x1: u64 = (arg1[1]);
    let x2: u64 = (arg1[2]);
    let x3: u64 = (arg1[3]);
    let x4: u64 = (arg1[4]);
    let x5: u64 = (arg1[5]);
    let x6: u64 = (arg1[0]);
    let (x7, x8) = fiat_p384_scalar_mulx_u64(x6, 0xc84ee012b39bf21);
    let (x9, x10) = fiat_p384_scalar_mulx_u64(x6, 0x3fb05b7a28266895);
    let (x11, x12) = fiat_p384_scalar_mulx_u64(x6, 0xd40d49174aab1cc5);
    let (x13, x14) = fiat_p384_scalar_mulx_u64(x6, 0xbc3e483afcb82947);
    let (x15, x16) = fiat_p384_scalar_mulx_u64(x6, 0xff3d81e5df1aa419);
    let (x17, x18) = fiat_p384_scalar_mulx_u64(x6, 0x2d319b2419b409a9);
    let (x19, x20) = fiat_p384_scalar_addcarryx_u64(0x0, x18, x15);
    let (x21, x22) = fiat_p384_scalar_addcarryx_u64(x20, x16, x13);
    let (x23, x24) = fiat_p384_scalar_addcarryx_u64(x22, x14, x11);
    let (x25, x26) = fiat_p384_scalar_addcarryx_u64(x24, x12, x9);
    let (x27, x28) = fiat_p384_scalar_addcarryx_u64(x26, x10, x7);
    let (x29, x30) = fiat_p384_scalar_mulx_u64(x17, 0x6ed46089e88fdc45);
    let (x31, x32) = fiat_p384_scalar_mulx_u64(x29, 0xffffffffffffffff);
    let (x33, x34) = fiat_p384_scalar_mulx_u64(x29, 0xffffffffffffffff);
    let (x35, x36) = fiat_p384_scalar_mulx_u64(x29, 0xffffffffffffffff);
    let (x37, x38) = fiat_p384_scalar_mulx_u64(x29, 0xc7634d81f4372ddf);
    let (x39, x40) = fiat_p384_scalar_mulx_u64(x29, 0x581a0db248b0a77a);
    let (x41, x42) = fiat_p384_scalar_mulx_u64(x29, 0xecec196accc52973);
    let (x43, x44) = fiat_p384_scalar_addcarryx_u64(0x0, x42, x39);
    let (x45, x46) = fiat_p384_scalar_addcarryx_u64(x44, x40, x37);
    let (x47, x48) = fiat_p384_scalar_addcarryx_u64(x46, x38, x35);
    let (x49, x50) = fiat_p384_scalar_addcarryx_u64(x48, x36, x33);
    let (x51, x52) = fiat_p384_scalar_addcarryx_u64(x50, x34, x31);
    let (x53, x54) = fiat_p384_scalar_addcarryx_u64(0x0, x17, x41);
    let (x55, x56) = fiat_p384_scalar_addcarryx_u64(x54, x19, x43);
    let (x57, x58) = fiat_p384_scalar_addcarryx_u64(x56, x21, x45);
    let (x59, x60) = fiat_p384_scalar_addcarryx_u64(x58, x23, x47);
    let (x61, x62) = fiat_p384_scalar_addcarryx_u64(x60, x25, x49);
    let (x63, x64) = fiat_p384_scalar_addcarryx_u64(x62, x27, x51);
    let (x65, x66) = fiat_p384_scalar_addcarryx_u64(x64, ((x28 as u64) + x8), ((x52 as u64) + x32));
    let (x67, x68) = fiat_p384_scalar_mulx_u64(x1, 0xc84ee012b39bf21);
    let (x69, x70) = fiat_p384_scalar_mulx_u64(x1, 0x3fb05b7a28266895);
    let (x71, x72) = fiat_p384_scalar_mulx_u64(x1, 0xd40d49174aab1cc5);
    let (x73, x74) = fiat_p384_scalar_mulx_u64(x1, 0xbc3e483afcb82947);
    let (x75, x76) = fiat_p384_scalar_mulx_u64(x1, 0xff3d81e5df1aa419);
    let (x77, x78) = fiat_p384_scalar_mulx_u64(x1, 0x2d319b2419b409a9);
    let (x79, x80) = fiat_p384_scalar_addcarryx_u64(0x0, x78, x75);
    let (x81, x82) = fiat_p384_scalar_addcarryx_u64(x80, x76, x73);
    let (x83, x84) = fiat_p384_scalar_addcarryx_u64(x82, x74, x71);
    let (x85, x86) = fiat_p384_scalar_addcarryx_u64(x84, x72, x69);
    let (x87, x88) = fiat_p384_scalar_addcarryx_u64(x86, x70, x67);
    let (x89, x90) = fiat_p384_scalar_addcarryx_u64(0x0, x55, x77);
    let (x91, x92) = fiat_p384_scalar_addcarryx_u64(x90, x57, x79);
    let (x93, x94) = fiat_p384_scalar_addcarryx_u64(x92, x59, x81);
    let (x95, x96) = fiat_p384_scalar_addcarryx_u64(x94, x61, x83);
    let (x97, x98) = fiat_p384_scalar_addcarryx_u64(x96, x63, x85);
    let (x99, x100) = fiat_p384_scalar_addcarryx_u64(x98, x65, x87);
    let (x101, x102) = fiat_p384_scalar_mulx_u64(x89, 0x6ed46089e88fdc45);
    let (x103, x104) = fiat_p384_scalar_mulx_u64(x101, 0xffffffffffffffff);
    let (x105, x106) = fiat_p384_scalar_mulx_u64(x101, 0xffffffffffffffff);
    let (x107, x108) = fiat_p384_scalar_mulx_u64(x101, 0xffffffffffffffff);
    let (x109, x110) = fiat_p384_scalar_mulx_u64(x101, 0xc7634d81f4372ddf);
    let (x111, x112) = fiat_p384_scalar_mulx_u64(x101, 0x581a0db248b0a77a);
    let (x113, x114) = fiat_p384_scalar_mulx_u64(x101, 0xecec196accc52973);
    let (x115, x116) = fiat_p384_scalar_addcarryx_u64(0x0, x114, x111);
    let (x117, x118) = fiat_p384_scalar_addcarryx_u64(x116, x112, x109);
    let (x119, x120) = fiat_p384_scalar_addcarryx_u64(x118, x110, x107);
    let (x121, x122) = fiat_p384_scalar_addcarryx_u64(x120, x108, x105);
    let (x123, x124) = fiat_p384_scalar_addcarryx_u64(x122, x106, x103);
    let (x125, x126) = fiat_p384_scalar_addcarryx_u64(0x0, x89, x113);
    let (x127, x128) = fiat_p384_scalar_addcarryx_u64(x126, x91, x115);
    let (x129, x130) = fiat_p384_scalar_addcarryx_u64(x128, x93, x117);
    let (x131, x132) = fiat_p384_scalar_addcarryx_u64(x130, x95, x119);
    let (x133, x134) = fiat_p384_scalar_addcarryx_u64(x132, x97, x121);
    let (x135, x136) = fiat_p384_scalar_addcarryx_u64(x134, x99, x123);
    let (x137, x138) = fiat_p384_scalar_addcarryx_u64(
        x136,
        (((x100 as u64) + (x66 as u64)) + ((x88 as u64) + x68)),
        ((x124 as u64) + x104),
    );
    let (x139, x140) = fiat_p384_scalar_mulx_u64(x2, 0xc84ee012b39bf21);
    let (x141, x142) = fiat_p384_scalar_mulx_u64(x2, 0x3fb05b7a28266895);
    let (x143, x144) = fiat_p384_scalar_mulx_u64(x2, 0xd40d49174aab1cc5);
    let (x145, x146) = fiat_p384_scalar_mulx_u64(x2, 0xbc3e483afcb82947);
    let (x147, x148) = fiat_p384_scalar_mulx_u64(x2, 0xff3d81e5df1aa419);
    let (x149, x150) = fiat_p384_scalar_mulx_u64(x2, 0x2d319b2419b409a9);
    let (x151, x152) = fiat_p384_scalar_addcarryx_u64(0x0, x150, x147);
    let (x153, x154) = fiat_p384_scalar_addcarryx_u64(x152, x148, x145);
    let (x155, x156) = fiat_p384_scalar_addcarryx_u64(x154, x146, x143);
    let (x157, x158) = fiat_p384_scalar_addcarryx_u64(x156, x144, x141);
    let (x159, x160) = fiat_p384_scalar_addcarryx_u64(x158, x142, x139);
    let (x161, x162) = fiat_p384_scalar_addcarryx_u64(0x0, x127, x149);
    let (x163, x164) = fiat_p384_scalar_addcarryx_u64(x162, x129, x151);
    let (x165, x166) = fiat_p384_scalar_addcarryx_u64(x164, x131, x153);
    let (x167, x168) = fiat_p384_scalar_addcarryx_u64(x166, x133, x155);
    let (x169, x170) = fiat_p384_scalar_addcarryx_u64(x168, x135, x157);
    let (x171, x172) = fiat_p384_scalar_addcarryx_u64(x170, x137, x159);
    let (x173, x174) = fiat_p384_scalar_mulx_u64(x161, 0x6ed46089e88fdc45);
    let (x175, x176) = fiat_p384_scalar_mulx_u64(x173, 0xffffffffffffffff);
    let (x177, x178) = fiat_p384_scalar_mulx_u64(x173, 0xffffffffffffffff);
    let (x179, x180) = fiat_p384_scalar_mulx_u64(x173, 0xffffffffffffffff);
    let (x181, x182) = fiat_p384_scalar_mulx_u64(x173, 0xc7634d81f4372ddf);
    let (x183, x184) = fiat_p384_scalar_mulx_u64(x173, 0x581a0db248b0a77a);
    let (x185, x186) = fiat_p384_scalar_mulx_u64(x173, 0xecec196accc52973);
    let (x187, x188) = fiat_p384_scalar_addcarryx_u64(0x0, x186, x183);
    let (x189, x190) = fiat_p384_scalar_addcarryx_u64(x188, x184, x181);
    let (x191, x192) = fiat_p384_scalar_addcarryx_u64(x190, x182, x179);
    let (x193, x194) = fiat_p384_scalar_addcarryx_u64(x192, x180, x177);
    let (x195, x196) = fiat_p384_scalar_addcarryx_u64(x194, x178, x175);
    let (x197, x198) = fiat_p384_scalar_addcarryx_u64(0x0, x161, x185);
    let (x199, x200) = fiat_p384_scalar_addcarryx_u64(x198, x163, x187);
    let (x201, x202) = fiat_p384_scalar_addcarryx_u64(x200, x165, x189);
    let (x203, x204) = fiat_p384_scalar_addcarryx_u64(x202, x167, x191);
    let (x205, x206) = fiat_p384_scalar_addcarryx_u64(x204, x169, x193);
    let (x207, x208) = fiat_p384_scalar_addcarryx_u64(x206, x171, x195);
    let (x209, x210) = fiat_p384_scalar_addcarryx_u64(
        x208,
        (((x172 as u64) + (x138 as u64)) + ((x160 as u64) + x140)),
        ((x196 as u64) + x176),
    );
    let (x211, x212) = fiat_p384_scalar_mulx_u64(x3, 0xc84ee012b39bf21);
    let (x213, x214) = fiat_p384_scalar_mulx_u64(x3, 0x3fb05b7a28266895);
    let (x215, x216) = fiat_p384_scalar_mulx_u64(x3, 0xd40d49174aab1cc5);
    let (x217, x218) = fiat_p384_scalar_mulx_u64(x3, 0xbc3e483afcb82947);
    let (x219, x220) = fiat_p384_scalar_mulx_u64(x3, 0xff3d81e5df1aa419);
    let (x221, x222) = fiat_p384_scalar_mulx_u64(x3, 0x2d319b2419b409a9);
    let (x223, x224) = fiat_p384_scalar_addcarryx_u64(0x0, x222, x219);
    let (x225, x226) = fiat_p384_scalar_addcarryx_u64(x224, x220, x217);
    let (x227, x228) = fiat_p384_scalar_addcarryx_u64(x226, x218, x215);
    let (x229, x230) = fiat_p384_scalar_addcarryx_u64(x228, x216, x213);
    let (x231, x232) = fiat_p384_scalar_addcarryx_u64(x230, x214, x211);
    let (x233, x234) = fiat_p384_scalar_addcarryx_u64(0x0, x199, x221);
    let (x235, x236) = fiat_p384_scalar_addcarryx_u64(x234, x201, x223);
    let (x237, x238) = fiat_p384_scalar_addcarryx_u64(x236, x203, x225);
    let (x239, x240) = fiat_p384_scalar_addcarryx_u64(x238, x205, x227);
    let (x241, x242) = fiat_p384_scalar_addcarryx_u64(x240, x207, x229);
    let (x243, x244) = fiat_p384_scalar_addcarryx_u64(x242, x209, x231);
    let (x245, x246) = fiat_p384_scalar_mulx_u64(x233, 0x6ed46089e88fdc45);
    let (x247, x248) = fiat_p384_scalar_mulx_u64(x245, 0xffffffffffffffff);
    let (x249, x250) = fiat_p384_scalar_mulx_u64(x245, 0xffffffffffffffff);
    let (x251, x252) = fiat_p384_scalar_mulx_u64(x245, 0xffffffffffffffff);
    let (x253, x254) = fiat_p384_scalar_mulx_u64(x245, 0xc7634d81f4372ddf);
    let (x255, x256) = fiat_p384_scalar_mulx_u64(x245, 0x581a0db248b0a77a);
    let (x257, x258) = fiat_p384_scalar_mulx_u64(x245, 0xecec196accc52973);
    let (x259, x260) = fiat_p384_scalar_addcarryx_u64(0x0, x258, x255);
    let (x261, x262) = fiat_p384_scalar_addcarryx_u64(x260, x256, x253);
    let (x263, x264) = fiat_p384_scalar_addcarryx_u64(x262, x254, x251);
    let (x265, x266) = fiat_p384_scalar_addcarryx_u64(x264, x252, x249);
    let (x267, x268) = fiat_p384_scalar_addcarryx_u64(x266, x250, x247);
    let (x269, x270) = fiat_p384_scalar_addcarryx_u64(0x0, x233, x257);
    let (x271, x272) = fiat_p384_scalar_addcarryx_u64(x270, x235, x259);
    let (x273, x274) = fiat_p384_scalar_addcarryx_u64(x272, x237, x261);
    let (x275, x276) = fiat_p384_scalar_addcarryx_u64(x274, x239, x263);
    let (x277, x278) = fiat_p384_scalar_addcarryx_u64(x276, x241, x265);
    let (x279, x280) = fiat_p384_scalar_addcarryx_u64(x278, x243, x267);
    let (x281, x282) = fiat_p384_scalar_addcarryx_u64(
        x280,
        (((x244 as u64) + (x210 as u64)) + ((x232 as u64) + x212)),
        ((x268 as u64) + x248),
    );
    let (x283, x284) = fiat_p384_scalar_mulx_u64(x4, 0xc84ee012b39bf21);
    let (x285, x286) = fiat_p384_scalar_mulx_u64(x4, 0x3fb05b7a28266895);
    let (x287, x288) = fiat_p384_scalar_mulx_u64(x4, 0xd40d49174aab1cc5);
    let (x289, x290) = fiat_p384_scalar_mulx_u64(x4, 0xbc3e483afcb82947);
    let (x291, x292) = fiat_p384_scalar_mulx_u64(x4, 0xff3d81e5df1aa419);
    let (x293, x294) = fiat_p384_scalar_mulx_u64(x4, 0x2d319b2419b409a9);
    let (x295, x296) = fiat_p384_scalar_addcarryx_u64(0x0, x294, x291);
    let (x297, x298) = fiat_p384_scalar_addcarryx_u64(x296, x292, x289);
    let (x299, x300) = fiat_p384_scalar_addcarryx_u64(x298, x290, x287);
    let (x301, x302) = fiat_p384_scalar_addcarryx_u64(x300, x288, x285);
    let (x303, x304) = fiat_p384_scalar_addcarryx_u64(x302, x286, x283);
    let (x305, x306) = fiat_p384_scalar_addcarryx_u64(0x0, x271, x293);
    let (x307, x308) = fiat_p384_scalar_addcarryx_u64(x306, x273, x295);
    let (x309, x310) = fiat_p384_scalar_addcarryx_u64(x308, x275, x297);
    let (x311, x312) = fiat_p384_scalar_addcarryx_u64(x310, x277, x299);
    let (x313, x314) = fiat_p384_scalar_addcarryx_u64(x312, x279, x301);
    let (x315, x316) = fiat_p384_scalar_addcarryx_u64(x314, x281, x303);
    let (x317, x318) = fiat_p384_scalar_mulx_u64(x305, 0x6ed46089e88fdc45);
    let (x319, x320) = fiat_p384_scalar_mulx_u64(x317, 0xffffffffffffffff);
    let (x321, x322) = fiat_p384_scalar_mulx_u64(x317, 0xffffffffffffffff);
    let (x323, x324) = fiat_p384_scalar_mulx_u64(x317, 0xffffffffffffffff);
    let (x325, x326) = fiat_p384_scalar_mulx_u64(x317, 0xc7634d81f4372ddf);
    let (x327, x328) = fiat_p384_scalar_mulx_u64(x317, 0x581a0db248b0a77a);
    let (x329, x330) = fiat_p384_scalar_mulx_u64(x317, 0xecec196accc52973);
    let (x331, x332) = fiat_p384_scalar_addcarryx_u64(0x0, x330, x327);
    let (x333, x334) = fiat_p384_scalar_addcarryx_u64(x332, x328, x325);
    let (x335, x336) = fiat_p384_scalar_addcarryx_u64(x334, x326, x323);
    let (x337, x338) = fiat_p384_scalar_addcarryx_u64(x336, x324, x321);
    let (x339, x340) = fiat_p384_scalar_addcarryx_u64(x338, x322, x319);
    let (x341, x342) = fiat_p384_scalar_addcarryx_u64(0x0, x305, x329);
    let (x343, x344) = fiat_p384_scalar_addcarryx_u64(x342, x307, x331);
    let (x345, x346) = fiat_p384_scalar_addcarryx_u64(x344, x309, x333);
    let (x347, x348) = fiat_p384_scalar_addcarryx_u64(x346, x311, x335);
    let (x349, x350) = fiat_p384_scalar_addcarryx_u64(x348, x313, x337);
    let (x351, x352) = fiat_p384_scalar_addcarryx_u64(x350, x315, x339);
    let (x353, x354) = fiat_p384_scalar_addcarryx_u64(
        x352,
        (((x316 as u64) + (x282 as u64)) + ((x304 as u64) + x284)),
        ((x340 as u64) + x320),
    );
    let (x355, x356) = fiat_p384_scalar_mulx_u64(x5, 0xc84ee012b39bf21);
    let (x357, x358) = fiat_p384_scalar_mulx_u64(x5, 0x3fb05b7a28266895);
    let (x359, x360) = fiat_p384_scalar_mulx_u64(x5, 0xd40d49174aab1cc5);
    let (x361, x362) = fiat_p384_scalar_mulx_u64(x5, 0xbc3e483afcb82947);
    let (x363, x364) = fiat_p384_scalar_mulx_u64(x5, 0xff3d81e5df1aa419);
    let (x365, x366) = fiat_p384_scalar_mulx_u64(x5, 0x2d319b2419b409a9);
    let (x367, x368) = fiat_p384_scalar_addcarryx_u64(0x0, x366, x363);
    let (x369, x370) = fiat_p384_scalar_addcarryx_u64(x368, x364, x361);
    let (x371, x372) = fiat_p384_scalar_addcarryx_u64(x370, x362, x359);
    let (x373, x374) = fiat_p384_scalar_addcarryx_u64(x372, x360, x357);
    let (x375, x376) = fiat_p384_scalar_addcarryx_u64(x374, x358, x355);
    let (x377, x378) = fiat_p384_scalar_addcarryx_u64(0x0, x343, x365);
    let (x379, x380) = fiat_p384_scalar_addcarryx_u64(x378, x345, x367);
    let (x381, x382) = fiat_p384_scalar_addcarryx_u64(x380, x347, x369);
    let (x383, x384) = fiat_p384_scalar_addcarryx_u64(x382, x349, x371);
    let (x385, x386) = fiat_p384_scalar_addcarryx_u64(x384, x351, x373);
    let (x387, x388) = fiat_p384_scalar_addcarryx_u64(x386, x353, x375);
    let (x389, x390) = fiat_p384_scalar_mulx_u64(x377, 0x6ed46089e88fdc45);
    let (x391, x392) = fiat_p384_scalar_mulx_u64(x389, 0xffffffffffffffff);
    let (x393, x394) = fiat_p384_scalar_mulx_u64(x389, 0xffffffffffffffff);
    let (x395, x396) = fiat_p384_scalar_mulx_u64(x389, 0xffffffffffffffff);
    let (x397, x398) = fiat_p384_scalar_mulx_u64(x389, 0xc7634d81f4372ddf);
    let (x399, x400) = fiat_p384_scalar_mulx_u64(x389, 0x581a0db248b0a77a);
    let (x401, x402) = fiat_p384_scalar_mulx_u64(x389, 0xecec196accc52973);
    let (x403, x404) = fiat_p384_scalar_addcarryx_u64(0x0, x402, x399);
    let (x405, x406) = fiat_p384_scalar_addcarryx_u64(x404, x400, x397);
    let (x407, x408) = fiat_p384_scalar_addcarryx_u64(x406, x398, x395);
    let (x409, x410) = fiat_p384_scalar_addcarryx_u64(x408, x396, x393);
    let (x411, x412) = fiat_p384_scalar_addcarryx_u64(x410, x394, x391);
    let (x413, x414) = fiat_p384_scalar_addcarryx_u64(0x0, x377, x401);
    let (x415, x416) = fiat_p384_scalar_addcarryx_u64(x414, x379, x403);
    let (x417, x418) = fiat_p384_scalar_addcarryx_u64(x416, x381, x405);
    let (x419, x420) = fiat_p384_scalar_addcarryx_u64(x418, x383, x407);
    let (x421, x422) = fiat_p384_scalar_addcarryx_u64(x420, x385, x409);
    let (x423, x424) = fiat_p384_scalar_addcarryx_u64(x422, x387, x411);
    let (x425, x426) = fiat_p384_scalar_addcarryx_u64(
        x424,
        (((x388 as u64) + (x354 as u64)) + ((x376 as u64) + x356)),
        ((x412 as u64) + x392),
    );
    let (x427, x428) = fiat_p384_scalar_subborrowx_u64(0x0, x415, 0xecec196accc52973);
    let (x429, x430) = fiat_p384_scalar_subborrowx_u64(x428, x417, 0x581a0db248b0a77a);
    let (x431, x432) = fiat_p384_scalar_subborrowx_u64(x430, x419, 0xc7634d81f4372ddf);
    let (x433, x434) = fiat_p384_scalar_subborrowx_u64(x432, x421, 0xffffffffffffffff);
    let (x435, x436) = fiat_p384_scalar_subborrowx_u64(x434, x423, 0xffffffffffffffff);
    let (x437, x438) = fiat_p384_scalar_subborrowx_u64(x436, x425, 0xffffffffffffffff);
    let (x439, x440) = fiat_p384_scalar_subborrowx_u64(x438, (x426 as u64), 0x0_u64);
    let (x441) = fiat_p384_scalar_cmovznz_u64(x440, x427, x415);
    let (x442) = fiat_p384_scalar_cmovznz_u64(x440, x429, x417);
    let (x443) = fiat_p384_scalar_cmovznz_u64(x440, x431, x419);
    let (x444) = fiat_p384_scalar_cmovznz_u64(x440, x433, x421);
    let (x445) = fiat_p384_scalar_cmovznz_u64(x440, x435, x423);
    let (x446) = fiat_p384_scalar_cmovznz_u64(x440, x437, x425);
    out1[0] = x441;
    out1[1] = x442;
    out1[2] = x443;
    out1[3] = x444;
    out1[4] = x445;
    out1[5] = x446;
    out1
}
#[doc = " The function fiat_p384_scalar_selectznz is a multi-limb conditional select."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (if arg1 = 0 then arg2 else arg3)"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]   arg3: [[0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]] Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]"]
#[inline]
pub const fn fiat_p384_scalar_selectznz(
    arg1: fiat_p384_scalar_u1,
    arg2: &[u64; 6],
    arg3: &[u64; 6],
) -> [u64; 6] {
    let mut out1: [u64; 6] = [0; 6];
    let (x1) = fiat_p384_scalar_cmovznz_u64(arg1, (arg2[0]), (arg3[0]));
    let (x2) = fiat_p384_scalar_cmovznz_u64(arg1, (arg2[1]), (arg3[1]));
    let (x3) = fiat_p384_scalar_cmovznz_u64(arg1, (arg2[2]), (arg3[2]));
    let (x4) = fiat_p384_scalar_cmovznz_u64(arg1, (arg2[3]), (arg3[3]));
    let (x5) = fiat_p384_scalar_cmovznz_u64(arg1, (arg2[4]), (arg3[4]));
    let (x6) = fiat_p384_scalar_cmovznz_u64(arg1, (arg2[5]), (arg3[5]));
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1
}
#[doc = " The function fiat_p384_scalar_to_bytes serializes a field element NOT in the"]
#[doc = " Montgomery domain to bytes in little-endian order."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋)"]
#[doc = " [0..47]"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]] Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]"]
#[inline]
pub const fn fiat_p384_scalar_to_bytes(arg1: &[u64; 6]) -> [u8; 48] {
    let mut out1: [u8; 48] = [0; 48];
    let x1: u64 = (arg1[5]);
    let x2: u64 = (arg1[4]);
    let x3: u64 = (arg1[3]);
    let x4: u64 = (arg1[2]);
    let x5: u64 = (arg1[1]);
    let x6: u64 = (arg1[0]);
    let x7: u8 = ((x6 & 0xff_u64) as u8);
    let x8: u64 = (x6 >> 8);
    let x9: u8 = ((x8 & 0xff_u64) as u8);
    let x10: u64 = (x8 >> 8);
    let x11: u8 = ((x10 & 0xff_u64) as u8);
    let x12: u64 = (x10 >> 8);
    let x13: u8 = ((x12 & 0xff_u64) as u8);
    let x14: u64 = (x12 >> 8);
    let x15: u8 = ((x14 & 0xff_u64) as u8);
    let x16: u64 = (x14 >> 8);
    let x17: u8 = ((x16 & 0xff_u64) as u8);
    let x18: u64 = (x16 >> 8);
    let x19: u8 = ((x18 & 0xff_u64) as u8);
    let x20: u8 = ((x18 >> 8) as u8);
    let x21: u8 = ((x5 & 0xff_u64) as u8);
    let x22: u64 = (x5 >> 8);
    let x23: u8 = ((x22 & 0xff_u64) as u8);
    let x24: u64 = (x22 >> 8);
    let x25: u8 = ((x24 & 0xff_u64) as u8);
    let x26: u64 = (x24 >> 8);
    let x27: u8 = ((x26 & 0xff_u64) as u8);
    let x28: u64 = (x26 >> 8);
    let x29: u8 = ((x28 & 0xff_u64) as u8);
    let x30: u64 = (x28 >> 8);
    let x31: u8 = ((x30 & 0xff_u64) as u8);
    let x32: u64 = (x30 >> 8);
    let x33: u8 = ((x32 & 0xff_u64) as u8);
    let x34: u8 = ((x32 >> 8) as u8);
    let x35: u8 = ((x4 & 0xff_u64) as u8);
    let x36: u64 = (x4 >> 8);
    let x37: u8 = ((x36 & 0xff_u64) as u8);
    let x38: u64 = (x36 >> 8);
    let x39: u8 = ((x38 & 0xff_u64) as u8);
    let x40: u64 = (x38 >> 8);
    let x41: u8 = ((x40 & 0xff_u64) as u8);
    let x42: u64 = (x40 >> 8);
    let x43: u8 = ((x42 & 0xff_u64) as u8);
    let x44: u64 = (x42 >> 8);
    let x45: u8 = ((x44 & 0xff_u64) as u8);
    let x46: u64 = (x44 >> 8);
    let x47: u8 = ((x46 & 0xff_u64) as u8);
    let x48: u8 = ((x46 >> 8) as u8);
    let x49: u8 = ((x3 & 0xff_u64) as u8);
    let x50: u64 = (x3 >> 8);
    let x51: u8 = ((x50 & 0xff_u64) as u8);
    let x52: u64 = (x50 >> 8);
    let x53: u8 = ((x52 & 0xff_u64) as u8);
    let x54: u64 = (x52 >> 8);
    let x55: u8 = ((x54 & 0xff_u64) as u8);
    let x56: u64 = (x54 >> 8);
    let x57: u8 = ((x56 & 0xff_u64) as u8);
    let x58: u64 = (x56 >> 8);
    let x59: u8 = ((x58 & 0xff_u64) as u8);
    let x60: u64 = (x58 >> 8);
    let x61: u8 = ((x60 & 0xff_u64) as u8);
    let x62: u8 = ((x60 >> 8) as u8);
    let x63: u8 = ((x2 & 0xff_u64) as u8);
    let x64: u64 = (x2 >> 8);
    let x65: u8 = ((x64 & 0xff_u64) as u8);
    let x66: u64 = (x64 >> 8);
    let x67: u8 = ((x66 & 0xff_u64) as u8);
    let x68: u64 = (x66 >> 8);
    let x69: u8 = ((x68 & 0xff_u64) as u8);
    let x70: u64 = (x68 >> 8);
    let x71: u8 = ((x70 & 0xff_u64) as u8);
    let x72: u64 = (x70 >> 8);
    let x73: u8 = ((x72 & 0xff_u64) as u8);
    let x74: u64 = (x72 >> 8);
    let x75: u8 = ((x74 & 0xff_u64) as u8);
    let x76: u8 = ((x74 >> 8) as u8);
    let x77: u8 = ((x1 & 0xff_u64) as u8);
    let x78: u64 = (x1 >> 8);
    let x79: u8 = ((x78 & 0xff_u64) as u8);
    let x80: u64 = (x78 >> 8);
    let x81: u8 = ((x80 & 0xff_u64) as u8);
    let x82: u64 = (x80 >> 8);
    let x83: u8 = ((x82 & 0xff_u64) as u8);
    let x84: u64 = (x82 >> 8);
    let x85: u8 = ((x84 & 0xff_u64) as u8);
    let x86: u64 = (x84 >> 8);
    let x87: u8 = ((x86 & 0xff_u64) as u8);
    let x88: u64 = (x86 >> 8);
    let x89: u8 = ((x88 & 0xff_u64) as u8);
    let x90: u8 = ((x88 >> 8) as u8);
    out1[0] = x7;
    out1[1] = x9;
    out1[2] = x11;
    out1[3] = x13;
    out1[4] = x15;
    out1[5] = x17;
    out1[6] = x19;
    out1[7] = x20;
    out1[8] = x21;
    out1[9] = x23;
    out1[10] = x25;
    out1[11] = x27;
    out1[12] = x29;
    out1[13] = x31;
    out1[14] = x33;
    out1[15] = x34;
    out1[16] = x35;
    out1[17] = x37;
    out1[18] = x39;
    out1[19] = x41;
    out1[20] = x43;
    out1[21] = x45;
    out1[22] = x47;
    out1[23] = x48;
    out1[24] = x49;
    out1[25] = x51;
    out1[26] = x53;
    out1[27] = x55;
    out1[28] = x57;
    out1[29] = x59;
    out1[30] = x61;
    out1[31] = x62;
    out1[32] = x63;
    out1[33] = x65;
    out1[34] = x67;
    out1[35] = x69;
    out1[36] = x71;
    out1[37] = x73;
    out1[38] = x75;
    out1[39] = x76;
    out1[40] = x77;
    out1[41] = x79;
    out1[42] = x81;
    out1[43] = x83;
    out1[44] = x85;
    out1[45] = x87;
    out1[46] = x89;
    out1[47] = x90;
    out1
}
#[doc = " The function fiat_p384_scalar_from_bytes deserializes a field element NOT in"]
#[doc = " the Montgomery domain from bytes in little-endian order."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ bytes_eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval out1 mod m = bytes_eval arg1 mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~>"]
#[doc = " 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]] Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]"]
#[inline]
pub const fn fiat_p384_scalar_from_bytes(arg1: &[u8; 48]) -> [u64; 6] {
    let mut out1: [u64; 6] = [0; 6];
    let x1: u64 = (((arg1[47]) as u64) << 56);
    let x2: u64 = (((arg1[46]) as u64) << 48);
    let x3: u64 = (((arg1[45]) as u64) << 40);
    let x4: u64 = (((arg1[44]) as u64) << 32);
    let x5: u64 = (((arg1[43]) as u64) << 24);
    let x6: u64 = (((arg1[42]) as u64) << 16);
    let x7: u64 = (((arg1[41]) as u64) << 8);
    let x8: u8 = (arg1[40]);
    let x9: u64 = (((arg1[39]) as u64) << 56);
    let x10: u64 = (((arg1[38]) as u64) << 48);
    let x11: u64 = (((arg1[37]) as u64) << 40);
    let x12: u64 = (((arg1[36]) as u64) << 32);
    let x13: u64 = (((arg1[35]) as u64) << 24);
    let x14: u64 = (((arg1[34]) as u64) << 16);
    let x15: u64 = (((arg1[33]) as u64) << 8);
    let x16: u8 = (arg1[32]);
    let x17: u64 = (((arg1[31]) as u64) << 56);
    let x18: u64 = (((arg1[30]) as u64) << 48);
    let x19: u64 = (((arg1[29]) as u64) << 40);
    let x20: u64 = (((arg1[28]) as u64) << 32);
    let x21: u64 = (((arg1[27]) as u64) << 24);
    let x22: u64 = (((arg1[26]) as u64) << 16);
    let x23: u64 = (((arg1[25]) as u64) << 8);
    let x24: u8 = (arg1[24]);
    let x25: u64 = (((arg1[23]) as u64) << 56);
    let x26: u64 = (((arg1[22]) as u64) << 48);
    let x27: u64 = (((arg1[21]) as u64) << 40);
    let x28: u64 = (((arg1[20]) as u64) << 32);
    let x29: u64 = (((arg1[19]) as u64) << 24);
    let x30: u64 = (((arg1[18]) as u64) << 16);
    let x31: u64 = (((arg1[17]) as u64) << 8);
    let x32: u8 = (arg1[16]);
    let x33: u64 = (((arg1[15]) as u64) << 56);
    let x34: u64 = (((arg1[14]) as u64) << 48);
    let x35: u64 = (((arg1[13]) as u64) << 40);
    let x36: u64 = (((arg1[12]) as u64) << 32);
    let x37: u64 = (((arg1[11]) as u64) << 24);
    let x38: u64 = (((arg1[10]) as u64) << 16);
    let x39: u64 = (((arg1[9]) as u64) << 8);
    let x40: u8 = (arg1[8]);
    let x41: u64 = (((arg1[7]) as u64) << 56);
    let x42: u64 = (((arg1[6]) as u64) << 48);
    let x43: u64 = (((arg1[5]) as u64) << 40);
    let x44: u64 = (((arg1[4]) as u64) << 32);
    let x45: u64 = (((arg1[3]) as u64) << 24);
    let x46: u64 = (((arg1[2]) as u64) << 16);
    let x47: u64 = (((arg1[1]) as u64) << 8);
    let x48: u8 = (arg1[0]);
    let x49: u64 = (x47 + (x48 as u64));
    let x50: u64 = (x46 + x49);
    let x51: u64 = (x45 + x50);
    let x52: u64 = (x44 + x51);
    let x53: u64 = (x43 + x52);
    let x54: u64 = (x42 + x53);
    let x55: u64 = (x41 + x54);
    let x56: u64 = (x39 + (x40 as u64));
    let x57: u64 = (x38 + x56);
    let x58: u64 = (x37 + x57);
    let x59: u64 = (x36 + x58);
    let x60: u64 = (x35 + x59);
    let x61: u64 = (x34 + x60);
    let x62: u64 = (x33 + x61);
    let x63: u64 = (x31 + (x32 as u64));
    let x64: u64 = (x30 + x63);
    let x65: u64 = (x29 + x64);
    let x66: u64 = (x28 + x65);
    let x67: u64 = (x27 + x66);
    let x68: u64 = (x26 + x67);
    let x69: u64 = (x25 + x68);
    let x70: u64 = (x23 + (x24 as u64));
    let x71: u64 = (x22 + x70);
    let x72: u64 = (x21 + x71);
    let x73: u64 = (x20 + x72);
    let x74: u64 = (x19 + x73);
    let x75: u64 = (x18 + x74);
    let x76: u64 = (x17 + x75);
    let x77: u64 = (x15 + (x16 as u64));
    let x78: u64 = (x14 + x77);
    let x79: u64 = (x13 + x78);
    let x80: u64 = (x12 + x79);
    let x81: u64 = (x11 + x80);
    let x82: u64 = (x10 + x81);
    let x83: u64 = (x9 + x82);
    let x84: u64 = (x7 + (x8 as u64));
    let x85: u64 = (x6 + x84);
    let x86: u64 = (x5 + x85);
    let x87: u64 = (x4 + x86);
    let x88: u64 = (x3 + x87);
    let x89: u64 = (x2 + x88);
    let x90: u64 = (x1 + x89);
    out1[0] = x55;
    out1[1] = x62;
    out1[2] = x69;
    out1[3] = x76;
    out1[4] = x83;
    out1[5] = x90;
    out1
}
#[doc = " The function fiat_p384_scalar_set_one returns the field element one in the"]
#[doc = " Montgomery domain."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = 1 mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[inline]
pub const fn fiat_p384_scalar_set_one() -> fiat_p384_scalar_montgomery_domain_field_element {
    let mut out1: fiat_p384_scalar_montgomery_domain_field_element = [0; 6];
    out1[0] = 0x1313e695333ad68d;
    out1[1] = 0xa7e5f24db74f5885;
    out1[2] = 0x389cb27e0bc8d220;
    out1[3] = 0x0_u64;
    out1[4] = 0x0_u64;
    out1[5] = 0x0_u64;
    out1
}
#[doc = " The function fiat_p384_scalar_msat returns the saturated representation of"]
#[doc = " the prime modulus."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   twos_complement_eval out1 = m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff]]"]
#[inline]
pub const fn fiat_p384_scalar_msat() -> [u64; 7] {
    let mut out1: [u64; 7] = [0; 7];
    out1[0] = 0xecec196accc52973;
    out1[1] = 0x581a0db248b0a77a;
    out1[2] = 0xc7634d81f4372ddf;
    out1[3] = 0xffffffffffffffff;
    out1[4] = 0xffffffffffffffff;
    out1[5] = 0xffffffffffffffff;
    out1[6] = 0x0_u64;
    out1
}
#[doc = " The function fiat_p384_scalar_divstep_precomp returns the precomputed value"]
#[doc = " for Bernstein-Yang-inversion (in montgomery form)."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then"]
#[doc = " ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]"]
#[inline]
pub const fn fiat_p384_scalar_divstep_precomp() -> [u64; 6] {
    let mut out1: [u64; 6] = [0; 6];
    out1[0] = 0x49589ae0e6045b6a;
    out1[1] = 0x3c9a5352870040ed;
    out1[2] = 0xdacb097e977dc242;
    out1[3] = 0xb5ab30a6d1ecbe36;
    out1[4] = 0x97d7a1081f959973;
    out1[5] = 0x2ba012f8d27192bc;
    out1
}
#[doc = " The function fiat_p384_scalar_divstep computes a divstep."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg4 < m"]
#[doc = "   0 ≤ eval arg5 < m"]
#[doc = " Postconditions:"]
#[doc = "   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1"]
#[doc = " else 1 + arg1)   twos_complement_eval out2 = (if 0 < arg1 ∧"]
#[doc = " (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else"]
#[doc = " twos_complement_eval arg2)   twos_complement_eval out3 = (if 0 < arg1 ∧"]
#[doc = " (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 -"]
#[doc = " twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 +"]
#[doc = " (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)"]
#[doc = "   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval"]
#[doc = " arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval"]
#[doc = " (from_montgomery arg4)) mod m)   eval (from_montgomery out5) mod m = (if 0 <"]
#[doc = " arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4)"]
#[doc = " - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) +"]
#[doc = " (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)"]
#[doc = "   0 ≤ eval out5 < m"]
#[doc = "   0 ≤ eval out5 < m"]
#[doc = "   0 ≤ eval out2 < m"]
#[doc = "   0 ≤ eval out3 < m"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0xffffffffffffffff]"]
#[doc = "   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff]]   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]   arg4: [[0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]   arg5: [[0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]] Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffffffffffff]"]
#[doc = "   out2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff]]   out3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]   out4: [[0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]   out5: [[0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~>"]
#[doc = " 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]"]
#[inline]
pub const fn fiat_p384_scalar_divstep(
    arg1: u64,
    arg2: &[u64; 7],
    arg3: &[u64; 7],
    arg4: &[u64; 6],
    arg5: &[u64; 6],
) -> (u64, [u64; 7], [u64; 7], [u64; 6], [u64; 6]) {
    let mut out1: u64 = 0;
    let mut out2: [u64; 7] = [0; 7];
    let mut out3: [u64; 7] = [0; 7];
    let mut out4: [u64; 6] = [0; 6];
    let mut out5: [u64; 6] = [0; 6];
    let (x1, x2) = fiat_p384_scalar_addcarryx_u64(0x0, (!arg1), 0x1_u64);
    let x3: fiat_p384_scalar_u1 =
        (((x1 >> 63) as fiat_p384_scalar_u1) & (((arg3[0]) & 0x1_u64) as fiat_p384_scalar_u1));
    let (x4, x5) = fiat_p384_scalar_addcarryx_u64(0x0, (!arg1), 0x1_u64);
    let (x6) = fiat_p384_scalar_cmovznz_u64(x3, arg1, x4);
    let (x7) = fiat_p384_scalar_cmovznz_u64(x3, (arg2[0]), (arg3[0]));
    let (x8) = fiat_p384_scalar_cmovznz_u64(x3, (arg2[1]), (arg3[1]));
    let (x9) = fiat_p384_scalar_cmovznz_u64(x3, (arg2[2]), (arg3[2]));
    let (x10) = fiat_p384_scalar_cmovznz_u64(x3, (arg2[3]), (arg3[3]));
    let (x11) = fiat_p384_scalar_cmovznz_u64(x3, (arg2[4]), (arg3[4]));
    let (x12) = fiat_p384_scalar_cmovznz_u64(x3, (arg2[5]), (arg3[5]));
    let (x13) = fiat_p384_scalar_cmovznz_u64(x3, (arg2[6]), (arg3[6]));
    let (x14, x15) = fiat_p384_scalar_addcarryx_u64(0x0, 0x1_u64, (!(arg2[0])));
    let (x16, x17) = fiat_p384_scalar_addcarryx_u64(x15, 0x0_u64, (!(arg2[1])));
    let (x18, x19) = fiat_p384_scalar_addcarryx_u64(x17, 0x0_u64, (!(arg2[2])));
    let (x20, x21) = fiat_p384_scalar_addcarryx_u64(x19, 0x0_u64, (!(arg2[3])));
    let (x22, x23) = fiat_p384_scalar_addcarryx_u64(x21, 0x0_u64, (!(arg2[4])));
    let (x24, x25) = fiat_p384_scalar_addcarryx_u64(x23, 0x0_u64, (!(arg2[5])));
    let (x26, x27) = fiat_p384_scalar_addcarryx_u64(x25, 0x0_u64, (!(arg2[6])));
    let (x28) = fiat_p384_scalar_cmovznz_u64(x3, (arg3[0]), x14);
    let (x29) = fiat_p384_scalar_cmovznz_u64(x3, (arg3[1]), x16);
    let (x30) = fiat_p384_scalar_cmovznz_u64(x3, (arg3[2]), x18);
    let (x31) = fiat_p384_scalar_cmovznz_u64(x3, (arg3[3]), x20);
    let (x32) = fiat_p384_scalar_cmovznz_u64(x3, (arg3[4]), x22);
    let (x33) = fiat_p384_scalar_cmovznz_u64(x3, (arg3[5]), x24);
    let (x34) = fiat_p384_scalar_cmovznz_u64(x3, (arg3[6]), x26);
    let (x35) = fiat_p384_scalar_cmovznz_u64(x3, (arg4[0]), (arg5[0]));
    let (x36) = fiat_p384_scalar_cmovznz_u64(x3, (arg4[1]), (arg5[1]));
    let (x37) = fiat_p384_scalar_cmovznz_u64(x3, (arg4[2]), (arg5[2]));
    let (x38) = fiat_p384_scalar_cmovznz_u64(x3, (arg4[3]), (arg5[3]));
    let (x39) = fiat_p384_scalar_cmovznz_u64(x3, (arg4[4]), (arg5[4]));
    let (x40) = fiat_p384_scalar_cmovznz_u64(x3, (arg4[5]), (arg5[5]));
    let (x41, x42) = fiat_p384_scalar_addcarryx_u64(0x0, x35, x35);
    let (x43, x44) = fiat_p384_scalar_addcarryx_u64(x42, x36, x36);
    let (x45, x46) = fiat_p384_scalar_addcarryx_u64(x44, x37, x37);
    let (x47, x48) = fiat_p384_scalar_addcarryx_u64(x46, x38, x38);
    let (x49, x50) = fiat_p384_scalar_addcarryx_u64(x48, x39, x39);
    let (x51, x52) = fiat_p384_scalar_addcarryx_u64(x50, x40, x40);
    let (x53, x54) = fiat_p384_scalar_subborrowx_u64(0x0, x41, 0xecec196accc52973);
    let (x55, x56) = fiat_p384_scalar_subborrowx_u64(x54, x43, 0x581a0db248b0a77a);
    let (x57, x58) = fiat_p384_scalar_subborrowx_u64(x56, x45, 0xc7634d81f4372ddf);
    let (x59, x60) = fiat_p384_scalar_subborrowx_u64(x58, x47, 0xffffffffffffffff);
    let (x61, x62) = fiat_p384_scalar_subborrowx_u64(x60, x49, 0xffffffffffffffff);
    let (x63, x64) = fiat_p384_scalar_subborrowx_u64(x62, x51, 0xffffffffffffffff);
    let (x65, x66) = fiat_p384_scalar_subborrowx_u64(x64, (x52 as u64), 0x0_u64);
    let x67: u64 = (arg4[5]);
    let x68: u64 = (arg4[4]);
    let x69: u64 = (arg4[3]);
    let x70: u64 = (arg4[2]);
    let x71: u64 = (arg4[1]);
    let x72: u64 = (arg4[0]);
    let (x73, x74) = fiat_p384_scalar_subborrowx_u64(0x0, 0x0_u64, x72);
    let (x75, x76) = fiat_p384_scalar_subborrowx_u64(x74, 0x0_u64, x71);
    let (x77, x78) = fiat_p384_scalar_subborrowx_u64(x76, 0x0_u64, x70);
    let (x79, x80) = fiat_p384_scalar_subborrowx_u64(x78, 0x0_u64, x69);
    let (x81, x82) = fiat_p384_scalar_subborrowx_u64(x80, 0x0_u64, x68);
    let (x83, x84) = fiat_p384_scalar_subborrowx_u64(x82, 0x0_u64, x67);
    let (x85) = fiat_p384_scalar_cmovznz_u64(x84, 0x0_u64, 0xffffffffffffffff);
    let (x86, x87) = fiat_p384_scalar_addcarryx_u64(0x0, x73, (x85 & 0xecec196accc52973));
    let (x88, x89) = fiat_p384_scalar_addcarryx_u64(x87, x75, (x85 & 0x581a0db248b0a77a));
    let (x90, x91) = fiat_p384_scalar_addcarryx_u64(x89, x77, (x85 & 0xc7634d81f4372ddf));
    let (x92, x93) = fiat_p384_scalar_addcarryx_u64(x91, x79, x85);
    let (x94, x95) = fiat_p384_scalar_addcarryx_u64(x93, x81, x85);
    let (x96, x97) = fiat_p384_scalar_addcarryx_u64(x95, x83, x85);
    let (x98) = fiat_p384_scalar_cmovznz_u64(x3, (arg5[0]), x86);
    let (x99) = fiat_p384_scalar_cmovznz_u64(x3, (arg5[1]), x88);
    let (x100) = fiat_p384_scalar_cmovznz_u64(x3, (arg5[2]), x90);
    let (x101) = fiat_p384_scalar_cmovznz_u64(x3, (arg5[3]), x92);
    let (x102) = fiat_p384_scalar_cmovznz_u64(x3, (arg5[4]), x94);
    let (x103) = fiat_p384_scalar_cmovznz_u64(x3, (arg5[5]), x96);
    let x104: fiat_p384_scalar_u1 = ((x28 & 0x1_u64) as fiat_p384_scalar_u1);
    let (x105) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x7);
    let (x106) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x8);
    let (x107) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x9);
    let (x108) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x10);
    let (x109) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x11);
    let (x110) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x12);
    let (x111) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x13);
    let (x112, x113) = fiat_p384_scalar_addcarryx_u64(0x0, x28, x105);
    let (x114, x115) = fiat_p384_scalar_addcarryx_u64(x113, x29, x106);
    let (x116, x117) = fiat_p384_scalar_addcarryx_u64(x115, x30, x107);
    let (x118, x119) = fiat_p384_scalar_addcarryx_u64(x117, x31, x108);
    let (x120, x121) = fiat_p384_scalar_addcarryx_u64(x119, x32, x109);
    let (x122, x123) = fiat_p384_scalar_addcarryx_u64(x121, x33, x110);
    let (x124, x125) = fiat_p384_scalar_addcarryx_u64(x123, x34, x111);
    let (x126) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x35);
    let (x127) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x36);
    let (x128) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x37);
    let (x129) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x38);
    let (x130) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x39);
    let (x131) = fiat_p384_scalar_cmovznz_u64(x104, 0x0_u64, x40);
    let (x132, x133) = fiat_p384_scalar_addcarryx_u64(0x0, x98, x126);
    let (x134, x135) = fiat_p384_scalar_addcarryx_u64(x133, x99, x127);
    let (x136, x137) = fiat_p384_scalar_addcarryx_u64(x135, x100, x128);
    let (x138, x139) = fiat_p384_scalar_addcarryx_u64(x137, x101, x129);
    let (x140, x141) = fiat_p384_scalar_addcarryx_u64(x139, x102, x130);
    let (x142, x143) = fiat_p384_scalar_addcarryx_u64(x141, x103, x131);
    let (x144, x145) = fiat_p384_scalar_subborrowx_u64(0x0, x132, 0xecec196accc52973);
    let (x146, x147) = fiat_p384_scalar_subborrowx_u64(x145, x134, 0x581a0db248b0a77a);
    let (x148, x149) = fiat_p384_scalar_subborrowx_u64(x147, x136, 0xc7634d81f4372ddf);
    let (x150, x151) = fiat_p384_scalar_subborrowx_u64(x149, x138, 0xffffffffffffffff);
    let (x152, x153) = fiat_p384_scalar_subborrowx_u64(x151, x140, 0xffffffffffffffff);
    let (x154, x155) = fiat_p384_scalar_subborrowx_u64(x153, x142, 0xffffffffffffffff);
    let (x156, x157) = fiat_p384_scalar_subborrowx_u64(x155, (x143 as u64), 0x0_u64);
    let (x158, x159) = fiat_p384_scalar_addcarryx_u64(0x0, x6, 0x1_u64);
    let x160: u64 = ((x112 >> 1) | ((x114 << 63) & 0xffffffffffffffff));
    let x161: u64 = ((x114 >> 1) | ((x116 << 63) & 0xffffffffffffffff));
    let x162: u64 = ((x116 >> 1) | ((x118 << 63) & 0xffffffffffffffff));
    let x163: u64 = ((x118 >> 1) | ((x120 << 63) & 0xffffffffffffffff));
    let x164: u64 = ((x120 >> 1) | ((x122 << 63) & 0xffffffffffffffff));
    let x165: u64 = ((x122 >> 1) | ((x124 << 63) & 0xffffffffffffffff));
    let x166: u64 = ((x124 & 0x8000000000000000) | (x124 >> 1));
    let (x167) = fiat_p384_scalar_cmovznz_u64(x66, x53, x41);
    let (x168) = fiat_p384_scalar_cmovznz_u64(x66, x55, x43);
    let (x169) = fiat_p384_scalar_cmovznz_u64(x66, x57, x45);
    let (x170) = fiat_p384_scalar_cmovznz_u64(x66, x59, x47);
    let (x171) = fiat_p384_scalar_cmovznz_u64(x66, x61, x49);
    let (x172) = fiat_p384_scalar_cmovznz_u64(x66, x63, x51);
    let (x173) = fiat_p384_scalar_cmovznz_u64(x157, x144, x132);
    let (x174) = fiat_p384_scalar_cmovznz_u64(x157, x146, x134);
    let (x175) = fiat_p384_scalar_cmovznz_u64(x157, x148, x136);
    let (x176) = fiat_p384_scalar_cmovznz_u64(x157, x150, x138);
    let (x177) = fiat_p384_scalar_cmovznz_u64(x157, x152, x140);
    let (x178) = fiat_p384_scalar_cmovznz_u64(x157, x154, x142);
    out1 = x158;
    out2[0] = x7;
    out2[1] = x8;
    out2[2] = x9;
    out2[3] = x10;
    out2[4] = x11;
    out2[5] = x12;
    out2[6] = x13;
    out3[0] = x160;
    out3[1] = x161;
    out3[2] = x162;
    out3[3] = x163;
    out3[4] = x164;
    out3[5] = x165;
    out3[6] = x166;
    out4[0] = x167;
    out4[1] = x168;
    out4[2] = x169;
    out4[3] = x170;
    out4[4] = x171;
    out4[5] = x172;
    out5[0] = x173;
    out5[1] = x174;
    out5[2] = x175;
    out5[3] = x176;
    out5[4] = x177;
    out5[5] = x178;
    (out1, out2, out3, out4, out5)
}
