//! Test vectors for the bignp256 group.

use hex_literal::hex;

/// Repeated addition of the generator.
///
/// These are the first 20 test vectors, generated by sagemath snippet.
pub const ADD_TEST_VECTORS: &[([u8; 32], [u8; 32])] = &[
    // k = 1,..,20, p += G
    (
        hex!("0000000000000000000000000000000000000000000000000000000000000000"),
        hex!("6BF7FC3CFB16D69F5CE4C9A351D6835D78913966C408F6521E29CF1804516A93"),
    ),
    (
        hex!("2D8419E3D905D21E3611261DADC95BB35583090C2CADD0C807F53BB3828F0995"),
        hex!("E62690D81BDC754EFAF5B2770054564849621E8A933A7ECD6C02387649CF258A"),
    ),
    (
        hex!("37C58ED5CDF4EFFB78272CF0662E92F5E012060C2B1C234BCC9D10854989824E"),
        hex!("FD9BC9B3DACB85B94160E112D35F312702C169757A1E7AE3F0EF177B32283E84"),
    ),
    (
        hex!("A9D6F12F1D785C67F9B4D24B79910E5E73CCB26A1D2F8399CDD386FEF301E913"),
        hex!("EEDD42E79372C116A1312E079707ED43AECCD0E92EED529B6DDC7532B8436DE5"),
    ),
    (
        hex!("5EA08F541F6EF3C7B1F27749009FFFBBCC73111F11120D3E1B6E9C7A3612F746"),
        hex!("D1AAABE31BD369F378F8A0BC9D70EEBEC7825976283D482130239EECC4F3A751"),
    ),
    (
        hex!("A0FB2B18D0D8EC130266C201FD8E183AEE98BF9572BE4DC0C8EBDF11AD0042CC"),
        hex!("271CCC56A71BAC6BCE3967AD0F4D55AA04064BC8A9A10B78F3B37B543800891B"),
    ),
    (
        hex!("0BBBCD4AA459206972B08AF9C2347B54B9B644F2255F6C4B65F739A8255F9844"),
        hex!("BB717EE3A1ADC18B42F39F89AB9AEC0230CF648505069A267686DBF5339135EC"),
    ),
    (
        hex!("D2DDA2788DDE65AA2C69A2C0385B83FD1E71C5F4597473A4EB882152DF36A2F2"),
        hex!("22E0DD3784B2F9CCB8A0B6BE1BC346C5B43B483BE921514A9C144CA1A16AB769"),
    ),
    (
        hex!("79F11C784808A342FE222B63C88569133F277364F8FF99C9F8471B9FF356C80E"),
        hex!("505D4B3F56A5DA430C1CB5F96D48BCD21949B9E50148D7D1D64833AE8E8D516B"),
    ),
    (
        hex!("BE4F901ABEB39DC3296E2F7E0280161C73233FCDEFDDF4AA8F4FF06609BE626E"),
        hex!("1F07AC58BBBFA32FAF018B57C1ABF695EB1D94D68238B8AAE5C64C6309010C6C"),
    ),
    (
        hex!("114A842FCC2FA6134609628A1134BAE6E66E7A55B68DDEBC228A0EA683053728"),
        hex!("92A593D312418AB18A477BE0FFBC3E57D90B7B9F926BA341FDC820B760D77C1B"),
    ),
    (
        hex!("7D977BA61750C5FF7268EF42BB61F82CAB5C29C2A66F3125431E849B7F3CCC92"),
        hex!("DE12ABD5AE3D05C3029FF5D67FBE8B4DC1F265D0F2621B1856DD87DA21863E53"),
    ),
    (
        hex!("30C22C4C43480DBAB81DDDAF0A7314902B4C78E1B8049B2D460CDB49A89D4719"),
        hex!("6C2823BE77CC67A9DA30128AB9D3C6EC4442CC74FFB6AC1133AAC6D571A36BBC"),
    ),
    (
        hex!("0856EC054262EFFE7447882B6091B84EDD50275D3A28DF889E58B3DEA362D93E"),
        hex!("1E1FE5B1743973ECCC10AF281E2BF4E67286AA3392834035DDC2D8B067C958E5"),
    ),
    (
        hex!("848DB896BBC34C7646A20FF90B236A09751E87859DBE869A2162E86EB173B694"),
        hex!("7B878E51A85222552159249A5775A49C4795601F778E0951184872459DF41E52"),
    ),
    (
        hex!("34CABA51C517420709A74B25375D1AE0118658ED207BE486420923513D48A3C9"),
        hex!("2E1B6EA8F878EF9EE211E2BCA4154EF5921106BC627DC51C86325F3584B6DB15"),
    ),
    (
        hex!("4E73E64716ADB633867A67557BBEC25DB2DA57B04470BE05342C527A12B60812"),
        hex!("3FED9A288B2CFD04B442EE7619963A2B76CBB778D1F9BC412DB0097A9CE19182"),
    ),
    (
        hex!("F0C2838004F0269626E33D73A102AB60BBED4DEA53BB8C0EDC30D97498DFF2F8"),
        hex!("4503E16CF013FAE5E9F4BDF4862F74528A8DE7CF829E6D9B39D48AB93548E60C"),
    ),
    (
        hex!("F5E8FE87AB33E6B544A960101F8BED5F24A718FD98997E36E7F4FDD375EEE70B"),
        hex!("FDCFDCE29FB9CDC89134A46E85A30DF8A599A94E8B54BEA3B75AB5C1714B91BD"),
    ),
    (
        hex!("1230402EBB4A981C19506708F779C265D1695DF2132F17099D0E54BA1C46D945"),
        hex!("FBB7A79A4E5F631E1FD59501F221FA2FAE93F8E2CD7D4D87E1003324C327EEB7"),
    ),
];

// Snippet for generation:
// p = 2**256 - 189
// a = 2**256 - 192
// b = 0x77CE6C1515F3A8EDD2C13AABE4D8FBBE4CF55069978B9253B22E7D6BD69C03F1
// Gx = 0
// Gy = 0x6BF7FC3CFB16D69F5CE4C9A351D6835D78913966C408F6521E29CF1804516A93
// h = 1
//
// # Create the finite field and the elliptic curve
// F = GF(p)
// E = EllipticCurve(F, [a, b])
//
// # Define the base point
// G = E(Gx, Gy)
// n = G.order()
//
// # Generate test vectors
// def generate_mul_test_vectors(num_vectors):
//     vectors = []
//     for _ in range(num_vectors):
//         k = ZZ.random_element(1, n)
//         P = k * G
//         vectors.append((k, P))
//     return vectors
//
// # Number of test vectors to generate
// num_vectors = 20
// test_vectors = generate_mul_test_vectors(num_vectors)
//
// # Print the test vectors in the required format
// for k, P in test_vectors:
//     k_hex = f"{k:064X}"
//     Px_hex = f"{int(P[0]):064X}"
//     Py_hex = f"{int(P[1]):064X}"
//     print(f'    (')
//     print(f'        hex!("{k_hex}"),')
//     print(f'        hex!("{Px_hex}"),')
//     print(f'        hex!("{Py_hex}"),')
//     print(f'    ),')

/// Scalar multiplication with the generator.
///
/// These are the test vectors from sagemath snippet,that are not part of [`ADD_TEST_VECTORS`].
/// k values is generated randomly
pub const MUL_TEST_VECTORS: &[([u8; 32], [u8; 32], [u8; 32])] = &[
    (
        hex!("CED4907163D8C2250299A2FE6A9D4F8A676501B90D570D50999B9E17FD993DE6"),
        hex!("7F494925F5EEA6252467D1F97951A3E00ABE75D5DC2E9837BEA227DA4FE93F32"),
        hex!("7608EB9FF53DB721B99009B60058CD72BD8A1E8CFFDA35154B3B487C0330B6A3"),
    ),
    (
        hex!("8F70C9391D8143F5A0CC3F56D3132868DE940F01EF55293E61054A0DCDA13C6C"),
        hex!("96F6FB31F578A3C70402655B4E18FBA6ED82052AE38465D54EF3B392EEB599DB"),
        hex!("36989A75343AB812BC7EBE61DBBC8433BEF72E994BEFF339F82E9B2FC908977E"),
    ),
    (
        hex!("4978C521DD195389ABC5B9C762482FCF1EAD50BF87E1209C744E50AE71596936"),
        hex!("85DF197A07D0D83B5FDF0021E2494451FFB66127E7CA3645512AAD9DBF86715A"),
        hex!("C5F6A22BE1583E65A6A1F4CB0309F8FFDD5C0B757FAB111D05AA40DE05D5F724"),
    ),
    (
        hex!("5803E676B9ACA28E76B8F41E8E06DE3063964DF566BC36677A9B02383ABB652C"),
        hex!("B6DC581C5BBE45D94670577696E3C260C401AF2F16D53E9886EE68993CE4A68B"),
        hex!("B851D966A2C9DC5EB9CB51893BBC68356E25D70DDEC59A777E85726651114382"),
    ),
    (
        hex!("33486286DC0682170C1864E85A38519127246F677AAF74124C2363E223E68E50"),
        hex!("11106D2AEF58FAA4894185A37F84F8EB01B5173EB9D97EC9A2B59C89654A963B"),
        hex!("9F9790B9AD5CCE7B491831F8D8B34C5957716351D46BBBB644C5E04899389459"),
    ),
    (
        hex!("FAD252070188E443F0C030E7C7ECA079851AA45EC38EA5591205A92BF72E7A8A"),
        hex!("4F34B166D0F6E21398FDADDF90BD92A9466D5DC84807D12F0B26F63E6A6A6199"),
        hex!("1B34BD337D078D6E3F0B1757C1EABD6E20C05903B146E307FC103E4C9D98AE86"),
    ),
    (
        hex!("6766501368501B7AECB273B176A1CB1734D10D8D680FA0DFDDD1AC655B9B1B1E"),
        hex!("9F767B0EA1289232BC18599F54E3EFD3566BBC2F871A5277F8AFD8FAA4676191"),
        hex!("A8F7B696569B7936C29C46087AC8DB0D22E4B0A98DA2A2E79073304341147EA8"),
    ),
    (
        hex!("BDE9C057B02F2A875920A93EA7E90E0ACFCFA61B725FF4273AC6EBF8F86D26C1"),
        hex!("5C707BAD698506E2C8596B88F8D9E438A3CEEB0C513D95F171152522CD6F6BBB"),
        hex!("AD37F0B3114D548DFE61AF0D2D20A17CF46F5FFA3E42624F0CC49A095AEF0327"),
    ),
    (
        hex!("D818D5F9167D7015E615FA914B43E926113D91F83B430E382337F9D3FE89DB44"),
        hex!("331C4AEC55CFFBB0F4864532C5B21E5017A093A3848ADD18558D8B1706198E37"),
        hex!("C4F73684630EA2800C5587AA6B5BAA6ECDB364DAA342D00E88BD79D73BF0DF42"),
    ),
    (
        hex!("C3550F59124BDE3BE6BEC2591D694E2528ED1410678B286DE6F626BF88FE5027"),
        hex!("9029C4C081273D5708952B6F36428D16F3E0935F79187FE6992C4B494DC114A5"),
        hex!("5F47621BCEE3C63EB7EF6C7E1B1301BF951928D43F91089CD48DF7B058285291"),
    ),
    (
        hex!("09A2AF8364E9C20C12CD68ADF99C77CFE016D602B29E702AF83233E980DCE1F4"),
        hex!("C6BA1BB73E92B552D58A7585F4CBC911E05239EBFFED6681AB56C366873A204E"),
        hex!("25B15BF7B8D3BE06249ACD3CBF928B79E21542FDABB2F3196D8A0561445A632A"),
    ),
    (
        hex!("DBC71EB3CEAB0EBE1E4DFC804EF0B64866720EB440A5D09FA017CBC399F62AF2"),
        hex!("347262446EDF9B71B20CE9FB73CD8211959E8C5D0AC84B1FF3A3A139CA058567"),
        hex!("9688F4CF75D5B8956DEABDBB420EFCB51B9F0727068B4A6D852B902B135F0A7B"),
    ),
    (
        hex!("E868A23B0DA36443B119E863657D918FB2783C03191838B67D0D704747AFE887"),
        hex!("43694CB57D57CF1F8B4145577888AB9A33E45778A2CAFC078A529991269A4BEE"),
        hex!("6686270715CC7F94C433A4DFC8036D6C3DA4384597AEA7E4DD5685034ACACB49"),
    ),
    (
        hex!("16763333BC3B7CDE3C19370CC0CECEDE456DF4F4CB1BE13F9BD4E3BCE2BC8F00"),
        hex!("711AC9EB8D78CAA22CDBC82C8E777D686F22DC6AE236BC90E0A598AF8F720FA7"),
        hex!("72E338F8D83E1D17A5E5A55D9D26539CFD4EEFC501FDCA6DEF36B8726FF1E85D"),
    ),
    (
        hex!("47CD1553152E9D5194FCC4BBBD32E98F046A063D64B506E1CE01FF79DA7693E0"),
        hex!("F34C6657ACF2C1FE67036FA836C82BFBFEBCDF93D22E346CC9049F24B8C512C3"),
        hex!("B394717C5C37D5A08128588D5922F0798D479D4B900BC29D74EC0C76EB8622EC"),
    ),
    (
        hex!("09307AFD97C5D3854F3D513B8BA6AE4FE246C46F4A3DFA746492BB4D948E4850"),
        hex!("C91132EB3ACC4FA84FC8DF11A14FE24C828947F8299696A027E49B57BA5E6F5A"),
        hex!("BA5BB5DB0F6B5FFC95FCD27F9267D5004FD79539BB3C6345E4C5E5CFDF89A5B6"),
    ),
    (
        hex!("C42B1903984390E20C403560927832D02BE36B1C7EE33F1987C5241CAB8A0F63"),
        hex!("D218ADD38586BD8531F45ACDFDBE8B45D5489A1CCCC8C7AA005A65B07937C96F"),
        hex!("DDC12E336442E1C7BD369CDF020E7F91C9B367178C212C331A15C9E012355658"),
    ),
    (
        hex!("F368D42DD35F918D4694AED51097784DE1B8F1CD204789B4E018DD36135F0CB4"),
        hex!("D62675D5E732555270D6427F3C91319B0FC659F88CE45BDFB88C25B77F4BC2BA"),
        hex!("C4F6ABADC81431C99E4E710F5AECFDE0B7AF4AC95DFB1635692B91EA85F4CBAF"),
    ),
    (
        hex!("B6E9E1F518C801082FCC37B8573A0D4C5E49E65EE7E7577082F024C8A6A3C798"),
        hex!("6D682C005148718B620D0C169C324C3B407BC6F1125B7623694ED7704E888832"),
        hex!("0D8C0BB56FBD8174C916955580D27D40F220E27F4C514999EB3D3ADFAAC1C52E"),
    ),
    (
        hex!("B352F9B096B909607E52853CF78FBAC0F106917BD705645AF3DB53E4CAC1868D"),
        hex!("F8596F4A17518F117120018C537E59AA2AEB66817DC9EEA6EC1E5AABC1A4AB77"),
        hex!("DDD08D4CA61ED8B7F3F06403134CF0309ECABCD611024CF7C77BE3D8CF8E3610"),
    ),
];
