//! Pseudo 32-bit backend: the actual 32-bit `word-by-word-montgomery` backend generated by
//! `fiat-crypto` is impractically large at ~22.5 KLOCs.
//!
//! `rustc` is unable to even compile it without `--release`, failing to complete after several
//! minutes where a release build takes seconds.
//!
//! Instead, so P-521 can impl the same code shape as other crates, this module impls some wrappers
//! which make it possible to use the 64-bit backend with a `Uint` containing `u32` limbs.

#![allow(non_camel_case_types)]

// Pull in the 64-bit implementation so we can invoke it
#[path = "p521_scalar_64.rs"]
mod p521_scalar_64;

/** The type fiat_p521_scalar_montgomery_domain_field_element is a field element in the Montgomery domain. */
/** Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]] */
#[derive(Clone, Copy)]
pub struct fiat_p521_scalar_montgomery_domain_field_element(pub [u32; 17]);

/** The type fiat_p521_scalar_non_montgomery_domain_field_element is a field element NOT in the Montgomery domain. */
/** Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]] */
#[derive(Clone, Copy)]
pub struct fiat_p521_scalar_non_montgomery_domain_field_element(pub [u32; 17]);

/// Convert 64-bit scalar to 32-bit.
#[inline]
const fn scalar64_to_32(
    fe32: &p521_scalar_64::fiat_p521_scalar_montgomery_domain_field_element,
) -> fiat_p521_scalar_montgomery_domain_field_element {
    fiat_p521_scalar_montgomery_domain_field_element(u64x9_to_u32x17(&fe32.0))
}

/// Convert 32-bit scalar to 64-bit.
#[inline]
const fn scalar32_to_64(
    fe32: &fiat_p521_scalar_montgomery_domain_field_element,
) -> p521_scalar_64::fiat_p521_scalar_montgomery_domain_field_element {
    p521_scalar_64::fiat_p521_scalar_montgomery_domain_field_element(u32x17_to_u64x9(&fe32.0))
}

const FE64_ZERO: p521_scalar_64::fiat_p521_scalar_montgomery_domain_field_element =
    p521_scalar_64::fiat_p521_scalar_montgomery_domain_field_element([0; 9]);

/// Write a shim for calling into a 64-bit implementation of a function which takes one operand
/// (i.e. arity 1).
macro_rules! shim64_unary_op {
    ($func:tt) => {
        #[inline]
        pub const fn $func(
            out: &mut fiat_p521_scalar_montgomery_domain_field_element,
            arg1: &fiat_p521_scalar_montgomery_domain_field_element,
        ) {
            let mut out64 = FE64_ZERO;
            p521_scalar_64::$func(&mut out64, &scalar32_to_64(arg1));
            *out = scalar64_to_32(&out64);
        }
    };
}

/// Write a shim for calling into a 64-bit implementation of a function which takes two operands
/// (i.e. arity 2).
macro_rules! shim64_binary_op {
    ($func:tt) => {
        #[inline]
        pub const fn $func(
            out: &mut fiat_p521_scalar_montgomery_domain_field_element,
            arg1: &fiat_p521_scalar_montgomery_domain_field_element,
            arg2: &fiat_p521_scalar_montgomery_domain_field_element,
        ) {
            let mut out64 = FE64_ZERO;
            p521_scalar_64::$func(&mut out64, &scalar32_to_64(arg1), &scalar32_to_64(arg2));
            *out = scalar64_to_32(&out64);
        }
    };
}

shim64_unary_op!(fiat_p521_scalar_opp);
shim64_unary_op!(fiat_p521_scalar_square);
shim64_binary_op!(fiat_p521_scalar_add);
shim64_binary_op!(fiat_p521_scalar_sub);
shim64_binary_op!(fiat_p521_scalar_mul);

/// The function fiat_p521_scalar_from_montgomery translates a field element out of the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^17) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p521_scalar_from_montgomery(
    out: &mut fiat_p521_scalar_non_montgomery_domain_field_element,
    arg1: &fiat_p521_scalar_montgomery_domain_field_element,
) {
    let mut out64 = p521_scalar_64::fiat_p521_scalar_non_montgomery_domain_field_element([0; 9]);
    p521_scalar_64::fiat_p521_scalar_from_montgomery(
        &mut out64,
        &p521_scalar_64::fiat_p521_scalar_montgomery_domain_field_element(u32x17_to_u64x9(&arg1.0)),
    );
    *out = fiat_p521_scalar_non_montgomery_domain_field_element(u64x9_to_u32x17(&out64.0));
}

/// The function fiat_p521_scalar_to_montgomery translates a field element into the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = eval arg1 mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p521_scalar_to_montgomery(
    out: &mut fiat_p521_scalar_montgomery_domain_field_element,
    arg1: &fiat_p521_scalar_non_montgomery_domain_field_element,
) {
    let mut out64 = FE64_ZERO;
    p521_scalar_64::fiat_p521_scalar_to_montgomery(
        &mut out64,
        &p521_scalar_64::fiat_p521_scalar_non_montgomery_domain_field_element(u32x17_to_u64x9(
            &arg1.0,
        )),
    );
    *out = fiat_p521_scalar_montgomery_domain_field_element(u64x9_to_u32x17(&out64.0));
}

/// The function fiat_p521_scalar_selectznz is a multi-limb conditional select.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub const fn fiat_p521_scalar_selectznz(
    out: &mut [u32; 17],
    arg1: u8,
    arg2: &[u32; 17],
    arg3: &[u32; 17],
) {
    let mut out64 = [0u64; 9];
    p521_scalar_64::fiat_p521_scalar_selectznz(
        &mut out64,
        arg1,
        &u32x17_to_u64x9(arg2),
        &u32x17_to_u64x9(arg3),
    );
    *out = u64x9_to_u32x17(&out64);
}

/// The function fiat_p521_scalar_msat returns the saturated representation of the prime modulus.
///
/// Postconditions:
///   twos_complement_eval out1 = m
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub const fn fiat_p521_scalar_msat(out: &mut [u32; 18]) {
    out[0] = 0x91386409;
    out[1] = 0xbb6fb71e;
    out[2] = 0x899c47ae;
    out[3] = 0x3bb5c9b8;
    out[4] = 0xf709a5d0;
    out[5] = 0x7fcc0148;
    out[6] = 0xbf2f966b;
    out[7] = 0x51868783;
    out[8] = 0xfffffffa;
    out[9] = 0xffffffff;
    out[10] = 0xffffffff;
    out[11] = 0xffffffff;
    out[12] = 0xffffffff;
    out[13] = 0xffffffff;
    out[14] = 0xffffffff;
    out[15] = 0xffffffff;
    out[16] = 0x1ff;
    out[17] = 0x0;
}

/// The function fiat_p521_scalar_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
///
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub const fn fiat_p521_scalar_divstep_precomp(out: &mut [u32; 17]) {
    out[0] = 0x9659cabd;
    out[1] = 0xd2e6b274;
    out[2] = 0x876caf82;
    out[3] = 0x5e78ce74;
    out[4] = 0x3063b3db;
    out[5] = 0x3849b3f;
    out[6] = 0xf19b8870;
    out[7] = 0x864c68eb;
    out[8] = 0x16248708;
    out[9] = 0xedbce602;
    out[10] = 0xb7f07b8e;
    out[11] = 0x721f63bc;
    out[12] = 0x62da93cf;
    out[13] = 0x6c4f0d20;
    out[14] = 0xafd209c1;
    out[15] = 0x6f329bc7;
    out[16] = 0x151;
}

/// The function fiat_p521_scalar_divstep computes a divstep.
///
/// Preconditions:
///   0 ≤ eval arg4 < m
///   0 ≤ eval arg5 < m
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
///   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
///   0 ≤ eval out5 < m
///   0 ≤ eval out5 < m
///   0 ≤ eval out2 < m
///   0 ≤ eval out3 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// TODO(tarcieri): invoke 64-bit implementation
#[inline]
pub const fn fiat_p521_scalar_divstep(
    out1: &mut u32,
    out2: &mut [u32; 18],
    out3: &mut [u32; 18],
    out4: &mut [u32; 17],
    out5: &mut [u32; 17],
    arg1: u32,
    arg2: &[u32; 18],
    arg3: &[u32; 18],
    arg4: &[u32; 17],
    arg5: &[u32; 17],
) {
    let mut x1: u32 = 0;
    let mut x2: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x1, &mut x2, 0x0, !arg1, 0x1 as u32);
    let x3: fiat_p521_scalar_u1 =
        ((x1 >> 31) as fiat_p521_scalar_u1) & ((arg3[0] & (0x1 as u32)) as fiat_p521_scalar_u1);
    let mut x4: u32 = 0;
    let mut x5: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x4, &mut x5, 0x0, !arg1, 0x1 as u32);
    let mut x6: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x6, x3, arg1, x4);
    let mut x7: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x7, x3, arg2[0], arg3[0]);
    let mut x8: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x8, x3, arg2[1], arg3[1]);
    let mut x9: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x9, x3, arg2[2], arg3[2]);
    let mut x10: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x10, x3, arg2[3], arg3[3]);
    let mut x11: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x11, x3, arg2[4], arg3[4]);
    let mut x12: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x12, x3, arg2[5], arg3[5]);
    let mut x13: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x13, x3, arg2[6], arg3[6]);
    let mut x14: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x14, x3, arg2[7], arg3[7]);
    let mut x15: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x15, x3, arg2[8], arg3[8]);
    let mut x16: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x16, x3, arg2[9], arg3[9]);
    let mut x17: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x17, x3, arg2[10], arg3[10]);
    let mut x18: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x18, x3, arg2[11], arg3[11]);
    let mut x19: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x19, x3, arg2[12], arg3[12]);
    let mut x20: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x20, x3, arg2[13], arg3[13]);
    let mut x21: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x21, x3, arg2[14], arg3[14]);
    let mut x22: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x22, x3, arg2[15], arg3[15]);
    let mut x23: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x23, x3, arg2[16], arg3[16]);
    let mut x24: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x24, x3, arg2[17], arg3[17]);
    let mut x25: u32 = 0;
    let mut x26: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x25, &mut x26, 0x0, 0x1 as u32, !arg2[0]);
    let mut x27: u32 = 0;
    let mut x28: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x27, &mut x28, x26, 0x0 as u32, !arg2[1]);
    let mut x29: u32 = 0;
    let mut x30: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x29, &mut x30, x28, 0x0 as u32, !arg2[2]);
    let mut x31: u32 = 0;
    let mut x32: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x31, &mut x32, x30, 0x0 as u32, !arg2[3]);
    let mut x33: u32 = 0;
    let mut x34: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x33, &mut x34, x32, 0x0 as u32, !arg2[4]);
    let mut x35: u32 = 0;
    let mut x36: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x35, &mut x36, x34, 0x0 as u32, !arg2[5]);
    let mut x37: u32 = 0;
    let mut x38: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x37, &mut x38, x36, 0x0 as u32, !arg2[6]);
    let mut x39: u32 = 0;
    let mut x40: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x39, &mut x40, x38, 0x0 as u32, !arg2[7]);
    let mut x41: u32 = 0;
    let mut x42: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x41, &mut x42, x40, 0x0 as u32, !arg2[8]);
    let mut x43: u32 = 0;
    let mut x44: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x43, &mut x44, x42, 0x0 as u32, !arg2[9]);
    let mut x45: u32 = 0;
    let mut x46: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x45, &mut x46, x44, 0x0 as u32, !arg2[10]);
    let mut x47: u32 = 0;
    let mut x48: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x47, &mut x48, x46, 0x0 as u32, !arg2[11]);
    let mut x49: u32 = 0;
    let mut x50: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x49, &mut x50, x48, 0x0 as u32, !arg2[12]);
    let mut x51: u32 = 0;
    let mut x52: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x51, &mut x52, x50, 0x0 as u32, !arg2[13]);
    let mut x53: u32 = 0;
    let mut x54: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x53, &mut x54, x52, 0x0 as u32, !arg2[14]);
    let mut x55: u32 = 0;
    let mut x56: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x55, &mut x56, x54, 0x0 as u32, !arg2[15]);
    let mut x57: u32 = 0;
    let mut x58: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x57, &mut x58, x56, 0x0 as u32, !arg2[16]);
    let mut x59: u32 = 0;
    let mut x60: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x59, &mut x60, x58, 0x0 as u32, !arg2[17]);
    let mut x61: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x61, x3, arg3[0], x25);
    let mut x62: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x62, x3, arg3[1], x27);
    let mut x63: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x63, x3, arg3[2], x29);
    let mut x64: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x64, x3, arg3[3], x31);
    let mut x65: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x65, x3, arg3[4], x33);
    let mut x66: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x66, x3, arg3[5], x35);
    let mut x67: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x67, x3, arg3[6], x37);
    let mut x68: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x68, x3, arg3[7], x39);
    let mut x69: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x69, x3, arg3[8], x41);
    let mut x70: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x70, x3, arg3[9], x43);
    let mut x71: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x71, x3, arg3[10], x45);
    let mut x72: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x72, x3, arg3[11], x47);
    let mut x73: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x73, x3, arg3[12], x49);
    let mut x74: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x74, x3, arg3[13], x51);
    let mut x75: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x75, x3, arg3[14], x53);
    let mut x76: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x76, x3, arg3[15], x55);
    let mut x77: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x77, x3, arg3[16], x57);
    let mut x78: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x78, x3, arg3[17], x59);
    let mut x79: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x79, x3, arg4[0], arg5[0]);
    let mut x80: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x80, x3, arg4[1], arg5[1]);
    let mut x81: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x81, x3, arg4[2], arg5[2]);
    let mut x82: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x82, x3, arg4[3], arg5[3]);
    let mut x83: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x83, x3, arg4[4], arg5[4]);
    let mut x84: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x84, x3, arg4[5], arg5[5]);
    let mut x85: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x85, x3, arg4[6], arg5[6]);
    let mut x86: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x86, x3, arg4[7], arg5[7]);
    let mut x87: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x87, x3, arg4[8], arg5[8]);
    let mut x88: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x88, x3, arg4[9], arg5[9]);
    let mut x89: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x89, x3, arg4[10], arg5[10]);
    let mut x90: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x90, x3, arg4[11], arg5[11]);
    let mut x91: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x91, x3, arg4[12], arg5[12]);
    let mut x92: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x92, x3, arg4[13], arg5[13]);
    let mut x93: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x93, x3, arg4[14], arg5[14]);
    let mut x94: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x94, x3, arg4[15], arg5[15]);
    let mut x95: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x95, x3, arg4[16], arg5[16]);
    let mut x96: u32 = 0;
    let mut x97: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x96, &mut x97, 0x0, x79, x79);
    let mut x98: u32 = 0;
    let mut x99: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x98, &mut x99, x97, x80, x80);
    let mut x100: u32 = 0;
    let mut x101: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x100, &mut x101, x99, x81, x81);
    let mut x102: u32 = 0;
    let mut x103: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x102, &mut x103, x101, x82, x82);
    let mut x104: u32 = 0;
    let mut x105: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x104, &mut x105, x103, x83, x83);
    let mut x106: u32 = 0;
    let mut x107: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x106, &mut x107, x105, x84, x84);
    let mut x108: u32 = 0;
    let mut x109: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x108, &mut x109, x107, x85, x85);
    let mut x110: u32 = 0;
    let mut x111: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x110, &mut x111, x109, x86, x86);
    let mut x112: u32 = 0;
    let mut x113: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x112, &mut x113, x111, x87, x87);
    let mut x114: u32 = 0;
    let mut x115: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x114, &mut x115, x113, x88, x88);
    let mut x116: u32 = 0;
    let mut x117: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x116, &mut x117, x115, x89, x89);
    let mut x118: u32 = 0;
    let mut x119: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x118, &mut x119, x117, x90, x90);
    let mut x120: u32 = 0;
    let mut x121: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x120, &mut x121, x119, x91, x91);
    let mut x122: u32 = 0;
    let mut x123: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x122, &mut x123, x121, x92, x92);
    let mut x124: u32 = 0;
    let mut x125: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x124, &mut x125, x123, x93, x93);
    let mut x126: u32 = 0;
    let mut x127: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x126, &mut x127, x125, x94, x94);
    let mut x128: u32 = 0;
    let mut x129: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x128, &mut x129, x127, x95, x95);
    let mut x130: u32 = 0;
    let mut x131: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x130, &mut x131, 0x0, x96, 0x91386409);
    let mut x132: u32 = 0;
    let mut x133: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x132, &mut x133, x131, x98, 0xbb6fb71e);
    let mut x134: u32 = 0;
    let mut x135: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x134, &mut x135, x133, x100, 0x899c47ae);
    let mut x136: u32 = 0;
    let mut x137: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x136, &mut x137, x135, x102, 0x3bb5c9b8);
    let mut x138: u32 = 0;
    let mut x139: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x138, &mut x139, x137, x104, 0xf709a5d0);
    let mut x140: u32 = 0;
    let mut x141: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x140, &mut x141, x139, x106, 0x7fcc0148);
    let mut x142: u32 = 0;
    let mut x143: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x142, &mut x143, x141, x108, 0xbf2f966b);
    let mut x144: u32 = 0;
    let mut x145: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x144, &mut x145, x143, x110, 0x51868783);
    let mut x146: u32 = 0;
    let mut x147: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x146, &mut x147, x145, x112, 0xfffffffa);
    let mut x148: u32 = 0;
    let mut x149: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x148, &mut x149, x147, x114, 0xffffffff);
    let mut x150: u32 = 0;
    let mut x151: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x150, &mut x151, x149, x116, 0xffffffff);
    let mut x152: u32 = 0;
    let mut x153: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x152, &mut x153, x151, x118, 0xffffffff);
    let mut x154: u32 = 0;
    let mut x155: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x154, &mut x155, x153, x120, 0xffffffff);
    let mut x156: u32 = 0;
    let mut x157: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x156, &mut x157, x155, x122, 0xffffffff);
    let mut x158: u32 = 0;
    let mut x159: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x158, &mut x159, x157, x124, 0xffffffff);
    let mut x160: u32 = 0;
    let mut x161: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x160, &mut x161, x159, x126, 0xffffffff);
    let mut x162: u32 = 0;
    let mut x163: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x162, &mut x163, x161, x128, 0x1ff);
    let mut x164: u32 = 0;
    let mut x165: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x164, &mut x165, x163, x129 as u32, 0x0 as u32);
    let x166: u32 = arg4[16];
    let x167: u32 = arg4[15];
    let x168: u32 = arg4[14];
    let x169: u32 = arg4[13];
    let x170: u32 = arg4[12];
    let x171: u32 = arg4[11];
    let x172: u32 = arg4[10];
    let x173: u32 = arg4[9];
    let x174: u32 = arg4[8];
    let x175: u32 = arg4[7];
    let x176: u32 = arg4[6];
    let x177: u32 = arg4[5];
    let x178: u32 = arg4[4];
    let x179: u32 = arg4[3];
    let x180: u32 = arg4[2];
    let x181: u32 = arg4[1];
    let x182: u32 = arg4[0];
    let mut x183: u32 = 0;
    let mut x184: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x183, &mut x184, 0x0, 0x0 as u32, x182);
    let mut x185: u32 = 0;
    let mut x186: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x185, &mut x186, x184, 0x0 as u32, x181);
    let mut x187: u32 = 0;
    let mut x188: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x187, &mut x188, x186, 0x0 as u32, x180);
    let mut x189: u32 = 0;
    let mut x190: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x189, &mut x190, x188, 0x0 as u32, x179);
    let mut x191: u32 = 0;
    let mut x192: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x191, &mut x192, x190, 0x0 as u32, x178);
    let mut x193: u32 = 0;
    let mut x194: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x193, &mut x194, x192, 0x0 as u32, x177);
    let mut x195: u32 = 0;
    let mut x196: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x195, &mut x196, x194, 0x0 as u32, x176);
    let mut x197: u32 = 0;
    let mut x198: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x197, &mut x198, x196, 0x0 as u32, x175);
    let mut x199: u32 = 0;
    let mut x200: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x199, &mut x200, x198, 0x0 as u32, x174);
    let mut x201: u32 = 0;
    let mut x202: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x201, &mut x202, x200, 0x0 as u32, x173);
    let mut x203: u32 = 0;
    let mut x204: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x203, &mut x204, x202, 0x0 as u32, x172);
    let mut x205: u32 = 0;
    let mut x206: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x205, &mut x206, x204, 0x0 as u32, x171);
    let mut x207: u32 = 0;
    let mut x208: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x207, &mut x208, x206, 0x0 as u32, x170);
    let mut x209: u32 = 0;
    let mut x210: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x209, &mut x210, x208, 0x0 as u32, x169);
    let mut x211: u32 = 0;
    let mut x212: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x211, &mut x212, x210, 0x0 as u32, x168);
    let mut x213: u32 = 0;
    let mut x214: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x213, &mut x214, x212, 0x0 as u32, x167);
    let mut x215: u32 = 0;
    let mut x216: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x215, &mut x216, x214, 0x0 as u32, x166);
    let mut x217: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x217, x216, 0x0 as u32, 0xffffffff);
    let mut x218: u32 = 0;
    let mut x219: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x218, &mut x219, 0x0, x183, x217 & 0x91386409);
    let mut x220: u32 = 0;
    let mut x221: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x220, &mut x221, x219, x185, x217 & 0xbb6fb71e);
    let mut x222: u32 = 0;
    let mut x223: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x222, &mut x223, x221, x187, x217 & 0x899c47ae);
    let mut x224: u32 = 0;
    let mut x225: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x224, &mut x225, x223, x189, x217 & 0x3bb5c9b8);
    let mut x226: u32 = 0;
    let mut x227: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x226, &mut x227, x225, x191, x217 & 0xf709a5d0);
    let mut x228: u32 = 0;
    let mut x229: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x228, &mut x229, x227, x193, x217 & 0x7fcc0148);
    let mut x230: u32 = 0;
    let mut x231: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x230, &mut x231, x229, x195, x217 & 0xbf2f966b);
    let mut x232: u32 = 0;
    let mut x233: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x232, &mut x233, x231, x197, x217 & 0x51868783);
    let mut x234: u32 = 0;
    let mut x235: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x234, &mut x235, x233, x199, x217 & 0xfffffffa);
    let mut x236: u32 = 0;
    let mut x237: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x236, &mut x237, x235, x201, x217);
    let mut x238: u32 = 0;
    let mut x239: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x238, &mut x239, x237, x203, x217);
    let mut x240: u32 = 0;
    let mut x241: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x240, &mut x241, x239, x205, x217);
    let mut x242: u32 = 0;
    let mut x243: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x242, &mut x243, x241, x207, x217);
    let mut x244: u32 = 0;
    let mut x245: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x244, &mut x245, x243, x209, x217);
    let mut x246: u32 = 0;
    let mut x247: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x246, &mut x247, x245, x211, x217);
    let mut x248: u32 = 0;
    let mut x249: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x248, &mut x249, x247, x213, x217);
    let mut x250: u32 = 0;
    let mut x251: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x250, &mut x251, x249, x215, x217 & 0x1ff);
    let mut x252: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x252, x3, arg5[0], x218);
    let mut x253: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x253, x3, arg5[1], x220);
    let mut x254: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x254, x3, arg5[2], x222);
    let mut x255: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x255, x3, arg5[3], x224);
    let mut x256: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x256, x3, arg5[4], x226);
    let mut x257: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x257, x3, arg5[5], x228);
    let mut x258: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x258, x3, arg5[6], x230);
    let mut x259: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x259, x3, arg5[7], x232);
    let mut x260: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x260, x3, arg5[8], x234);
    let mut x261: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x261, x3, arg5[9], x236);
    let mut x262: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x262, x3, arg5[10], x238);
    let mut x263: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x263, x3, arg5[11], x240);
    let mut x264: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x264, x3, arg5[12], x242);
    let mut x265: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x265, x3, arg5[13], x244);
    let mut x266: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x266, x3, arg5[14], x246);
    let mut x267: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x267, x3, arg5[15], x248);
    let mut x268: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x268, x3, arg5[16], x250);
    let x269: fiat_p521_scalar_u1 = (x61 & (0x1 as u32)) as fiat_p521_scalar_u1;
    let mut x270: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x270, x269, 0x0 as u32, x7);
    let mut x271: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x271, x269, 0x0 as u32, x8);
    let mut x272: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x272, x269, 0x0 as u32, x9);
    let mut x273: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x273, x269, 0x0 as u32, x10);
    let mut x274: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x274, x269, 0x0 as u32, x11);
    let mut x275: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x275, x269, 0x0 as u32, x12);
    let mut x276: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x276, x269, 0x0 as u32, x13);
    let mut x277: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x277, x269, 0x0 as u32, x14);
    let mut x278: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x278, x269, 0x0 as u32, x15);
    let mut x279: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x279, x269, 0x0 as u32, x16);
    let mut x280: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x280, x269, 0x0 as u32, x17);
    let mut x281: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x281, x269, 0x0 as u32, x18);
    let mut x282: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x282, x269, 0x0 as u32, x19);
    let mut x283: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x283, x269, 0x0 as u32, x20);
    let mut x284: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x284, x269, 0x0 as u32, x21);
    let mut x285: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x285, x269, 0x0 as u32, x22);
    let mut x286: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x286, x269, 0x0 as u32, x23);
    let mut x287: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x287, x269, 0x0 as u32, x24);
    let mut x288: u32 = 0;
    let mut x289: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x288, &mut x289, 0x0, x61, x270);
    let mut x290: u32 = 0;
    let mut x291: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x290, &mut x291, x289, x62, x271);
    let mut x292: u32 = 0;
    let mut x293: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x292, &mut x293, x291, x63, x272);
    let mut x294: u32 = 0;
    let mut x295: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x294, &mut x295, x293, x64, x273);
    let mut x296: u32 = 0;
    let mut x297: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x296, &mut x297, x295, x65, x274);
    let mut x298: u32 = 0;
    let mut x299: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x298, &mut x299, x297, x66, x275);
    let mut x300: u32 = 0;
    let mut x301: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x300, &mut x301, x299, x67, x276);
    let mut x302: u32 = 0;
    let mut x303: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x302, &mut x303, x301, x68, x277);
    let mut x304: u32 = 0;
    let mut x305: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x304, &mut x305, x303, x69, x278);
    let mut x306: u32 = 0;
    let mut x307: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x306, &mut x307, x305, x70, x279);
    let mut x308: u32 = 0;
    let mut x309: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x308, &mut x309, x307, x71, x280);
    let mut x310: u32 = 0;
    let mut x311: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x310, &mut x311, x309, x72, x281);
    let mut x312: u32 = 0;
    let mut x313: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x312, &mut x313, x311, x73, x282);
    let mut x314: u32 = 0;
    let mut x315: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x314, &mut x315, x313, x74, x283);
    let mut x316: u32 = 0;
    let mut x317: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x316, &mut x317, x315, x75, x284);
    let mut x318: u32 = 0;
    let mut x319: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x318, &mut x319, x317, x76, x285);
    let mut x320: u32 = 0;
    let mut x321: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x320, &mut x321, x319, x77, x286);
    let mut x322: u32 = 0;
    let mut x323: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x322, &mut x323, x321, x78, x287);
    let mut x324: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x324, x269, 0x0 as u32, x79);
    let mut x325: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x325, x269, 0x0 as u32, x80);
    let mut x326: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x326, x269, 0x0 as u32, x81);
    let mut x327: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x327, x269, 0x0 as u32, x82);
    let mut x328: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x328, x269, 0x0 as u32, x83);
    let mut x329: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x329, x269, 0x0 as u32, x84);
    let mut x330: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x330, x269, 0x0 as u32, x85);
    let mut x331: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x331, x269, 0x0 as u32, x86);
    let mut x332: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x332, x269, 0x0 as u32, x87);
    let mut x333: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x333, x269, 0x0 as u32, x88);
    let mut x334: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x334, x269, 0x0 as u32, x89);
    let mut x335: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x335, x269, 0x0 as u32, x90);
    let mut x336: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x336, x269, 0x0 as u32, x91);
    let mut x337: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x337, x269, 0x0 as u32, x92);
    let mut x338: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x338, x269, 0x0 as u32, x93);
    let mut x339: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x339, x269, 0x0 as u32, x94);
    let mut x340: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x340, x269, 0x0 as u32, x95);
    let mut x341: u32 = 0;
    let mut x342: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x341, &mut x342, 0x0, x252, x324);
    let mut x343: u32 = 0;
    let mut x344: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x343, &mut x344, x342, x253, x325);
    let mut x345: u32 = 0;
    let mut x346: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x345, &mut x346, x344, x254, x326);
    let mut x347: u32 = 0;
    let mut x348: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x347, &mut x348, x346, x255, x327);
    let mut x349: u32 = 0;
    let mut x350: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x349, &mut x350, x348, x256, x328);
    let mut x351: u32 = 0;
    let mut x352: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x351, &mut x352, x350, x257, x329);
    let mut x353: u32 = 0;
    let mut x354: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x353, &mut x354, x352, x258, x330);
    let mut x355: u32 = 0;
    let mut x356: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x355, &mut x356, x354, x259, x331);
    let mut x357: u32 = 0;
    let mut x358: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x357, &mut x358, x356, x260, x332);
    let mut x359: u32 = 0;
    let mut x360: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x359, &mut x360, x358, x261, x333);
    let mut x361: u32 = 0;
    let mut x362: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x361, &mut x362, x360, x262, x334);
    let mut x363: u32 = 0;
    let mut x364: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x363, &mut x364, x362, x263, x335);
    let mut x365: u32 = 0;
    let mut x366: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x365, &mut x366, x364, x264, x336);
    let mut x367: u32 = 0;
    let mut x368: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x367, &mut x368, x366, x265, x337);
    let mut x369: u32 = 0;
    let mut x370: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x369, &mut x370, x368, x266, x338);
    let mut x371: u32 = 0;
    let mut x372: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x371, &mut x372, x370, x267, x339);
    let mut x373: u32 = 0;
    let mut x374: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x373, &mut x374, x372, x268, x340);
    let mut x375: u32 = 0;
    let mut x376: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x375, &mut x376, 0x0, x341, 0x91386409);
    let mut x377: u32 = 0;
    let mut x378: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x377, &mut x378, x376, x343, 0xbb6fb71e);
    let mut x379: u32 = 0;
    let mut x380: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x379, &mut x380, x378, x345, 0x899c47ae);
    let mut x381: u32 = 0;
    let mut x382: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x381, &mut x382, x380, x347, 0x3bb5c9b8);
    let mut x383: u32 = 0;
    let mut x384: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x383, &mut x384, x382, x349, 0xf709a5d0);
    let mut x385: u32 = 0;
    let mut x386: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x385, &mut x386, x384, x351, 0x7fcc0148);
    let mut x387: u32 = 0;
    let mut x388: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x387, &mut x388, x386, x353, 0xbf2f966b);
    let mut x389: u32 = 0;
    let mut x390: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x389, &mut x390, x388, x355, 0x51868783);
    let mut x391: u32 = 0;
    let mut x392: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x391, &mut x392, x390, x357, 0xfffffffa);
    let mut x393: u32 = 0;
    let mut x394: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x393, &mut x394, x392, x359, 0xffffffff);
    let mut x395: u32 = 0;
    let mut x396: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x395, &mut x396, x394, x361, 0xffffffff);
    let mut x397: u32 = 0;
    let mut x398: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x397, &mut x398, x396, x363, 0xffffffff);
    let mut x399: u32 = 0;
    let mut x400: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x399, &mut x400, x398, x365, 0xffffffff);
    let mut x401: u32 = 0;
    let mut x402: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x401, &mut x402, x400, x367, 0xffffffff);
    let mut x403: u32 = 0;
    let mut x404: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x403, &mut x404, x402, x369, 0xffffffff);
    let mut x405: u32 = 0;
    let mut x406: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x405, &mut x406, x404, x371, 0xffffffff);
    let mut x407: u32 = 0;
    let mut x408: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x407, &mut x408, x406, x373, 0x1ff);
    let mut x409: u32 = 0;
    let mut x410: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_subborrowx_u32(&mut x409, &mut x410, x408, x374 as u32, 0x0 as u32);
    let mut x411: u32 = 0;
    let mut x412: fiat_p521_scalar_u1 = 0;
    fiat_p521_scalar_addcarryx_u32(&mut x411, &mut x412, 0x0, x6, 0x1 as u32);
    let x413: u32 = (x288 >> 1) | ((x290 << 31) & 0xffffffff);
    let x414: u32 = (x290 >> 1) | ((x292 << 31) & 0xffffffff);
    let x415: u32 = (x292 >> 1) | ((x294 << 31) & 0xffffffff);
    let x416: u32 = (x294 >> 1) | ((x296 << 31) & 0xffffffff);
    let x417: u32 = (x296 >> 1) | ((x298 << 31) & 0xffffffff);
    let x418: u32 = (x298 >> 1) | ((x300 << 31) & 0xffffffff);
    let x419: u32 = (x300 >> 1) | ((x302 << 31) & 0xffffffff);
    let x420: u32 = (x302 >> 1) | ((x304 << 31) & 0xffffffff);
    let x421: u32 = (x304 >> 1) | ((x306 << 31) & 0xffffffff);
    let x422: u32 = (x306 >> 1) | ((x308 << 31) & 0xffffffff);
    let x423: u32 = (x308 >> 1) | ((x310 << 31) & 0xffffffff);
    let x424: u32 = (x310 >> 1) | ((x312 << 31) & 0xffffffff);
    let x425: u32 = (x312 >> 1) | ((x314 << 31) & 0xffffffff);
    let x426: u32 = (x314 >> 1) | ((x316 << 31) & 0xffffffff);
    let x427: u32 = (x316 >> 1) | ((x318 << 31) & 0xffffffff);
    let x428: u32 = (x318 >> 1) | ((x320 << 31) & 0xffffffff);
    let x429: u32 = (x320 >> 1) | ((x322 << 31) & 0xffffffff);
    let x430: u32 = (x322 & 0x80000000) | (x322 >> 1);
    let mut x431: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x431, x165, x130, x96);
    let mut x432: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x432, x165, x132, x98);
    let mut x433: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x433, x165, x134, x100);
    let mut x434: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x434, x165, x136, x102);
    let mut x435: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x435, x165, x138, x104);
    let mut x436: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x436, x165, x140, x106);
    let mut x437: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x437, x165, x142, x108);
    let mut x438: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x438, x165, x144, x110);
    let mut x439: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x439, x165, x146, x112);
    let mut x440: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x440, x165, x148, x114);
    let mut x441: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x441, x165, x150, x116);
    let mut x442: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x442, x165, x152, x118);
    let mut x443: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x443, x165, x154, x120);
    let mut x444: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x444, x165, x156, x122);
    let mut x445: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x445, x165, x158, x124);
    let mut x446: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x446, x165, x160, x126);
    let mut x447: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x447, x165, x162, x128);
    let mut x448: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x448, x410, x375, x341);
    let mut x449: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x449, x410, x377, x343);
    let mut x450: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x450, x410, x379, x345);
    let mut x451: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x451, x410, x381, x347);
    let mut x452: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x452, x410, x383, x349);
    let mut x453: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x453, x410, x385, x351);
    let mut x454: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x454, x410, x387, x353);
    let mut x455: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x455, x410, x389, x355);
    let mut x456: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x456, x410, x391, x357);
    let mut x457: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x457, x410, x393, x359);
    let mut x458: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x458, x410, x395, x361);
    let mut x459: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x459, x410, x397, x363);
    let mut x460: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x460, x410, x399, x365);
    let mut x461: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x461, x410, x401, x367);
    let mut x462: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x462, x410, x403, x369);
    let mut x463: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x463, x410, x405, x371);
    let mut x464: u32 = 0;
    fiat_p521_scalar_cmovznz_u32(&mut x464, x410, x407, x373);
    *out1 = x411;
    out2[0] = x7;
    out2[1] = x8;
    out2[2] = x9;
    out2[3] = x10;
    out2[4] = x11;
    out2[5] = x12;
    out2[6] = x13;
    out2[7] = x14;
    out2[8] = x15;
    out2[9] = x16;
    out2[10] = x17;
    out2[11] = x18;
    out2[12] = x19;
    out2[13] = x20;
    out2[14] = x21;
    out2[15] = x22;
    out2[16] = x23;
    out2[17] = x24;
    out3[0] = x413;
    out3[1] = x414;
    out3[2] = x415;
    out3[3] = x416;
    out3[4] = x417;
    out3[5] = x418;
    out3[6] = x419;
    out3[7] = x420;
    out3[8] = x421;
    out3[9] = x422;
    out3[10] = x423;
    out3[11] = x424;
    out3[12] = x425;
    out3[13] = x426;
    out3[14] = x427;
    out3[15] = x428;
    out3[16] = x429;
    out3[17] = x430;
    out4[0] = x431;
    out4[1] = x432;
    out4[2] = x433;
    out4[3] = x434;
    out4[4] = x435;
    out4[5] = x436;
    out4[6] = x437;
    out4[7] = x438;
    out4[8] = x439;
    out4[9] = x440;
    out4[10] = x441;
    out4[11] = x442;
    out4[12] = x443;
    out4[13] = x444;
    out4[14] = x445;
    out4[15] = x446;
    out4[16] = x447;
    out5[0] = x448;
    out5[1] = x449;
    out5[2] = x450;
    out5[3] = x451;
    out5[4] = x452;
    out5[5] = x453;
    out5[6] = x454;
    out5[7] = x455;
    out5[8] = x456;
    out5[9] = x457;
    out5[10] = x458;
    out5[11] = x459;
    out5[12] = x460;
    out5[13] = x461;
    out5[14] = x462;
    out5[15] = x463;
    out5[16] = x464;
}

//
// Vendored fiat-crypto code to support the divstep impl
//

// TODO(tarcieri): replace this all by invoking the 64-bit impl

/** fiat_p521_scalar_u1 represents values of 1 bits, stored in one byte. */
pub type fiat_p521_scalar_u1 = u8;
/** fiat_p521_scalar_i1 represents values of 1 bits, stored in one byte. */
pub type fiat_p521_scalar_i1 = i8;
/** fiat_p521_scalar_u2 represents values of 2 bits, stored in one byte. */
pub type fiat_p521_scalar_u2 = u8;
/** fiat_p521_scalar_i2 represents values of 2 bits, stored in one byte. */
pub type fiat_p521_scalar_i2 = i8;

/// The function fiat_p521_scalar_addcarryx_u32 is an addition with carry.
///
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^32
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub const fn fiat_p521_scalar_addcarryx_u32(
    out1: &mut u32,
    out2: &mut fiat_p521_scalar_u1,
    arg1: fiat_p521_scalar_u1,
    arg2: u32,
    arg3: u32,
) {
    let x1: u64 = ((arg1 as u64) + (arg2 as u64)) + (arg3 as u64);
    let x2: u32 = (x1 & (0xffffffff as u64)) as u32;
    let x3: fiat_p521_scalar_u1 = (x1 >> 32) as fiat_p521_scalar_u1;
    *out1 = x2;
    *out2 = x3;
}

/// The function fiat_p521_scalar_subborrowx_u32 is a subtraction with borrow.
///
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^32
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub const fn fiat_p521_scalar_subborrowx_u32(
    out1: &mut u32,
    out2: &mut fiat_p521_scalar_u1,
    arg1: fiat_p521_scalar_u1,
    arg2: u32,
    arg3: u32,
) {
    let x1: i64 = ((arg2 as i64) - (arg1 as i64)) - (arg3 as i64);
    let x2: fiat_p521_scalar_i1 = (x1 >> 32) as fiat_p521_scalar_i1;
    let x3: u32 = (x1 & (0xffffffff as i64)) as u32;
    *out1 = x3;
    *out2 = ((0x0 as fiat_p521_scalar_i2) - (x2 as fiat_p521_scalar_i2)) as fiat_p521_scalar_u1;
}

/// The function fiat_p521_scalar_cmovznz_u32 is a single-word conditional move.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
#[inline]
pub const fn fiat_p521_scalar_cmovznz_u32(
    out1: &mut u32,
    arg1: fiat_p521_scalar_u1,
    arg2: u32,
    arg3: u32,
) {
    let x1: fiat_p521_scalar_u1 = !(!arg1);
    let x2: u32 = (((((0x0 as fiat_p521_scalar_i2) - (x1 as fiat_p521_scalar_i2))
        as fiat_p521_scalar_i1) as i64)
        & (0xffffffff as i64)) as u32;
    let x3: u32 = (x2 & arg3) | ((!x2) & arg2);
    *out1 = x3;
}

//
// Note: below are handwritten conversion functions we use to invoke the 64-bit implementation
//

/// Convert an 17-element array of `u32` into a 9-element array of `u64`,
/// assuming integer arrays are in little-endian order.
#[inline]
const fn u32x17_to_u64x9(w: &[u32; 17]) -> [u64; 9] {
    let mut ret = [0u64; 9];
    ret[0] = (w[0] as u64) << 32;

    let mut i = 1;
    while i < 9 {
        ret[i] = (w[(i * 2) - 1] as u64) | ((w[i * 2] as u64) << 32);
        i += 1;
    }

    ret
}

/// Convert a 9-element array of `u64` into an 17-element array of `u32`,
/// assuming integers are in little-endian order.
#[inline]
const fn u64x9_to_u32x17(w: &[u64; 9]) -> [u32; 17] {
    let mut ret = [0u32; 17];
    ret[0] = (w[0] >> 32) as u32;

    let mut i = 1;
    while i < 9 {
        ret[(i * 2) - 1] = (w[i] & 0xFFFFFFFF) as u32;
        ret[i * 2] = (w[i] >> 32) as u32;
        i += 1;
    }

    ret
}
