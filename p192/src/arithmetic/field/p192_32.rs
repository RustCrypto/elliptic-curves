//! Autogenerated: fiat-crypto word-by-word-montgomery --lang Rust --inline p192 32 '2^192 - 2^64 - 1' mul square add sub opp from_montgomery to_montgomery selectznz msat divstep divstep_precomp
//! curve description: p192
//! machine_wordsize = 32 (from "32")
//! requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, selectznz, msat, divstep, divstep_precomp
//! m = 0xfffffffffffffffffffffffffffffffeffffffffffffffff (from "2^192 - 2^64 - 1")
//!
//! NOTE: In addition to the bounds specified above each function, all
//!   functions synthesized for this Montgomery arithmetic require the
//!   input to be strictly less than the prime modulus (m), and also
//!   require the input to be in the unique saturated representation.
//!   All functions also ensure that these two properties are true of
//!   return values.
//!
//! Computed values:
//!   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160)
//!   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184)
//!   twos_complement_eval z = let x1 := z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) in
//!                            if x1 & (2^192-1) < 2^191 then x1 & (2^192-1) else (x1 & (2^192-1)) - 2^192

#![allow(unused_parens)]
#![allow(non_camel_case_types)]

/// Since `Index` and `IndexMut` aren't callable in `const` contexts yet, this helper type helps unify
/// arrays and user-defined array-wrapper types into a single type which can be indexed in `const`
/// contexts. Once `const trait`s are stabilized this type can go away
struct IndexConst<T: ?Sized>(T);

impl<'a, T, const N: usize> IndexConst<&'a [T; N]> {
    #[inline(always)]
    #[allow(unused)]
    const fn index(self, i: usize) -> &'a T {
        &self.0[i]
    }
}
impl<'a, 'b, T, const N: usize> IndexConst<&'a mut &'b mut [T; N]> {
    #[inline(always)]
    #[allow(unused)]
    const fn index_mut(self, i: usize) -> &'a mut T {
        &mut self.0[i]
    }
}

/** fiat_p192_u1 represents values of 1 bits, stored in one byte. */
pub type fiat_p192_u1 = u8;
/** fiat_p192_i1 represents values of 1 bits, stored in one byte. */
pub type fiat_p192_i1 = i8;
/** fiat_p192_u2 represents values of 2 bits, stored in one byte. */
pub type fiat_p192_u2 = u8;
/** fiat_p192_i2 represents values of 2 bits, stored in one byte. */
pub type fiat_p192_i2 = i8;

/** The type fiat_p192_montgomery_domain_field_element is a field element in the Montgomery domain. */
/** Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]] */
#[derive(Clone, Copy)]
pub struct fiat_p192_montgomery_domain_field_element(pub [u32; 6]);

impl core::ops::Index<usize> for fiat_p192_montgomery_domain_field_element {
    type Output = u32;
    #[inline]
    fn index(&self, index: usize) -> &Self::Output {
        &self.0[index]
    }
}

impl core::ops::IndexMut<usize> for fiat_p192_montgomery_domain_field_element {
    #[inline]
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.0[index]
    }
}

impl<'a> IndexConst<&'a fiat_p192_montgomery_domain_field_element> {
    #[allow(unused)]
    #[inline(always)]
    const fn index(self, i: usize) -> &'a u32 {
        &self.0.0[i]
    }
}

impl<'a, 'b> IndexConst<&'a mut &'b mut fiat_p192_montgomery_domain_field_element> {
    #[allow(unused)]
    #[inline(always)]
    const fn index_mut(self, i: usize) -> &'a mut u32 {
        &mut self.0.0[i]
    }
}

/** The type fiat_p192_non_montgomery_domain_field_element is a field element NOT in the Montgomery domain. */
/** Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]] */
#[derive(Clone, Copy)]
pub struct fiat_p192_non_montgomery_domain_field_element(pub [u32; 6]);

impl core::ops::Index<usize> for fiat_p192_non_montgomery_domain_field_element {
    type Output = u32;
    #[inline]
    fn index(&self, index: usize) -> &Self::Output {
        &self.0[index]
    }
}

impl core::ops::IndexMut<usize> for fiat_p192_non_montgomery_domain_field_element {
    #[inline]
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.0[index]
    }
}

impl<'a> IndexConst<&'a fiat_p192_non_montgomery_domain_field_element> {
    #[allow(unused)]
    #[inline(always)]
    const fn index(self, i: usize) -> &'a u32 {
        &self.0.0[i]
    }
}

impl<'a, 'b> IndexConst<&'a mut &'b mut fiat_p192_non_montgomery_domain_field_element> {
    #[allow(unused)]
    #[inline(always)]
    const fn index_mut(self, i: usize) -> &'a mut u32 {
        &mut self.0.0[i]
    }
}

/// The function fiat_p192_addcarryx_u32 is an addition with carry.
///
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^32
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub const fn fiat_p192_addcarryx_u32(
    out1: &mut u32,
    out2: &mut fiat_p192_u1,
    arg1: fiat_p192_u1,
    arg2: u32,
    arg3: u32,
) {
    let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
    let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
    let x3: fiat_p192_u1 = ((x1 >> 32) as fiat_p192_u1);
    *out1 = x2;
    *out2 = x3;
}

/// The function fiat_p192_subborrowx_u32 is a subtraction with borrow.
///
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^32
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub const fn fiat_p192_subborrowx_u32(
    out1: &mut u32,
    out2: &mut fiat_p192_u1,
    arg1: fiat_p192_u1,
    arg2: u32,
    arg3: u32,
) {
    let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
    let x2: fiat_p192_i1 = ((x1 >> 32) as fiat_p192_i1);
    let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
    *out1 = x3;
    *out2 = (((0x0 as fiat_p192_i2) - (x2 as fiat_p192_i2)) as fiat_p192_u1);
}

/// The function fiat_p192_mulx_u32 is a multiplication, returning the full double-width result.
///
/// Postconditions:
///   out1 = (arg1 * arg2) mod 2^32
///   out2 = ⌊arg1 * arg2 / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
#[inline]
pub const fn fiat_p192_mulx_u32(out1: &mut u32, out2: &mut u32, arg1: u32, arg2: u32) {
    let x1: u64 = ((arg1 as u64) * (arg2 as u64));
    let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
    let x3: u32 = ((x1 >> 32) as u32);
    *out1 = x2;
    *out2 = x3;
}

/// The function fiat_p192_cmovznz_u32 is a single-word conditional move.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
#[inline]
pub const fn fiat_p192_cmovznz_u32(out1: &mut u32, arg1: fiat_p192_u1, arg2: u32, arg3: u32) {
    let x1: fiat_p192_u1 = (!(!arg1));
    let x2: u32 = ((((((0x0 as fiat_p192_i2) - (x1 as fiat_p192_i2)) as fiat_p192_i1) as i64)
        & (0xffffffff as i64)) as u32);
    let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
    *out1 = x3;
}

/// The function fiat_p192_mul multiplies two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_mul(
    mut out1: &mut fiat_p192_montgomery_domain_field_element,
    arg1: &fiat_p192_montgomery_domain_field_element,
    arg2: &fiat_p192_montgomery_domain_field_element,
) {
    let x1: u32 = (*IndexConst(arg1).index(1));
    let x2: u32 = (*IndexConst(arg1).index(2));
    let x3: u32 = (*IndexConst(arg1).index(3));
    let x4: u32 = (*IndexConst(arg1).index(4));
    let x5: u32 = (*IndexConst(arg1).index(5));
    let x6: u32 = (*IndexConst(arg1).index(0));
    let mut x7: u32 = 0;
    let mut x8: u32 = 0;
    fiat_p192_mulx_u32(&mut x7, &mut x8, x6, (*IndexConst(arg2).index(5)));
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    fiat_p192_mulx_u32(&mut x9, &mut x10, x6, (*IndexConst(arg2).index(4)));
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    fiat_p192_mulx_u32(&mut x11, &mut x12, x6, (*IndexConst(arg2).index(3)));
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    fiat_p192_mulx_u32(&mut x13, &mut x14, x6, (*IndexConst(arg2).index(2)));
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    fiat_p192_mulx_u32(&mut x15, &mut x16, x6, (*IndexConst(arg2).index(1)));
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    fiat_p192_mulx_u32(&mut x17, &mut x18, x6, (*IndexConst(arg2).index(0)));
    let mut x19: u32 = 0;
    let mut x20: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x19, &mut x20, 0x0, x18, x15);
    let mut x21: u32 = 0;
    let mut x22: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x21, &mut x22, x20, x16, x13);
    let mut x23: u32 = 0;
    let mut x24: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x23, &mut x24, x22, x14, x11);
    let mut x25: u32 = 0;
    let mut x26: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x25, &mut x26, x24, x12, x9);
    let mut x27: u32 = 0;
    let mut x28: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x27, &mut x28, x26, x10, x7);
    let x29: u32 = ((x28 as u32) + x8);
    let mut x30: u32 = 0;
    let mut x31: u32 = 0;
    fiat_p192_mulx_u32(&mut x30, &mut x31, x17, 0xffffffff);
    let mut x32: u32 = 0;
    let mut x33: u32 = 0;
    fiat_p192_mulx_u32(&mut x32, &mut x33, x17, 0xffffffff);
    let mut x34: u32 = 0;
    let mut x35: u32 = 0;
    fiat_p192_mulx_u32(&mut x34, &mut x35, x17, 0xffffffff);
    let mut x36: u32 = 0;
    let mut x37: u32 = 0;
    fiat_p192_mulx_u32(&mut x36, &mut x37, x17, 0xfffffffe);
    let mut x38: u32 = 0;
    let mut x39: u32 = 0;
    fiat_p192_mulx_u32(&mut x38, &mut x39, x17, 0xffffffff);
    let mut x40: u32 = 0;
    let mut x41: u32 = 0;
    fiat_p192_mulx_u32(&mut x40, &mut x41, x17, 0xffffffff);
    let mut x42: u32 = 0;
    let mut x43: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x42, &mut x43, 0x0, x41, x38);
    let mut x44: u32 = 0;
    let mut x45: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x44, &mut x45, x43, x39, x36);
    let mut x46: u32 = 0;
    let mut x47: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x46, &mut x47, x45, x37, x34);
    let mut x48: u32 = 0;
    let mut x49: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x48, &mut x49, x47, x35, x32);
    let mut x50: u32 = 0;
    let mut x51: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x50, &mut x51, x49, x33, x30);
    let x52: u32 = ((x51 as u32) + x31);
    let mut x53: u32 = 0;
    let mut x54: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x53, &mut x54, 0x0, x17, x40);
    let mut x55: u32 = 0;
    let mut x56: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x55, &mut x56, x54, x19, x42);
    let mut x57: u32 = 0;
    let mut x58: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x57, &mut x58, x56, x21, x44);
    let mut x59: u32 = 0;
    let mut x60: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x59, &mut x60, x58, x23, x46);
    let mut x61: u32 = 0;
    let mut x62: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x61, &mut x62, x60, x25, x48);
    let mut x63: u32 = 0;
    let mut x64: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x63, &mut x64, x62, x27, x50);
    let mut x65: u32 = 0;
    let mut x66: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x65, &mut x66, x64, x29, x52);
    let mut x67: u32 = 0;
    let mut x68: u32 = 0;
    fiat_p192_mulx_u32(&mut x67, &mut x68, x1, (*IndexConst(arg2).index(5)));
    let mut x69: u32 = 0;
    let mut x70: u32 = 0;
    fiat_p192_mulx_u32(&mut x69, &mut x70, x1, (*IndexConst(arg2).index(4)));
    let mut x71: u32 = 0;
    let mut x72: u32 = 0;
    fiat_p192_mulx_u32(&mut x71, &mut x72, x1, (*IndexConst(arg2).index(3)));
    let mut x73: u32 = 0;
    let mut x74: u32 = 0;
    fiat_p192_mulx_u32(&mut x73, &mut x74, x1, (*IndexConst(arg2).index(2)));
    let mut x75: u32 = 0;
    let mut x76: u32 = 0;
    fiat_p192_mulx_u32(&mut x75, &mut x76, x1, (*IndexConst(arg2).index(1)));
    let mut x77: u32 = 0;
    let mut x78: u32 = 0;
    fiat_p192_mulx_u32(&mut x77, &mut x78, x1, (*IndexConst(arg2).index(0)));
    let mut x79: u32 = 0;
    let mut x80: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x79, &mut x80, 0x0, x78, x75);
    let mut x81: u32 = 0;
    let mut x82: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x81, &mut x82, x80, x76, x73);
    let mut x83: u32 = 0;
    let mut x84: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x83, &mut x84, x82, x74, x71);
    let mut x85: u32 = 0;
    let mut x86: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x85, &mut x86, x84, x72, x69);
    let mut x87: u32 = 0;
    let mut x88: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x87, &mut x88, x86, x70, x67);
    let x89: u32 = ((x88 as u32) + x68);
    let mut x90: u32 = 0;
    let mut x91: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x90, &mut x91, 0x0, x55, x77);
    let mut x92: u32 = 0;
    let mut x93: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x92, &mut x93, x91, x57, x79);
    let mut x94: u32 = 0;
    let mut x95: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x94, &mut x95, x93, x59, x81);
    let mut x96: u32 = 0;
    let mut x97: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x96, &mut x97, x95, x61, x83);
    let mut x98: u32 = 0;
    let mut x99: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x98, &mut x99, x97, x63, x85);
    let mut x100: u32 = 0;
    let mut x101: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x100, &mut x101, x99, x65, x87);
    let mut x102: u32 = 0;
    let mut x103: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x102, &mut x103, x101, (x66 as u32), x89);
    let mut x104: u32 = 0;
    let mut x105: u32 = 0;
    fiat_p192_mulx_u32(&mut x104, &mut x105, x90, 0xffffffff);
    let mut x106: u32 = 0;
    let mut x107: u32 = 0;
    fiat_p192_mulx_u32(&mut x106, &mut x107, x90, 0xffffffff);
    let mut x108: u32 = 0;
    let mut x109: u32 = 0;
    fiat_p192_mulx_u32(&mut x108, &mut x109, x90, 0xffffffff);
    let mut x110: u32 = 0;
    let mut x111: u32 = 0;
    fiat_p192_mulx_u32(&mut x110, &mut x111, x90, 0xfffffffe);
    let mut x112: u32 = 0;
    let mut x113: u32 = 0;
    fiat_p192_mulx_u32(&mut x112, &mut x113, x90, 0xffffffff);
    let mut x114: u32 = 0;
    let mut x115: u32 = 0;
    fiat_p192_mulx_u32(&mut x114, &mut x115, x90, 0xffffffff);
    let mut x116: u32 = 0;
    let mut x117: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x116, &mut x117, 0x0, x115, x112);
    let mut x118: u32 = 0;
    let mut x119: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x118, &mut x119, x117, x113, x110);
    let mut x120: u32 = 0;
    let mut x121: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x120, &mut x121, x119, x111, x108);
    let mut x122: u32 = 0;
    let mut x123: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x122, &mut x123, x121, x109, x106);
    let mut x124: u32 = 0;
    let mut x125: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x124, &mut x125, x123, x107, x104);
    let x126: u32 = ((x125 as u32) + x105);
    let mut x127: u32 = 0;
    let mut x128: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x127, &mut x128, 0x0, x90, x114);
    let mut x129: u32 = 0;
    let mut x130: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x129, &mut x130, x128, x92, x116);
    let mut x131: u32 = 0;
    let mut x132: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x131, &mut x132, x130, x94, x118);
    let mut x133: u32 = 0;
    let mut x134: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x133, &mut x134, x132, x96, x120);
    let mut x135: u32 = 0;
    let mut x136: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x135, &mut x136, x134, x98, x122);
    let mut x137: u32 = 0;
    let mut x138: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x137, &mut x138, x136, x100, x124);
    let mut x139: u32 = 0;
    let mut x140: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x139, &mut x140, x138, x102, x126);
    let x141: u32 = ((x140 as u32) + (x103 as u32));
    let mut x142: u32 = 0;
    let mut x143: u32 = 0;
    fiat_p192_mulx_u32(&mut x142, &mut x143, x2, (*IndexConst(arg2).index(5)));
    let mut x144: u32 = 0;
    let mut x145: u32 = 0;
    fiat_p192_mulx_u32(&mut x144, &mut x145, x2, (*IndexConst(arg2).index(4)));
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    fiat_p192_mulx_u32(&mut x146, &mut x147, x2, (*IndexConst(arg2).index(3)));
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    fiat_p192_mulx_u32(&mut x148, &mut x149, x2, (*IndexConst(arg2).index(2)));
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    fiat_p192_mulx_u32(&mut x150, &mut x151, x2, (*IndexConst(arg2).index(1)));
    let mut x152: u32 = 0;
    let mut x153: u32 = 0;
    fiat_p192_mulx_u32(&mut x152, &mut x153, x2, (*IndexConst(arg2).index(0)));
    let mut x154: u32 = 0;
    let mut x155: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x154, &mut x155, 0x0, x153, x150);
    let mut x156: u32 = 0;
    let mut x157: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x156, &mut x157, x155, x151, x148);
    let mut x158: u32 = 0;
    let mut x159: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x158, &mut x159, x157, x149, x146);
    let mut x160: u32 = 0;
    let mut x161: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x160, &mut x161, x159, x147, x144);
    let mut x162: u32 = 0;
    let mut x163: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x162, &mut x163, x161, x145, x142);
    let x164: u32 = ((x163 as u32) + x143);
    let mut x165: u32 = 0;
    let mut x166: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x165, &mut x166, 0x0, x129, x152);
    let mut x167: u32 = 0;
    let mut x168: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x167, &mut x168, x166, x131, x154);
    let mut x169: u32 = 0;
    let mut x170: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x169, &mut x170, x168, x133, x156);
    let mut x171: u32 = 0;
    let mut x172: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x171, &mut x172, x170, x135, x158);
    let mut x173: u32 = 0;
    let mut x174: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x173, &mut x174, x172, x137, x160);
    let mut x175: u32 = 0;
    let mut x176: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x175, &mut x176, x174, x139, x162);
    let mut x177: u32 = 0;
    let mut x178: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x177, &mut x178, x176, x141, x164);
    let mut x179: u32 = 0;
    let mut x180: u32 = 0;
    fiat_p192_mulx_u32(&mut x179, &mut x180, x165, 0xffffffff);
    let mut x181: u32 = 0;
    let mut x182: u32 = 0;
    fiat_p192_mulx_u32(&mut x181, &mut x182, x165, 0xffffffff);
    let mut x183: u32 = 0;
    let mut x184: u32 = 0;
    fiat_p192_mulx_u32(&mut x183, &mut x184, x165, 0xffffffff);
    let mut x185: u32 = 0;
    let mut x186: u32 = 0;
    fiat_p192_mulx_u32(&mut x185, &mut x186, x165, 0xfffffffe);
    let mut x187: u32 = 0;
    let mut x188: u32 = 0;
    fiat_p192_mulx_u32(&mut x187, &mut x188, x165, 0xffffffff);
    let mut x189: u32 = 0;
    let mut x190: u32 = 0;
    fiat_p192_mulx_u32(&mut x189, &mut x190, x165, 0xffffffff);
    let mut x191: u32 = 0;
    let mut x192: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x191, &mut x192, 0x0, x190, x187);
    let mut x193: u32 = 0;
    let mut x194: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x193, &mut x194, x192, x188, x185);
    let mut x195: u32 = 0;
    let mut x196: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x195, &mut x196, x194, x186, x183);
    let mut x197: u32 = 0;
    let mut x198: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x197, &mut x198, x196, x184, x181);
    let mut x199: u32 = 0;
    let mut x200: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x199, &mut x200, x198, x182, x179);
    let x201: u32 = ((x200 as u32) + x180);
    let mut x202: u32 = 0;
    let mut x203: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x202, &mut x203, 0x0, x165, x189);
    let mut x204: u32 = 0;
    let mut x205: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x204, &mut x205, x203, x167, x191);
    let mut x206: u32 = 0;
    let mut x207: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x206, &mut x207, x205, x169, x193);
    let mut x208: u32 = 0;
    let mut x209: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x208, &mut x209, x207, x171, x195);
    let mut x210: u32 = 0;
    let mut x211: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x210, &mut x211, x209, x173, x197);
    let mut x212: u32 = 0;
    let mut x213: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x212, &mut x213, x211, x175, x199);
    let mut x214: u32 = 0;
    let mut x215: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x214, &mut x215, x213, x177, x201);
    let x216: u32 = ((x215 as u32) + (x178 as u32));
    let mut x217: u32 = 0;
    let mut x218: u32 = 0;
    fiat_p192_mulx_u32(&mut x217, &mut x218, x3, (*IndexConst(arg2).index(5)));
    let mut x219: u32 = 0;
    let mut x220: u32 = 0;
    fiat_p192_mulx_u32(&mut x219, &mut x220, x3, (*IndexConst(arg2).index(4)));
    let mut x221: u32 = 0;
    let mut x222: u32 = 0;
    fiat_p192_mulx_u32(&mut x221, &mut x222, x3, (*IndexConst(arg2).index(3)));
    let mut x223: u32 = 0;
    let mut x224: u32 = 0;
    fiat_p192_mulx_u32(&mut x223, &mut x224, x3, (*IndexConst(arg2).index(2)));
    let mut x225: u32 = 0;
    let mut x226: u32 = 0;
    fiat_p192_mulx_u32(&mut x225, &mut x226, x3, (*IndexConst(arg2).index(1)));
    let mut x227: u32 = 0;
    let mut x228: u32 = 0;
    fiat_p192_mulx_u32(&mut x227, &mut x228, x3, (*IndexConst(arg2).index(0)));
    let mut x229: u32 = 0;
    let mut x230: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x229, &mut x230, 0x0, x228, x225);
    let mut x231: u32 = 0;
    let mut x232: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x231, &mut x232, x230, x226, x223);
    let mut x233: u32 = 0;
    let mut x234: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x233, &mut x234, x232, x224, x221);
    let mut x235: u32 = 0;
    let mut x236: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x235, &mut x236, x234, x222, x219);
    let mut x237: u32 = 0;
    let mut x238: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x237, &mut x238, x236, x220, x217);
    let x239: u32 = ((x238 as u32) + x218);
    let mut x240: u32 = 0;
    let mut x241: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x240, &mut x241, 0x0, x204, x227);
    let mut x242: u32 = 0;
    let mut x243: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x242, &mut x243, x241, x206, x229);
    let mut x244: u32 = 0;
    let mut x245: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x244, &mut x245, x243, x208, x231);
    let mut x246: u32 = 0;
    let mut x247: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x246, &mut x247, x245, x210, x233);
    let mut x248: u32 = 0;
    let mut x249: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x248, &mut x249, x247, x212, x235);
    let mut x250: u32 = 0;
    let mut x251: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x250, &mut x251, x249, x214, x237);
    let mut x252: u32 = 0;
    let mut x253: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x252, &mut x253, x251, x216, x239);
    let mut x254: u32 = 0;
    let mut x255: u32 = 0;
    fiat_p192_mulx_u32(&mut x254, &mut x255, x240, 0xffffffff);
    let mut x256: u32 = 0;
    let mut x257: u32 = 0;
    fiat_p192_mulx_u32(&mut x256, &mut x257, x240, 0xffffffff);
    let mut x258: u32 = 0;
    let mut x259: u32 = 0;
    fiat_p192_mulx_u32(&mut x258, &mut x259, x240, 0xffffffff);
    let mut x260: u32 = 0;
    let mut x261: u32 = 0;
    fiat_p192_mulx_u32(&mut x260, &mut x261, x240, 0xfffffffe);
    let mut x262: u32 = 0;
    let mut x263: u32 = 0;
    fiat_p192_mulx_u32(&mut x262, &mut x263, x240, 0xffffffff);
    let mut x264: u32 = 0;
    let mut x265: u32 = 0;
    fiat_p192_mulx_u32(&mut x264, &mut x265, x240, 0xffffffff);
    let mut x266: u32 = 0;
    let mut x267: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x266, &mut x267, 0x0, x265, x262);
    let mut x268: u32 = 0;
    let mut x269: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x268, &mut x269, x267, x263, x260);
    let mut x270: u32 = 0;
    let mut x271: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x270, &mut x271, x269, x261, x258);
    let mut x272: u32 = 0;
    let mut x273: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x272, &mut x273, x271, x259, x256);
    let mut x274: u32 = 0;
    let mut x275: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x274, &mut x275, x273, x257, x254);
    let x276: u32 = ((x275 as u32) + x255);
    let mut x277: u32 = 0;
    let mut x278: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x277, &mut x278, 0x0, x240, x264);
    let mut x279: u32 = 0;
    let mut x280: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x279, &mut x280, x278, x242, x266);
    let mut x281: u32 = 0;
    let mut x282: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x281, &mut x282, x280, x244, x268);
    let mut x283: u32 = 0;
    let mut x284: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x283, &mut x284, x282, x246, x270);
    let mut x285: u32 = 0;
    let mut x286: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x285, &mut x286, x284, x248, x272);
    let mut x287: u32 = 0;
    let mut x288: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x287, &mut x288, x286, x250, x274);
    let mut x289: u32 = 0;
    let mut x290: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x289, &mut x290, x288, x252, x276);
    let x291: u32 = ((x290 as u32) + (x253 as u32));
    let mut x292: u32 = 0;
    let mut x293: u32 = 0;
    fiat_p192_mulx_u32(&mut x292, &mut x293, x4, (*IndexConst(arg2).index(5)));
    let mut x294: u32 = 0;
    let mut x295: u32 = 0;
    fiat_p192_mulx_u32(&mut x294, &mut x295, x4, (*IndexConst(arg2).index(4)));
    let mut x296: u32 = 0;
    let mut x297: u32 = 0;
    fiat_p192_mulx_u32(&mut x296, &mut x297, x4, (*IndexConst(arg2).index(3)));
    let mut x298: u32 = 0;
    let mut x299: u32 = 0;
    fiat_p192_mulx_u32(&mut x298, &mut x299, x4, (*IndexConst(arg2).index(2)));
    let mut x300: u32 = 0;
    let mut x301: u32 = 0;
    fiat_p192_mulx_u32(&mut x300, &mut x301, x4, (*IndexConst(arg2).index(1)));
    let mut x302: u32 = 0;
    let mut x303: u32 = 0;
    fiat_p192_mulx_u32(&mut x302, &mut x303, x4, (*IndexConst(arg2).index(0)));
    let mut x304: u32 = 0;
    let mut x305: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x304, &mut x305, 0x0, x303, x300);
    let mut x306: u32 = 0;
    let mut x307: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x306, &mut x307, x305, x301, x298);
    let mut x308: u32 = 0;
    let mut x309: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x308, &mut x309, x307, x299, x296);
    let mut x310: u32 = 0;
    let mut x311: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x310, &mut x311, x309, x297, x294);
    let mut x312: u32 = 0;
    let mut x313: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x312, &mut x313, x311, x295, x292);
    let x314: u32 = ((x313 as u32) + x293);
    let mut x315: u32 = 0;
    let mut x316: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x315, &mut x316, 0x0, x279, x302);
    let mut x317: u32 = 0;
    let mut x318: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x317, &mut x318, x316, x281, x304);
    let mut x319: u32 = 0;
    let mut x320: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x319, &mut x320, x318, x283, x306);
    let mut x321: u32 = 0;
    let mut x322: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x321, &mut x322, x320, x285, x308);
    let mut x323: u32 = 0;
    let mut x324: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x323, &mut x324, x322, x287, x310);
    let mut x325: u32 = 0;
    let mut x326: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x325, &mut x326, x324, x289, x312);
    let mut x327: u32 = 0;
    let mut x328: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x327, &mut x328, x326, x291, x314);
    let mut x329: u32 = 0;
    let mut x330: u32 = 0;
    fiat_p192_mulx_u32(&mut x329, &mut x330, x315, 0xffffffff);
    let mut x331: u32 = 0;
    let mut x332: u32 = 0;
    fiat_p192_mulx_u32(&mut x331, &mut x332, x315, 0xffffffff);
    let mut x333: u32 = 0;
    let mut x334: u32 = 0;
    fiat_p192_mulx_u32(&mut x333, &mut x334, x315, 0xffffffff);
    let mut x335: u32 = 0;
    let mut x336: u32 = 0;
    fiat_p192_mulx_u32(&mut x335, &mut x336, x315, 0xfffffffe);
    let mut x337: u32 = 0;
    let mut x338: u32 = 0;
    fiat_p192_mulx_u32(&mut x337, &mut x338, x315, 0xffffffff);
    let mut x339: u32 = 0;
    let mut x340: u32 = 0;
    fiat_p192_mulx_u32(&mut x339, &mut x340, x315, 0xffffffff);
    let mut x341: u32 = 0;
    let mut x342: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x341, &mut x342, 0x0, x340, x337);
    let mut x343: u32 = 0;
    let mut x344: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x343, &mut x344, x342, x338, x335);
    let mut x345: u32 = 0;
    let mut x346: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x345, &mut x346, x344, x336, x333);
    let mut x347: u32 = 0;
    let mut x348: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x347, &mut x348, x346, x334, x331);
    let mut x349: u32 = 0;
    let mut x350: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x349, &mut x350, x348, x332, x329);
    let x351: u32 = ((x350 as u32) + x330);
    let mut x352: u32 = 0;
    let mut x353: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x352, &mut x353, 0x0, x315, x339);
    let mut x354: u32 = 0;
    let mut x355: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x354, &mut x355, x353, x317, x341);
    let mut x356: u32 = 0;
    let mut x357: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x356, &mut x357, x355, x319, x343);
    let mut x358: u32 = 0;
    let mut x359: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x358, &mut x359, x357, x321, x345);
    let mut x360: u32 = 0;
    let mut x361: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x360, &mut x361, x359, x323, x347);
    let mut x362: u32 = 0;
    let mut x363: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x362, &mut x363, x361, x325, x349);
    let mut x364: u32 = 0;
    let mut x365: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x364, &mut x365, x363, x327, x351);
    let x366: u32 = ((x365 as u32) + (x328 as u32));
    let mut x367: u32 = 0;
    let mut x368: u32 = 0;
    fiat_p192_mulx_u32(&mut x367, &mut x368, x5, (*IndexConst(arg2).index(5)));
    let mut x369: u32 = 0;
    let mut x370: u32 = 0;
    fiat_p192_mulx_u32(&mut x369, &mut x370, x5, (*IndexConst(arg2).index(4)));
    let mut x371: u32 = 0;
    let mut x372: u32 = 0;
    fiat_p192_mulx_u32(&mut x371, &mut x372, x5, (*IndexConst(arg2).index(3)));
    let mut x373: u32 = 0;
    let mut x374: u32 = 0;
    fiat_p192_mulx_u32(&mut x373, &mut x374, x5, (*IndexConst(arg2).index(2)));
    let mut x375: u32 = 0;
    let mut x376: u32 = 0;
    fiat_p192_mulx_u32(&mut x375, &mut x376, x5, (*IndexConst(arg2).index(1)));
    let mut x377: u32 = 0;
    let mut x378: u32 = 0;
    fiat_p192_mulx_u32(&mut x377, &mut x378, x5, (*IndexConst(arg2).index(0)));
    let mut x379: u32 = 0;
    let mut x380: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x379, &mut x380, 0x0, x378, x375);
    let mut x381: u32 = 0;
    let mut x382: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x381, &mut x382, x380, x376, x373);
    let mut x383: u32 = 0;
    let mut x384: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x383, &mut x384, x382, x374, x371);
    let mut x385: u32 = 0;
    let mut x386: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x385, &mut x386, x384, x372, x369);
    let mut x387: u32 = 0;
    let mut x388: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x387, &mut x388, x386, x370, x367);
    let x389: u32 = ((x388 as u32) + x368);
    let mut x390: u32 = 0;
    let mut x391: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x390, &mut x391, 0x0, x354, x377);
    let mut x392: u32 = 0;
    let mut x393: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x392, &mut x393, x391, x356, x379);
    let mut x394: u32 = 0;
    let mut x395: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x394, &mut x395, x393, x358, x381);
    let mut x396: u32 = 0;
    let mut x397: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x396, &mut x397, x395, x360, x383);
    let mut x398: u32 = 0;
    let mut x399: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x398, &mut x399, x397, x362, x385);
    let mut x400: u32 = 0;
    let mut x401: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x400, &mut x401, x399, x364, x387);
    let mut x402: u32 = 0;
    let mut x403: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x402, &mut x403, x401, x366, x389);
    let mut x404: u32 = 0;
    let mut x405: u32 = 0;
    fiat_p192_mulx_u32(&mut x404, &mut x405, x390, 0xffffffff);
    let mut x406: u32 = 0;
    let mut x407: u32 = 0;
    fiat_p192_mulx_u32(&mut x406, &mut x407, x390, 0xffffffff);
    let mut x408: u32 = 0;
    let mut x409: u32 = 0;
    fiat_p192_mulx_u32(&mut x408, &mut x409, x390, 0xffffffff);
    let mut x410: u32 = 0;
    let mut x411: u32 = 0;
    fiat_p192_mulx_u32(&mut x410, &mut x411, x390, 0xfffffffe);
    let mut x412: u32 = 0;
    let mut x413: u32 = 0;
    fiat_p192_mulx_u32(&mut x412, &mut x413, x390, 0xffffffff);
    let mut x414: u32 = 0;
    let mut x415: u32 = 0;
    fiat_p192_mulx_u32(&mut x414, &mut x415, x390, 0xffffffff);
    let mut x416: u32 = 0;
    let mut x417: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x416, &mut x417, 0x0, x415, x412);
    let mut x418: u32 = 0;
    let mut x419: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x418, &mut x419, x417, x413, x410);
    let mut x420: u32 = 0;
    let mut x421: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x420, &mut x421, x419, x411, x408);
    let mut x422: u32 = 0;
    let mut x423: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x422, &mut x423, x421, x409, x406);
    let mut x424: u32 = 0;
    let mut x425: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x424, &mut x425, x423, x407, x404);
    let x426: u32 = ((x425 as u32) + x405);
    let mut x427: u32 = 0;
    let mut x428: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x427, &mut x428, 0x0, x390, x414);
    let mut x429: u32 = 0;
    let mut x430: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x429, &mut x430, x428, x392, x416);
    let mut x431: u32 = 0;
    let mut x432: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x431, &mut x432, x430, x394, x418);
    let mut x433: u32 = 0;
    let mut x434: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x433, &mut x434, x432, x396, x420);
    let mut x435: u32 = 0;
    let mut x436: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x435, &mut x436, x434, x398, x422);
    let mut x437: u32 = 0;
    let mut x438: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x437, &mut x438, x436, x400, x424);
    let mut x439: u32 = 0;
    let mut x440: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x439, &mut x440, x438, x402, x426);
    let x441: u32 = ((x440 as u32) + (x403 as u32));
    let mut x442: u32 = 0;
    let mut x443: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x442, &mut x443, 0x0, x429, 0xffffffff);
    let mut x444: u32 = 0;
    let mut x445: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x444, &mut x445, x443, x431, 0xffffffff);
    let mut x446: u32 = 0;
    let mut x447: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x446, &mut x447, x445, x433, 0xfffffffe);
    let mut x448: u32 = 0;
    let mut x449: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x448, &mut x449, x447, x435, 0xffffffff);
    let mut x450: u32 = 0;
    let mut x451: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x450, &mut x451, x449, x437, 0xffffffff);
    let mut x452: u32 = 0;
    let mut x453: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x452, &mut x453, x451, x439, 0xffffffff);
    let mut x454: u32 = 0;
    let mut x455: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x454, &mut x455, x453, x441, (0x0 as u32));
    let mut x456: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x456, x455, x442, x429);
    let mut x457: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x457, x455, x444, x431);
    let mut x458: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x458, x455, x446, x433);
    let mut x459: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x459, x455, x448, x435);
    let mut x460: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x460, x455, x450, x437);
    let mut x461: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x461, x455, x452, x439);
    *IndexConst(&mut out1).index_mut(0) = x456;
    *IndexConst(&mut out1).index_mut(1) = x457;
    *IndexConst(&mut out1).index_mut(2) = x458;
    *IndexConst(&mut out1).index_mut(3) = x459;
    *IndexConst(&mut out1).index_mut(4) = x460;
    *IndexConst(&mut out1).index_mut(5) = x461;
}

/// The function fiat_p192_square squares a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_square(
    mut out1: &mut fiat_p192_montgomery_domain_field_element,
    arg1: &fiat_p192_montgomery_domain_field_element,
) {
    let x1: u32 = (*IndexConst(arg1).index(1));
    let x2: u32 = (*IndexConst(arg1).index(2));
    let x3: u32 = (*IndexConst(arg1).index(3));
    let x4: u32 = (*IndexConst(arg1).index(4));
    let x5: u32 = (*IndexConst(arg1).index(5));
    let x6: u32 = (*IndexConst(arg1).index(0));
    let mut x7: u32 = 0;
    let mut x8: u32 = 0;
    fiat_p192_mulx_u32(&mut x7, &mut x8, x6, (*IndexConst(arg1).index(5)));
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    fiat_p192_mulx_u32(&mut x9, &mut x10, x6, (*IndexConst(arg1).index(4)));
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    fiat_p192_mulx_u32(&mut x11, &mut x12, x6, (*IndexConst(arg1).index(3)));
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    fiat_p192_mulx_u32(&mut x13, &mut x14, x6, (*IndexConst(arg1).index(2)));
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    fiat_p192_mulx_u32(&mut x15, &mut x16, x6, (*IndexConst(arg1).index(1)));
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    fiat_p192_mulx_u32(&mut x17, &mut x18, x6, (*IndexConst(arg1).index(0)));
    let mut x19: u32 = 0;
    let mut x20: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x19, &mut x20, 0x0, x18, x15);
    let mut x21: u32 = 0;
    let mut x22: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x21, &mut x22, x20, x16, x13);
    let mut x23: u32 = 0;
    let mut x24: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x23, &mut x24, x22, x14, x11);
    let mut x25: u32 = 0;
    let mut x26: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x25, &mut x26, x24, x12, x9);
    let mut x27: u32 = 0;
    let mut x28: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x27, &mut x28, x26, x10, x7);
    let x29: u32 = ((x28 as u32) + x8);
    let mut x30: u32 = 0;
    let mut x31: u32 = 0;
    fiat_p192_mulx_u32(&mut x30, &mut x31, x17, 0xffffffff);
    let mut x32: u32 = 0;
    let mut x33: u32 = 0;
    fiat_p192_mulx_u32(&mut x32, &mut x33, x17, 0xffffffff);
    let mut x34: u32 = 0;
    let mut x35: u32 = 0;
    fiat_p192_mulx_u32(&mut x34, &mut x35, x17, 0xffffffff);
    let mut x36: u32 = 0;
    let mut x37: u32 = 0;
    fiat_p192_mulx_u32(&mut x36, &mut x37, x17, 0xfffffffe);
    let mut x38: u32 = 0;
    let mut x39: u32 = 0;
    fiat_p192_mulx_u32(&mut x38, &mut x39, x17, 0xffffffff);
    let mut x40: u32 = 0;
    let mut x41: u32 = 0;
    fiat_p192_mulx_u32(&mut x40, &mut x41, x17, 0xffffffff);
    let mut x42: u32 = 0;
    let mut x43: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x42, &mut x43, 0x0, x41, x38);
    let mut x44: u32 = 0;
    let mut x45: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x44, &mut x45, x43, x39, x36);
    let mut x46: u32 = 0;
    let mut x47: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x46, &mut x47, x45, x37, x34);
    let mut x48: u32 = 0;
    let mut x49: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x48, &mut x49, x47, x35, x32);
    let mut x50: u32 = 0;
    let mut x51: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x50, &mut x51, x49, x33, x30);
    let x52: u32 = ((x51 as u32) + x31);
    let mut x53: u32 = 0;
    let mut x54: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x53, &mut x54, 0x0, x17, x40);
    let mut x55: u32 = 0;
    let mut x56: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x55, &mut x56, x54, x19, x42);
    let mut x57: u32 = 0;
    let mut x58: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x57, &mut x58, x56, x21, x44);
    let mut x59: u32 = 0;
    let mut x60: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x59, &mut x60, x58, x23, x46);
    let mut x61: u32 = 0;
    let mut x62: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x61, &mut x62, x60, x25, x48);
    let mut x63: u32 = 0;
    let mut x64: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x63, &mut x64, x62, x27, x50);
    let mut x65: u32 = 0;
    let mut x66: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x65, &mut x66, x64, x29, x52);
    let mut x67: u32 = 0;
    let mut x68: u32 = 0;
    fiat_p192_mulx_u32(&mut x67, &mut x68, x1, (*IndexConst(arg1).index(5)));
    let mut x69: u32 = 0;
    let mut x70: u32 = 0;
    fiat_p192_mulx_u32(&mut x69, &mut x70, x1, (*IndexConst(arg1).index(4)));
    let mut x71: u32 = 0;
    let mut x72: u32 = 0;
    fiat_p192_mulx_u32(&mut x71, &mut x72, x1, (*IndexConst(arg1).index(3)));
    let mut x73: u32 = 0;
    let mut x74: u32 = 0;
    fiat_p192_mulx_u32(&mut x73, &mut x74, x1, (*IndexConst(arg1).index(2)));
    let mut x75: u32 = 0;
    let mut x76: u32 = 0;
    fiat_p192_mulx_u32(&mut x75, &mut x76, x1, (*IndexConst(arg1).index(1)));
    let mut x77: u32 = 0;
    let mut x78: u32 = 0;
    fiat_p192_mulx_u32(&mut x77, &mut x78, x1, (*IndexConst(arg1).index(0)));
    let mut x79: u32 = 0;
    let mut x80: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x79, &mut x80, 0x0, x78, x75);
    let mut x81: u32 = 0;
    let mut x82: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x81, &mut x82, x80, x76, x73);
    let mut x83: u32 = 0;
    let mut x84: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x83, &mut x84, x82, x74, x71);
    let mut x85: u32 = 0;
    let mut x86: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x85, &mut x86, x84, x72, x69);
    let mut x87: u32 = 0;
    let mut x88: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x87, &mut x88, x86, x70, x67);
    let x89: u32 = ((x88 as u32) + x68);
    let mut x90: u32 = 0;
    let mut x91: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x90, &mut x91, 0x0, x55, x77);
    let mut x92: u32 = 0;
    let mut x93: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x92, &mut x93, x91, x57, x79);
    let mut x94: u32 = 0;
    let mut x95: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x94, &mut x95, x93, x59, x81);
    let mut x96: u32 = 0;
    let mut x97: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x96, &mut x97, x95, x61, x83);
    let mut x98: u32 = 0;
    let mut x99: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x98, &mut x99, x97, x63, x85);
    let mut x100: u32 = 0;
    let mut x101: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x100, &mut x101, x99, x65, x87);
    let mut x102: u32 = 0;
    let mut x103: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x102, &mut x103, x101, (x66 as u32), x89);
    let mut x104: u32 = 0;
    let mut x105: u32 = 0;
    fiat_p192_mulx_u32(&mut x104, &mut x105, x90, 0xffffffff);
    let mut x106: u32 = 0;
    let mut x107: u32 = 0;
    fiat_p192_mulx_u32(&mut x106, &mut x107, x90, 0xffffffff);
    let mut x108: u32 = 0;
    let mut x109: u32 = 0;
    fiat_p192_mulx_u32(&mut x108, &mut x109, x90, 0xffffffff);
    let mut x110: u32 = 0;
    let mut x111: u32 = 0;
    fiat_p192_mulx_u32(&mut x110, &mut x111, x90, 0xfffffffe);
    let mut x112: u32 = 0;
    let mut x113: u32 = 0;
    fiat_p192_mulx_u32(&mut x112, &mut x113, x90, 0xffffffff);
    let mut x114: u32 = 0;
    let mut x115: u32 = 0;
    fiat_p192_mulx_u32(&mut x114, &mut x115, x90, 0xffffffff);
    let mut x116: u32 = 0;
    let mut x117: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x116, &mut x117, 0x0, x115, x112);
    let mut x118: u32 = 0;
    let mut x119: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x118, &mut x119, x117, x113, x110);
    let mut x120: u32 = 0;
    let mut x121: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x120, &mut x121, x119, x111, x108);
    let mut x122: u32 = 0;
    let mut x123: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x122, &mut x123, x121, x109, x106);
    let mut x124: u32 = 0;
    let mut x125: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x124, &mut x125, x123, x107, x104);
    let x126: u32 = ((x125 as u32) + x105);
    let mut x127: u32 = 0;
    let mut x128: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x127, &mut x128, 0x0, x90, x114);
    let mut x129: u32 = 0;
    let mut x130: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x129, &mut x130, x128, x92, x116);
    let mut x131: u32 = 0;
    let mut x132: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x131, &mut x132, x130, x94, x118);
    let mut x133: u32 = 0;
    let mut x134: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x133, &mut x134, x132, x96, x120);
    let mut x135: u32 = 0;
    let mut x136: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x135, &mut x136, x134, x98, x122);
    let mut x137: u32 = 0;
    let mut x138: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x137, &mut x138, x136, x100, x124);
    let mut x139: u32 = 0;
    let mut x140: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x139, &mut x140, x138, x102, x126);
    let x141: u32 = ((x140 as u32) + (x103 as u32));
    let mut x142: u32 = 0;
    let mut x143: u32 = 0;
    fiat_p192_mulx_u32(&mut x142, &mut x143, x2, (*IndexConst(arg1).index(5)));
    let mut x144: u32 = 0;
    let mut x145: u32 = 0;
    fiat_p192_mulx_u32(&mut x144, &mut x145, x2, (*IndexConst(arg1).index(4)));
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    fiat_p192_mulx_u32(&mut x146, &mut x147, x2, (*IndexConst(arg1).index(3)));
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    fiat_p192_mulx_u32(&mut x148, &mut x149, x2, (*IndexConst(arg1).index(2)));
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    fiat_p192_mulx_u32(&mut x150, &mut x151, x2, (*IndexConst(arg1).index(1)));
    let mut x152: u32 = 0;
    let mut x153: u32 = 0;
    fiat_p192_mulx_u32(&mut x152, &mut x153, x2, (*IndexConst(arg1).index(0)));
    let mut x154: u32 = 0;
    let mut x155: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x154, &mut x155, 0x0, x153, x150);
    let mut x156: u32 = 0;
    let mut x157: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x156, &mut x157, x155, x151, x148);
    let mut x158: u32 = 0;
    let mut x159: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x158, &mut x159, x157, x149, x146);
    let mut x160: u32 = 0;
    let mut x161: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x160, &mut x161, x159, x147, x144);
    let mut x162: u32 = 0;
    let mut x163: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x162, &mut x163, x161, x145, x142);
    let x164: u32 = ((x163 as u32) + x143);
    let mut x165: u32 = 0;
    let mut x166: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x165, &mut x166, 0x0, x129, x152);
    let mut x167: u32 = 0;
    let mut x168: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x167, &mut x168, x166, x131, x154);
    let mut x169: u32 = 0;
    let mut x170: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x169, &mut x170, x168, x133, x156);
    let mut x171: u32 = 0;
    let mut x172: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x171, &mut x172, x170, x135, x158);
    let mut x173: u32 = 0;
    let mut x174: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x173, &mut x174, x172, x137, x160);
    let mut x175: u32 = 0;
    let mut x176: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x175, &mut x176, x174, x139, x162);
    let mut x177: u32 = 0;
    let mut x178: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x177, &mut x178, x176, x141, x164);
    let mut x179: u32 = 0;
    let mut x180: u32 = 0;
    fiat_p192_mulx_u32(&mut x179, &mut x180, x165, 0xffffffff);
    let mut x181: u32 = 0;
    let mut x182: u32 = 0;
    fiat_p192_mulx_u32(&mut x181, &mut x182, x165, 0xffffffff);
    let mut x183: u32 = 0;
    let mut x184: u32 = 0;
    fiat_p192_mulx_u32(&mut x183, &mut x184, x165, 0xffffffff);
    let mut x185: u32 = 0;
    let mut x186: u32 = 0;
    fiat_p192_mulx_u32(&mut x185, &mut x186, x165, 0xfffffffe);
    let mut x187: u32 = 0;
    let mut x188: u32 = 0;
    fiat_p192_mulx_u32(&mut x187, &mut x188, x165, 0xffffffff);
    let mut x189: u32 = 0;
    let mut x190: u32 = 0;
    fiat_p192_mulx_u32(&mut x189, &mut x190, x165, 0xffffffff);
    let mut x191: u32 = 0;
    let mut x192: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x191, &mut x192, 0x0, x190, x187);
    let mut x193: u32 = 0;
    let mut x194: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x193, &mut x194, x192, x188, x185);
    let mut x195: u32 = 0;
    let mut x196: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x195, &mut x196, x194, x186, x183);
    let mut x197: u32 = 0;
    let mut x198: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x197, &mut x198, x196, x184, x181);
    let mut x199: u32 = 0;
    let mut x200: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x199, &mut x200, x198, x182, x179);
    let x201: u32 = ((x200 as u32) + x180);
    let mut x202: u32 = 0;
    let mut x203: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x202, &mut x203, 0x0, x165, x189);
    let mut x204: u32 = 0;
    let mut x205: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x204, &mut x205, x203, x167, x191);
    let mut x206: u32 = 0;
    let mut x207: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x206, &mut x207, x205, x169, x193);
    let mut x208: u32 = 0;
    let mut x209: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x208, &mut x209, x207, x171, x195);
    let mut x210: u32 = 0;
    let mut x211: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x210, &mut x211, x209, x173, x197);
    let mut x212: u32 = 0;
    let mut x213: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x212, &mut x213, x211, x175, x199);
    let mut x214: u32 = 0;
    let mut x215: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x214, &mut x215, x213, x177, x201);
    let x216: u32 = ((x215 as u32) + (x178 as u32));
    let mut x217: u32 = 0;
    let mut x218: u32 = 0;
    fiat_p192_mulx_u32(&mut x217, &mut x218, x3, (*IndexConst(arg1).index(5)));
    let mut x219: u32 = 0;
    let mut x220: u32 = 0;
    fiat_p192_mulx_u32(&mut x219, &mut x220, x3, (*IndexConst(arg1).index(4)));
    let mut x221: u32 = 0;
    let mut x222: u32 = 0;
    fiat_p192_mulx_u32(&mut x221, &mut x222, x3, (*IndexConst(arg1).index(3)));
    let mut x223: u32 = 0;
    let mut x224: u32 = 0;
    fiat_p192_mulx_u32(&mut x223, &mut x224, x3, (*IndexConst(arg1).index(2)));
    let mut x225: u32 = 0;
    let mut x226: u32 = 0;
    fiat_p192_mulx_u32(&mut x225, &mut x226, x3, (*IndexConst(arg1).index(1)));
    let mut x227: u32 = 0;
    let mut x228: u32 = 0;
    fiat_p192_mulx_u32(&mut x227, &mut x228, x3, (*IndexConst(arg1).index(0)));
    let mut x229: u32 = 0;
    let mut x230: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x229, &mut x230, 0x0, x228, x225);
    let mut x231: u32 = 0;
    let mut x232: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x231, &mut x232, x230, x226, x223);
    let mut x233: u32 = 0;
    let mut x234: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x233, &mut x234, x232, x224, x221);
    let mut x235: u32 = 0;
    let mut x236: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x235, &mut x236, x234, x222, x219);
    let mut x237: u32 = 0;
    let mut x238: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x237, &mut x238, x236, x220, x217);
    let x239: u32 = ((x238 as u32) + x218);
    let mut x240: u32 = 0;
    let mut x241: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x240, &mut x241, 0x0, x204, x227);
    let mut x242: u32 = 0;
    let mut x243: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x242, &mut x243, x241, x206, x229);
    let mut x244: u32 = 0;
    let mut x245: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x244, &mut x245, x243, x208, x231);
    let mut x246: u32 = 0;
    let mut x247: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x246, &mut x247, x245, x210, x233);
    let mut x248: u32 = 0;
    let mut x249: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x248, &mut x249, x247, x212, x235);
    let mut x250: u32 = 0;
    let mut x251: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x250, &mut x251, x249, x214, x237);
    let mut x252: u32 = 0;
    let mut x253: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x252, &mut x253, x251, x216, x239);
    let mut x254: u32 = 0;
    let mut x255: u32 = 0;
    fiat_p192_mulx_u32(&mut x254, &mut x255, x240, 0xffffffff);
    let mut x256: u32 = 0;
    let mut x257: u32 = 0;
    fiat_p192_mulx_u32(&mut x256, &mut x257, x240, 0xffffffff);
    let mut x258: u32 = 0;
    let mut x259: u32 = 0;
    fiat_p192_mulx_u32(&mut x258, &mut x259, x240, 0xffffffff);
    let mut x260: u32 = 0;
    let mut x261: u32 = 0;
    fiat_p192_mulx_u32(&mut x260, &mut x261, x240, 0xfffffffe);
    let mut x262: u32 = 0;
    let mut x263: u32 = 0;
    fiat_p192_mulx_u32(&mut x262, &mut x263, x240, 0xffffffff);
    let mut x264: u32 = 0;
    let mut x265: u32 = 0;
    fiat_p192_mulx_u32(&mut x264, &mut x265, x240, 0xffffffff);
    let mut x266: u32 = 0;
    let mut x267: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x266, &mut x267, 0x0, x265, x262);
    let mut x268: u32 = 0;
    let mut x269: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x268, &mut x269, x267, x263, x260);
    let mut x270: u32 = 0;
    let mut x271: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x270, &mut x271, x269, x261, x258);
    let mut x272: u32 = 0;
    let mut x273: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x272, &mut x273, x271, x259, x256);
    let mut x274: u32 = 0;
    let mut x275: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x274, &mut x275, x273, x257, x254);
    let x276: u32 = ((x275 as u32) + x255);
    let mut x277: u32 = 0;
    let mut x278: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x277, &mut x278, 0x0, x240, x264);
    let mut x279: u32 = 0;
    let mut x280: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x279, &mut x280, x278, x242, x266);
    let mut x281: u32 = 0;
    let mut x282: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x281, &mut x282, x280, x244, x268);
    let mut x283: u32 = 0;
    let mut x284: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x283, &mut x284, x282, x246, x270);
    let mut x285: u32 = 0;
    let mut x286: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x285, &mut x286, x284, x248, x272);
    let mut x287: u32 = 0;
    let mut x288: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x287, &mut x288, x286, x250, x274);
    let mut x289: u32 = 0;
    let mut x290: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x289, &mut x290, x288, x252, x276);
    let x291: u32 = ((x290 as u32) + (x253 as u32));
    let mut x292: u32 = 0;
    let mut x293: u32 = 0;
    fiat_p192_mulx_u32(&mut x292, &mut x293, x4, (*IndexConst(arg1).index(5)));
    let mut x294: u32 = 0;
    let mut x295: u32 = 0;
    fiat_p192_mulx_u32(&mut x294, &mut x295, x4, (*IndexConst(arg1).index(4)));
    let mut x296: u32 = 0;
    let mut x297: u32 = 0;
    fiat_p192_mulx_u32(&mut x296, &mut x297, x4, (*IndexConst(arg1).index(3)));
    let mut x298: u32 = 0;
    let mut x299: u32 = 0;
    fiat_p192_mulx_u32(&mut x298, &mut x299, x4, (*IndexConst(arg1).index(2)));
    let mut x300: u32 = 0;
    let mut x301: u32 = 0;
    fiat_p192_mulx_u32(&mut x300, &mut x301, x4, (*IndexConst(arg1).index(1)));
    let mut x302: u32 = 0;
    let mut x303: u32 = 0;
    fiat_p192_mulx_u32(&mut x302, &mut x303, x4, (*IndexConst(arg1).index(0)));
    let mut x304: u32 = 0;
    let mut x305: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x304, &mut x305, 0x0, x303, x300);
    let mut x306: u32 = 0;
    let mut x307: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x306, &mut x307, x305, x301, x298);
    let mut x308: u32 = 0;
    let mut x309: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x308, &mut x309, x307, x299, x296);
    let mut x310: u32 = 0;
    let mut x311: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x310, &mut x311, x309, x297, x294);
    let mut x312: u32 = 0;
    let mut x313: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x312, &mut x313, x311, x295, x292);
    let x314: u32 = ((x313 as u32) + x293);
    let mut x315: u32 = 0;
    let mut x316: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x315, &mut x316, 0x0, x279, x302);
    let mut x317: u32 = 0;
    let mut x318: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x317, &mut x318, x316, x281, x304);
    let mut x319: u32 = 0;
    let mut x320: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x319, &mut x320, x318, x283, x306);
    let mut x321: u32 = 0;
    let mut x322: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x321, &mut x322, x320, x285, x308);
    let mut x323: u32 = 0;
    let mut x324: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x323, &mut x324, x322, x287, x310);
    let mut x325: u32 = 0;
    let mut x326: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x325, &mut x326, x324, x289, x312);
    let mut x327: u32 = 0;
    let mut x328: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x327, &mut x328, x326, x291, x314);
    let mut x329: u32 = 0;
    let mut x330: u32 = 0;
    fiat_p192_mulx_u32(&mut x329, &mut x330, x315, 0xffffffff);
    let mut x331: u32 = 0;
    let mut x332: u32 = 0;
    fiat_p192_mulx_u32(&mut x331, &mut x332, x315, 0xffffffff);
    let mut x333: u32 = 0;
    let mut x334: u32 = 0;
    fiat_p192_mulx_u32(&mut x333, &mut x334, x315, 0xffffffff);
    let mut x335: u32 = 0;
    let mut x336: u32 = 0;
    fiat_p192_mulx_u32(&mut x335, &mut x336, x315, 0xfffffffe);
    let mut x337: u32 = 0;
    let mut x338: u32 = 0;
    fiat_p192_mulx_u32(&mut x337, &mut x338, x315, 0xffffffff);
    let mut x339: u32 = 0;
    let mut x340: u32 = 0;
    fiat_p192_mulx_u32(&mut x339, &mut x340, x315, 0xffffffff);
    let mut x341: u32 = 0;
    let mut x342: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x341, &mut x342, 0x0, x340, x337);
    let mut x343: u32 = 0;
    let mut x344: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x343, &mut x344, x342, x338, x335);
    let mut x345: u32 = 0;
    let mut x346: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x345, &mut x346, x344, x336, x333);
    let mut x347: u32 = 0;
    let mut x348: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x347, &mut x348, x346, x334, x331);
    let mut x349: u32 = 0;
    let mut x350: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x349, &mut x350, x348, x332, x329);
    let x351: u32 = ((x350 as u32) + x330);
    let mut x352: u32 = 0;
    let mut x353: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x352, &mut x353, 0x0, x315, x339);
    let mut x354: u32 = 0;
    let mut x355: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x354, &mut x355, x353, x317, x341);
    let mut x356: u32 = 0;
    let mut x357: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x356, &mut x357, x355, x319, x343);
    let mut x358: u32 = 0;
    let mut x359: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x358, &mut x359, x357, x321, x345);
    let mut x360: u32 = 0;
    let mut x361: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x360, &mut x361, x359, x323, x347);
    let mut x362: u32 = 0;
    let mut x363: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x362, &mut x363, x361, x325, x349);
    let mut x364: u32 = 0;
    let mut x365: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x364, &mut x365, x363, x327, x351);
    let x366: u32 = ((x365 as u32) + (x328 as u32));
    let mut x367: u32 = 0;
    let mut x368: u32 = 0;
    fiat_p192_mulx_u32(&mut x367, &mut x368, x5, (*IndexConst(arg1).index(5)));
    let mut x369: u32 = 0;
    let mut x370: u32 = 0;
    fiat_p192_mulx_u32(&mut x369, &mut x370, x5, (*IndexConst(arg1).index(4)));
    let mut x371: u32 = 0;
    let mut x372: u32 = 0;
    fiat_p192_mulx_u32(&mut x371, &mut x372, x5, (*IndexConst(arg1).index(3)));
    let mut x373: u32 = 0;
    let mut x374: u32 = 0;
    fiat_p192_mulx_u32(&mut x373, &mut x374, x5, (*IndexConst(arg1).index(2)));
    let mut x375: u32 = 0;
    let mut x376: u32 = 0;
    fiat_p192_mulx_u32(&mut x375, &mut x376, x5, (*IndexConst(arg1).index(1)));
    let mut x377: u32 = 0;
    let mut x378: u32 = 0;
    fiat_p192_mulx_u32(&mut x377, &mut x378, x5, (*IndexConst(arg1).index(0)));
    let mut x379: u32 = 0;
    let mut x380: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x379, &mut x380, 0x0, x378, x375);
    let mut x381: u32 = 0;
    let mut x382: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x381, &mut x382, x380, x376, x373);
    let mut x383: u32 = 0;
    let mut x384: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x383, &mut x384, x382, x374, x371);
    let mut x385: u32 = 0;
    let mut x386: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x385, &mut x386, x384, x372, x369);
    let mut x387: u32 = 0;
    let mut x388: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x387, &mut x388, x386, x370, x367);
    let x389: u32 = ((x388 as u32) + x368);
    let mut x390: u32 = 0;
    let mut x391: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x390, &mut x391, 0x0, x354, x377);
    let mut x392: u32 = 0;
    let mut x393: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x392, &mut x393, x391, x356, x379);
    let mut x394: u32 = 0;
    let mut x395: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x394, &mut x395, x393, x358, x381);
    let mut x396: u32 = 0;
    let mut x397: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x396, &mut x397, x395, x360, x383);
    let mut x398: u32 = 0;
    let mut x399: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x398, &mut x399, x397, x362, x385);
    let mut x400: u32 = 0;
    let mut x401: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x400, &mut x401, x399, x364, x387);
    let mut x402: u32 = 0;
    let mut x403: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x402, &mut x403, x401, x366, x389);
    let mut x404: u32 = 0;
    let mut x405: u32 = 0;
    fiat_p192_mulx_u32(&mut x404, &mut x405, x390, 0xffffffff);
    let mut x406: u32 = 0;
    let mut x407: u32 = 0;
    fiat_p192_mulx_u32(&mut x406, &mut x407, x390, 0xffffffff);
    let mut x408: u32 = 0;
    let mut x409: u32 = 0;
    fiat_p192_mulx_u32(&mut x408, &mut x409, x390, 0xffffffff);
    let mut x410: u32 = 0;
    let mut x411: u32 = 0;
    fiat_p192_mulx_u32(&mut x410, &mut x411, x390, 0xfffffffe);
    let mut x412: u32 = 0;
    let mut x413: u32 = 0;
    fiat_p192_mulx_u32(&mut x412, &mut x413, x390, 0xffffffff);
    let mut x414: u32 = 0;
    let mut x415: u32 = 0;
    fiat_p192_mulx_u32(&mut x414, &mut x415, x390, 0xffffffff);
    let mut x416: u32 = 0;
    let mut x417: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x416, &mut x417, 0x0, x415, x412);
    let mut x418: u32 = 0;
    let mut x419: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x418, &mut x419, x417, x413, x410);
    let mut x420: u32 = 0;
    let mut x421: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x420, &mut x421, x419, x411, x408);
    let mut x422: u32 = 0;
    let mut x423: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x422, &mut x423, x421, x409, x406);
    let mut x424: u32 = 0;
    let mut x425: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x424, &mut x425, x423, x407, x404);
    let x426: u32 = ((x425 as u32) + x405);
    let mut x427: u32 = 0;
    let mut x428: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x427, &mut x428, 0x0, x390, x414);
    let mut x429: u32 = 0;
    let mut x430: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x429, &mut x430, x428, x392, x416);
    let mut x431: u32 = 0;
    let mut x432: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x431, &mut x432, x430, x394, x418);
    let mut x433: u32 = 0;
    let mut x434: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x433, &mut x434, x432, x396, x420);
    let mut x435: u32 = 0;
    let mut x436: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x435, &mut x436, x434, x398, x422);
    let mut x437: u32 = 0;
    let mut x438: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x437, &mut x438, x436, x400, x424);
    let mut x439: u32 = 0;
    let mut x440: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x439, &mut x440, x438, x402, x426);
    let x441: u32 = ((x440 as u32) + (x403 as u32));
    let mut x442: u32 = 0;
    let mut x443: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x442, &mut x443, 0x0, x429, 0xffffffff);
    let mut x444: u32 = 0;
    let mut x445: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x444, &mut x445, x443, x431, 0xffffffff);
    let mut x446: u32 = 0;
    let mut x447: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x446, &mut x447, x445, x433, 0xfffffffe);
    let mut x448: u32 = 0;
    let mut x449: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x448, &mut x449, x447, x435, 0xffffffff);
    let mut x450: u32 = 0;
    let mut x451: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x450, &mut x451, x449, x437, 0xffffffff);
    let mut x452: u32 = 0;
    let mut x453: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x452, &mut x453, x451, x439, 0xffffffff);
    let mut x454: u32 = 0;
    let mut x455: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x454, &mut x455, x453, x441, (0x0 as u32));
    let mut x456: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x456, x455, x442, x429);
    let mut x457: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x457, x455, x444, x431);
    let mut x458: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x458, x455, x446, x433);
    let mut x459: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x459, x455, x448, x435);
    let mut x460: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x460, x455, x450, x437);
    let mut x461: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x461, x455, x452, x439);
    *IndexConst(&mut out1).index_mut(0) = x456;
    *IndexConst(&mut out1).index_mut(1) = x457;
    *IndexConst(&mut out1).index_mut(2) = x458;
    *IndexConst(&mut out1).index_mut(3) = x459;
    *IndexConst(&mut out1).index_mut(4) = x460;
    *IndexConst(&mut out1).index_mut(5) = x461;
}

/// The function fiat_p192_add adds two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_add(
    mut out1: &mut fiat_p192_montgomery_domain_field_element,
    arg1: &fiat_p192_montgomery_domain_field_element,
    arg2: &fiat_p192_montgomery_domain_field_element,
) {
    let mut x1: u32 = 0;
    let mut x2: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x1,
        &mut x2,
        0x0,
        (*IndexConst(arg1).index(0)),
        (*IndexConst(arg2).index(0)),
    );
    let mut x3: u32 = 0;
    let mut x4: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x3,
        &mut x4,
        x2,
        (*IndexConst(arg1).index(1)),
        (*IndexConst(arg2).index(1)),
    );
    let mut x5: u32 = 0;
    let mut x6: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x5,
        &mut x6,
        x4,
        (*IndexConst(arg1).index(2)),
        (*IndexConst(arg2).index(2)),
    );
    let mut x7: u32 = 0;
    let mut x8: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x7,
        &mut x8,
        x6,
        (*IndexConst(arg1).index(3)),
        (*IndexConst(arg2).index(3)),
    );
    let mut x9: u32 = 0;
    let mut x10: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x9,
        &mut x10,
        x8,
        (*IndexConst(arg1).index(4)),
        (*IndexConst(arg2).index(4)),
    );
    let mut x11: u32 = 0;
    let mut x12: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x11,
        &mut x12,
        x10,
        (*IndexConst(arg1).index(5)),
        (*IndexConst(arg2).index(5)),
    );
    let mut x13: u32 = 0;
    let mut x14: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x13, &mut x14, 0x0, x1, 0xffffffff);
    let mut x15: u32 = 0;
    let mut x16: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x15, &mut x16, x14, x3, 0xffffffff);
    let mut x17: u32 = 0;
    let mut x18: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x17, &mut x18, x16, x5, 0xfffffffe);
    let mut x19: u32 = 0;
    let mut x20: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x19, &mut x20, x18, x7, 0xffffffff);
    let mut x21: u32 = 0;
    let mut x22: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x21, &mut x22, x20, x9, 0xffffffff);
    let mut x23: u32 = 0;
    let mut x24: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x23, &mut x24, x22, x11, 0xffffffff);
    let mut x25: u32 = 0;
    let mut x26: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x25, &mut x26, x24, (x12 as u32), (0x0 as u32));
    let mut x27: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x27, x26, x13, x1);
    let mut x28: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x28, x26, x15, x3);
    let mut x29: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x29, x26, x17, x5);
    let mut x30: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x30, x26, x19, x7);
    let mut x31: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x31, x26, x21, x9);
    let mut x32: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x32, x26, x23, x11);
    *IndexConst(&mut out1).index_mut(0) = x27;
    *IndexConst(&mut out1).index_mut(1) = x28;
    *IndexConst(&mut out1).index_mut(2) = x29;
    *IndexConst(&mut out1).index_mut(3) = x30;
    *IndexConst(&mut out1).index_mut(4) = x31;
    *IndexConst(&mut out1).index_mut(5) = x32;
}

/// The function fiat_p192_sub subtracts two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_sub(
    mut out1: &mut fiat_p192_montgomery_domain_field_element,
    arg1: &fiat_p192_montgomery_domain_field_element,
    arg2: &fiat_p192_montgomery_domain_field_element,
) {
    let mut x1: u32 = 0;
    let mut x2: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x1,
        &mut x2,
        0x0,
        (*IndexConst(arg1).index(0)),
        (*IndexConst(arg2).index(0)),
    );
    let mut x3: u32 = 0;
    let mut x4: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x3,
        &mut x4,
        x2,
        (*IndexConst(arg1).index(1)),
        (*IndexConst(arg2).index(1)),
    );
    let mut x5: u32 = 0;
    let mut x6: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x5,
        &mut x6,
        x4,
        (*IndexConst(arg1).index(2)),
        (*IndexConst(arg2).index(2)),
    );
    let mut x7: u32 = 0;
    let mut x8: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x7,
        &mut x8,
        x6,
        (*IndexConst(arg1).index(3)),
        (*IndexConst(arg2).index(3)),
    );
    let mut x9: u32 = 0;
    let mut x10: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x9,
        &mut x10,
        x8,
        (*IndexConst(arg1).index(4)),
        (*IndexConst(arg2).index(4)),
    );
    let mut x11: u32 = 0;
    let mut x12: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x11,
        &mut x12,
        x10,
        (*IndexConst(arg1).index(5)),
        (*IndexConst(arg2).index(5)),
    );
    let mut x13: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x13, x12, (0x0 as u32), 0xffffffff);
    let mut x14: u32 = 0;
    let mut x15: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x14, &mut x15, 0x0, x1, x13);
    let mut x16: u32 = 0;
    let mut x17: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x16, &mut x17, x15, x3, x13);
    let mut x18: u32 = 0;
    let mut x19: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x18, &mut x19, x17, x5, (x13 & 0xfffffffe));
    let mut x20: u32 = 0;
    let mut x21: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x20, &mut x21, x19, x7, x13);
    let mut x22: u32 = 0;
    let mut x23: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x22, &mut x23, x21, x9, x13);
    let mut x24: u32 = 0;
    let mut x25: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x24, &mut x25, x23, x11, x13);
    *IndexConst(&mut out1).index_mut(0) = x14;
    *IndexConst(&mut out1).index_mut(1) = x16;
    *IndexConst(&mut out1).index_mut(2) = x18;
    *IndexConst(&mut out1).index_mut(3) = x20;
    *IndexConst(&mut out1).index_mut(4) = x22;
    *IndexConst(&mut out1).index_mut(5) = x24;
}

/// The function fiat_p192_opp negates a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_opp(
    mut out1: &mut fiat_p192_montgomery_domain_field_element,
    arg1: &fiat_p192_montgomery_domain_field_element,
) {
    let mut x1: u32 = 0;
    let mut x2: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x1,
        &mut x2,
        0x0,
        (0x0 as u32),
        (*IndexConst(arg1).index(0)),
    );
    let mut x3: u32 = 0;
    let mut x4: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x3,
        &mut x4,
        x2,
        (0x0 as u32),
        (*IndexConst(arg1).index(1)),
    );
    let mut x5: u32 = 0;
    let mut x6: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x5,
        &mut x6,
        x4,
        (0x0 as u32),
        (*IndexConst(arg1).index(2)),
    );
    let mut x7: u32 = 0;
    let mut x8: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x7,
        &mut x8,
        x6,
        (0x0 as u32),
        (*IndexConst(arg1).index(3)),
    );
    let mut x9: u32 = 0;
    let mut x10: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x9,
        &mut x10,
        x8,
        (0x0 as u32),
        (*IndexConst(arg1).index(4)),
    );
    let mut x11: u32 = 0;
    let mut x12: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(
        &mut x11,
        &mut x12,
        x10,
        (0x0 as u32),
        (*IndexConst(arg1).index(5)),
    );
    let mut x13: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x13, x12, (0x0 as u32), 0xffffffff);
    let mut x14: u32 = 0;
    let mut x15: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x14, &mut x15, 0x0, x1, x13);
    let mut x16: u32 = 0;
    let mut x17: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x16, &mut x17, x15, x3, x13);
    let mut x18: u32 = 0;
    let mut x19: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x18, &mut x19, x17, x5, (x13 & 0xfffffffe));
    let mut x20: u32 = 0;
    let mut x21: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x20, &mut x21, x19, x7, x13);
    let mut x22: u32 = 0;
    let mut x23: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x22, &mut x23, x21, x9, x13);
    let mut x24: u32 = 0;
    let mut x25: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x24, &mut x25, x23, x11, x13);
    *IndexConst(&mut out1).index_mut(0) = x14;
    *IndexConst(&mut out1).index_mut(1) = x16;
    *IndexConst(&mut out1).index_mut(2) = x18;
    *IndexConst(&mut out1).index_mut(3) = x20;
    *IndexConst(&mut out1).index_mut(4) = x22;
    *IndexConst(&mut out1).index_mut(5) = x24;
}

/// The function fiat_p192_from_montgomery translates a field element out of the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^6) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_from_montgomery(
    mut out1: &mut fiat_p192_non_montgomery_domain_field_element,
    arg1: &fiat_p192_montgomery_domain_field_element,
) {
    let x1: u32 = (*IndexConst(arg1).index(0));
    let mut x2: u32 = 0;
    let mut x3: u32 = 0;
    fiat_p192_mulx_u32(&mut x2, &mut x3, x1, 0xffffffff);
    let mut x4: u32 = 0;
    let mut x5: u32 = 0;
    fiat_p192_mulx_u32(&mut x4, &mut x5, x1, 0xffffffff);
    let mut x6: u32 = 0;
    let mut x7: u32 = 0;
    fiat_p192_mulx_u32(&mut x6, &mut x7, x1, 0xffffffff);
    let mut x8: u32 = 0;
    let mut x9: u32 = 0;
    fiat_p192_mulx_u32(&mut x8, &mut x9, x1, 0xfffffffe);
    let mut x10: u32 = 0;
    let mut x11: u32 = 0;
    fiat_p192_mulx_u32(&mut x10, &mut x11, x1, 0xffffffff);
    let mut x12: u32 = 0;
    let mut x13: u32 = 0;
    fiat_p192_mulx_u32(&mut x12, &mut x13, x1, 0xffffffff);
    let mut x14: u32 = 0;
    let mut x15: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x14, &mut x15, 0x0, x13, x10);
    let mut x16: u32 = 0;
    let mut x17: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x16, &mut x17, x15, x11, x8);
    let mut x18: u32 = 0;
    let mut x19: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x18, &mut x19, x17, x9, x6);
    let mut x20: u32 = 0;
    let mut x21: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x20, &mut x21, x19, x7, x4);
    let mut x22: u32 = 0;
    let mut x23: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x22, &mut x23, x21, x5, x2);
    let mut x24: u32 = 0;
    let mut x25: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x24, &mut x25, 0x0, x1, x12);
    let mut x26: u32 = 0;
    let mut x27: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x26, &mut x27, x25, (0x0 as u32), x14);
    let mut x28: u32 = 0;
    let mut x29: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x28, &mut x29, x27, (0x0 as u32), x16);
    let mut x30: u32 = 0;
    let mut x31: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x30, &mut x31, x29, (0x0 as u32), x18);
    let mut x32: u32 = 0;
    let mut x33: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x32, &mut x33, x31, (0x0 as u32), x20);
    let mut x34: u32 = 0;
    let mut x35: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x34, &mut x35, x33, (0x0 as u32), x22);
    let mut x36: u32 = 0;
    let mut x37: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x36, &mut x37, x35, (0x0 as u32), ((x23 as u32) + x3));
    let mut x38: u32 = 0;
    let mut x39: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x38, &mut x39, 0x0, x26, (*IndexConst(arg1).index(1)));
    let mut x40: u32 = 0;
    let mut x41: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x40, &mut x41, x39, x28, (0x0 as u32));
    let mut x42: u32 = 0;
    let mut x43: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x42, &mut x43, x41, x30, (0x0 as u32));
    let mut x44: u32 = 0;
    let mut x45: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x44, &mut x45, x43, x32, (0x0 as u32));
    let mut x46: u32 = 0;
    let mut x47: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x46, &mut x47, x45, x34, (0x0 as u32));
    let mut x48: u32 = 0;
    let mut x49: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x48, &mut x49, x47, x36, (0x0 as u32));
    let mut x50: u32 = 0;
    let mut x51: u32 = 0;
    fiat_p192_mulx_u32(&mut x50, &mut x51, x38, 0xffffffff);
    let mut x52: u32 = 0;
    let mut x53: u32 = 0;
    fiat_p192_mulx_u32(&mut x52, &mut x53, x38, 0xffffffff);
    let mut x54: u32 = 0;
    let mut x55: u32 = 0;
    fiat_p192_mulx_u32(&mut x54, &mut x55, x38, 0xffffffff);
    let mut x56: u32 = 0;
    let mut x57: u32 = 0;
    fiat_p192_mulx_u32(&mut x56, &mut x57, x38, 0xfffffffe);
    let mut x58: u32 = 0;
    let mut x59: u32 = 0;
    fiat_p192_mulx_u32(&mut x58, &mut x59, x38, 0xffffffff);
    let mut x60: u32 = 0;
    let mut x61: u32 = 0;
    fiat_p192_mulx_u32(&mut x60, &mut x61, x38, 0xffffffff);
    let mut x62: u32 = 0;
    let mut x63: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x62, &mut x63, 0x0, x61, x58);
    let mut x64: u32 = 0;
    let mut x65: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x64, &mut x65, x63, x59, x56);
    let mut x66: u32 = 0;
    let mut x67: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x66, &mut x67, x65, x57, x54);
    let mut x68: u32 = 0;
    let mut x69: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x68, &mut x69, x67, x55, x52);
    let mut x70: u32 = 0;
    let mut x71: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x70, &mut x71, x69, x53, x50);
    let mut x72: u32 = 0;
    let mut x73: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x72, &mut x73, 0x0, x38, x60);
    let mut x74: u32 = 0;
    let mut x75: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x74, &mut x75, x73, x40, x62);
    let mut x76: u32 = 0;
    let mut x77: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x76, &mut x77, x75, x42, x64);
    let mut x78: u32 = 0;
    let mut x79: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x78, &mut x79, x77, x44, x66);
    let mut x80: u32 = 0;
    let mut x81: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x80, &mut x81, x79, x46, x68);
    let mut x82: u32 = 0;
    let mut x83: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x82, &mut x83, x81, x48, x70);
    let mut x84: u32 = 0;
    let mut x85: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x84,
        &mut x85,
        x83,
        ((x49 as u32) + (x37 as u32)),
        ((x71 as u32) + x51),
    );
    let mut x86: u32 = 0;
    let mut x87: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x86, &mut x87, 0x0, x74, (*IndexConst(arg1).index(2)));
    let mut x88: u32 = 0;
    let mut x89: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x88, &mut x89, x87, x76, (0x0 as u32));
    let mut x90: u32 = 0;
    let mut x91: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x90, &mut x91, x89, x78, (0x0 as u32));
    let mut x92: u32 = 0;
    let mut x93: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x92, &mut x93, x91, x80, (0x0 as u32));
    let mut x94: u32 = 0;
    let mut x95: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x94, &mut x95, x93, x82, (0x0 as u32));
    let mut x96: u32 = 0;
    let mut x97: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x96, &mut x97, x95, x84, (0x0 as u32));
    let mut x98: u32 = 0;
    let mut x99: u32 = 0;
    fiat_p192_mulx_u32(&mut x98, &mut x99, x86, 0xffffffff);
    let mut x100: u32 = 0;
    let mut x101: u32 = 0;
    fiat_p192_mulx_u32(&mut x100, &mut x101, x86, 0xffffffff);
    let mut x102: u32 = 0;
    let mut x103: u32 = 0;
    fiat_p192_mulx_u32(&mut x102, &mut x103, x86, 0xffffffff);
    let mut x104: u32 = 0;
    let mut x105: u32 = 0;
    fiat_p192_mulx_u32(&mut x104, &mut x105, x86, 0xfffffffe);
    let mut x106: u32 = 0;
    let mut x107: u32 = 0;
    fiat_p192_mulx_u32(&mut x106, &mut x107, x86, 0xffffffff);
    let mut x108: u32 = 0;
    let mut x109: u32 = 0;
    fiat_p192_mulx_u32(&mut x108, &mut x109, x86, 0xffffffff);
    let mut x110: u32 = 0;
    let mut x111: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x110, &mut x111, 0x0, x109, x106);
    let mut x112: u32 = 0;
    let mut x113: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x112, &mut x113, x111, x107, x104);
    let mut x114: u32 = 0;
    let mut x115: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x114, &mut x115, x113, x105, x102);
    let mut x116: u32 = 0;
    let mut x117: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x116, &mut x117, x115, x103, x100);
    let mut x118: u32 = 0;
    let mut x119: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x118, &mut x119, x117, x101, x98);
    let mut x120: u32 = 0;
    let mut x121: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x120, &mut x121, 0x0, x86, x108);
    let mut x122: u32 = 0;
    let mut x123: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x122, &mut x123, x121, x88, x110);
    let mut x124: u32 = 0;
    let mut x125: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x124, &mut x125, x123, x90, x112);
    let mut x126: u32 = 0;
    let mut x127: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x126, &mut x127, x125, x92, x114);
    let mut x128: u32 = 0;
    let mut x129: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x128, &mut x129, x127, x94, x116);
    let mut x130: u32 = 0;
    let mut x131: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x130, &mut x131, x129, x96, x118);
    let mut x132: u32 = 0;
    let mut x133: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x132,
        &mut x133,
        x131,
        ((x97 as u32) + (x85 as u32)),
        ((x119 as u32) + x99),
    );
    let mut x134: u32 = 0;
    let mut x135: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x134,
        &mut x135,
        0x0,
        x122,
        (*IndexConst(arg1).index(3)),
    );
    let mut x136: u32 = 0;
    let mut x137: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x136, &mut x137, x135, x124, (0x0 as u32));
    let mut x138: u32 = 0;
    let mut x139: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x138, &mut x139, x137, x126, (0x0 as u32));
    let mut x140: u32 = 0;
    let mut x141: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x140, &mut x141, x139, x128, (0x0 as u32));
    let mut x142: u32 = 0;
    let mut x143: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x142, &mut x143, x141, x130, (0x0 as u32));
    let mut x144: u32 = 0;
    let mut x145: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x144, &mut x145, x143, x132, (0x0 as u32));
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    fiat_p192_mulx_u32(&mut x146, &mut x147, x134, 0xffffffff);
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    fiat_p192_mulx_u32(&mut x148, &mut x149, x134, 0xffffffff);
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    fiat_p192_mulx_u32(&mut x150, &mut x151, x134, 0xffffffff);
    let mut x152: u32 = 0;
    let mut x153: u32 = 0;
    fiat_p192_mulx_u32(&mut x152, &mut x153, x134, 0xfffffffe);
    let mut x154: u32 = 0;
    let mut x155: u32 = 0;
    fiat_p192_mulx_u32(&mut x154, &mut x155, x134, 0xffffffff);
    let mut x156: u32 = 0;
    let mut x157: u32 = 0;
    fiat_p192_mulx_u32(&mut x156, &mut x157, x134, 0xffffffff);
    let mut x158: u32 = 0;
    let mut x159: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x158, &mut x159, 0x0, x157, x154);
    let mut x160: u32 = 0;
    let mut x161: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x160, &mut x161, x159, x155, x152);
    let mut x162: u32 = 0;
    let mut x163: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x162, &mut x163, x161, x153, x150);
    let mut x164: u32 = 0;
    let mut x165: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x164, &mut x165, x163, x151, x148);
    let mut x166: u32 = 0;
    let mut x167: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x166, &mut x167, x165, x149, x146);
    let mut x168: u32 = 0;
    let mut x169: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x168, &mut x169, 0x0, x134, x156);
    let mut x170: u32 = 0;
    let mut x171: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x170, &mut x171, x169, x136, x158);
    let mut x172: u32 = 0;
    let mut x173: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x172, &mut x173, x171, x138, x160);
    let mut x174: u32 = 0;
    let mut x175: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x174, &mut x175, x173, x140, x162);
    let mut x176: u32 = 0;
    let mut x177: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x176, &mut x177, x175, x142, x164);
    let mut x178: u32 = 0;
    let mut x179: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x178, &mut x179, x177, x144, x166);
    let mut x180: u32 = 0;
    let mut x181: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x180,
        &mut x181,
        x179,
        ((x145 as u32) + (x133 as u32)),
        ((x167 as u32) + x147),
    );
    let mut x182: u32 = 0;
    let mut x183: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x182,
        &mut x183,
        0x0,
        x170,
        (*IndexConst(arg1).index(4)),
    );
    let mut x184: u32 = 0;
    let mut x185: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x184, &mut x185, x183, x172, (0x0 as u32));
    let mut x186: u32 = 0;
    let mut x187: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x186, &mut x187, x185, x174, (0x0 as u32));
    let mut x188: u32 = 0;
    let mut x189: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x188, &mut x189, x187, x176, (0x0 as u32));
    let mut x190: u32 = 0;
    let mut x191: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x190, &mut x191, x189, x178, (0x0 as u32));
    let mut x192: u32 = 0;
    let mut x193: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x192, &mut x193, x191, x180, (0x0 as u32));
    let mut x194: u32 = 0;
    let mut x195: u32 = 0;
    fiat_p192_mulx_u32(&mut x194, &mut x195, x182, 0xffffffff);
    let mut x196: u32 = 0;
    let mut x197: u32 = 0;
    fiat_p192_mulx_u32(&mut x196, &mut x197, x182, 0xffffffff);
    let mut x198: u32 = 0;
    let mut x199: u32 = 0;
    fiat_p192_mulx_u32(&mut x198, &mut x199, x182, 0xffffffff);
    let mut x200: u32 = 0;
    let mut x201: u32 = 0;
    fiat_p192_mulx_u32(&mut x200, &mut x201, x182, 0xfffffffe);
    let mut x202: u32 = 0;
    let mut x203: u32 = 0;
    fiat_p192_mulx_u32(&mut x202, &mut x203, x182, 0xffffffff);
    let mut x204: u32 = 0;
    let mut x205: u32 = 0;
    fiat_p192_mulx_u32(&mut x204, &mut x205, x182, 0xffffffff);
    let mut x206: u32 = 0;
    let mut x207: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x206, &mut x207, 0x0, x205, x202);
    let mut x208: u32 = 0;
    let mut x209: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x208, &mut x209, x207, x203, x200);
    let mut x210: u32 = 0;
    let mut x211: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x210, &mut x211, x209, x201, x198);
    let mut x212: u32 = 0;
    let mut x213: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x212, &mut x213, x211, x199, x196);
    let mut x214: u32 = 0;
    let mut x215: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x214, &mut x215, x213, x197, x194);
    let mut x216: u32 = 0;
    let mut x217: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x216, &mut x217, 0x0, x182, x204);
    let mut x218: u32 = 0;
    let mut x219: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x218, &mut x219, x217, x184, x206);
    let mut x220: u32 = 0;
    let mut x221: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x220, &mut x221, x219, x186, x208);
    let mut x222: u32 = 0;
    let mut x223: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x222, &mut x223, x221, x188, x210);
    let mut x224: u32 = 0;
    let mut x225: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x224, &mut x225, x223, x190, x212);
    let mut x226: u32 = 0;
    let mut x227: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x226, &mut x227, x225, x192, x214);
    let mut x228: u32 = 0;
    let mut x229: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x228,
        &mut x229,
        x227,
        ((x193 as u32) + (x181 as u32)),
        ((x215 as u32) + x195),
    );
    let mut x230: u32 = 0;
    let mut x231: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x230,
        &mut x231,
        0x0,
        x218,
        (*IndexConst(arg1).index(5)),
    );
    let mut x232: u32 = 0;
    let mut x233: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x232, &mut x233, x231, x220, (0x0 as u32));
    let mut x234: u32 = 0;
    let mut x235: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x234, &mut x235, x233, x222, (0x0 as u32));
    let mut x236: u32 = 0;
    let mut x237: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x236, &mut x237, x235, x224, (0x0 as u32));
    let mut x238: u32 = 0;
    let mut x239: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x238, &mut x239, x237, x226, (0x0 as u32));
    let mut x240: u32 = 0;
    let mut x241: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x240, &mut x241, x239, x228, (0x0 as u32));
    let mut x242: u32 = 0;
    let mut x243: u32 = 0;
    fiat_p192_mulx_u32(&mut x242, &mut x243, x230, 0xffffffff);
    let mut x244: u32 = 0;
    let mut x245: u32 = 0;
    fiat_p192_mulx_u32(&mut x244, &mut x245, x230, 0xffffffff);
    let mut x246: u32 = 0;
    let mut x247: u32 = 0;
    fiat_p192_mulx_u32(&mut x246, &mut x247, x230, 0xffffffff);
    let mut x248: u32 = 0;
    let mut x249: u32 = 0;
    fiat_p192_mulx_u32(&mut x248, &mut x249, x230, 0xfffffffe);
    let mut x250: u32 = 0;
    let mut x251: u32 = 0;
    fiat_p192_mulx_u32(&mut x250, &mut x251, x230, 0xffffffff);
    let mut x252: u32 = 0;
    let mut x253: u32 = 0;
    fiat_p192_mulx_u32(&mut x252, &mut x253, x230, 0xffffffff);
    let mut x254: u32 = 0;
    let mut x255: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x254, &mut x255, 0x0, x253, x250);
    let mut x256: u32 = 0;
    let mut x257: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x256, &mut x257, x255, x251, x248);
    let mut x258: u32 = 0;
    let mut x259: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x258, &mut x259, x257, x249, x246);
    let mut x260: u32 = 0;
    let mut x261: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x260, &mut x261, x259, x247, x244);
    let mut x262: u32 = 0;
    let mut x263: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x262, &mut x263, x261, x245, x242);
    let mut x264: u32 = 0;
    let mut x265: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x264, &mut x265, 0x0, x230, x252);
    let mut x266: u32 = 0;
    let mut x267: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x266, &mut x267, x265, x232, x254);
    let mut x268: u32 = 0;
    let mut x269: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x268, &mut x269, x267, x234, x256);
    let mut x270: u32 = 0;
    let mut x271: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x270, &mut x271, x269, x236, x258);
    let mut x272: u32 = 0;
    let mut x273: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x272, &mut x273, x271, x238, x260);
    let mut x274: u32 = 0;
    let mut x275: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x274, &mut x275, x273, x240, x262);
    let mut x276: u32 = 0;
    let mut x277: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x276,
        &mut x277,
        x275,
        ((x241 as u32) + (x229 as u32)),
        ((x263 as u32) + x243),
    );
    let mut x278: u32 = 0;
    let mut x279: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x278, &mut x279, 0x0, x266, 0xffffffff);
    let mut x280: u32 = 0;
    let mut x281: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x280, &mut x281, x279, x268, 0xffffffff);
    let mut x282: u32 = 0;
    let mut x283: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x282, &mut x283, x281, x270, 0xfffffffe);
    let mut x284: u32 = 0;
    let mut x285: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x284, &mut x285, x283, x272, 0xffffffff);
    let mut x286: u32 = 0;
    let mut x287: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x286, &mut x287, x285, x274, 0xffffffff);
    let mut x288: u32 = 0;
    let mut x289: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x288, &mut x289, x287, x276, 0xffffffff);
    let mut x290: u32 = 0;
    let mut x291: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x290, &mut x291, x289, (x277 as u32), (0x0 as u32));
    let mut x292: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x292, x291, x278, x266);
    let mut x293: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x293, x291, x280, x268);
    let mut x294: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x294, x291, x282, x270);
    let mut x295: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x295, x291, x284, x272);
    let mut x296: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x296, x291, x286, x274);
    let mut x297: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x297, x291, x288, x276);
    *IndexConst(&mut out1).index_mut(0) = x292;
    *IndexConst(&mut out1).index_mut(1) = x293;
    *IndexConst(&mut out1).index_mut(2) = x294;
    *IndexConst(&mut out1).index_mut(3) = x295;
    *IndexConst(&mut out1).index_mut(4) = x296;
    *IndexConst(&mut out1).index_mut(5) = x297;
}

/// The function fiat_p192_to_montgomery translates a field element into the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = eval arg1 mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_to_montgomery(
    mut out1: &mut fiat_p192_montgomery_domain_field_element,
    arg1: &fiat_p192_non_montgomery_domain_field_element,
) {
    let x1: u32 = (*IndexConst(arg1).index(1));
    let x2: u32 = (*IndexConst(arg1).index(2));
    let x3: u32 = (*IndexConst(arg1).index(3));
    let x4: u32 = (*IndexConst(arg1).index(4));
    let x5: u32 = (*IndexConst(arg1).index(5));
    let x6: u32 = (*IndexConst(arg1).index(0));
    let mut x7: u32 = 0;
    let mut x8: u32 = 0;
    fiat_p192_mulx_u32(&mut x7, &mut x8, x6, 0x2);
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    fiat_p192_mulx_u32(&mut x9, &mut x10, x6, 0xffffffff);
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    fiat_p192_mulx_u32(&mut x11, &mut x12, x6, 0xffffffff);
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    fiat_p192_mulx_u32(&mut x13, &mut x14, x6, 0xffffffff);
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    fiat_p192_mulx_u32(&mut x15, &mut x16, x6, 0xfffffffe);
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    fiat_p192_mulx_u32(&mut x17, &mut x18, x6, 0xffffffff);
    let mut x19: u32 = 0;
    let mut x20: u32 = 0;
    fiat_p192_mulx_u32(&mut x19, &mut x20, x6, 0xffffffff);
    let mut x21: u32 = 0;
    let mut x22: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x21, &mut x22, 0x0, x20, x17);
    let mut x23: u32 = 0;
    let mut x24: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x23, &mut x24, x22, x18, x15);
    let mut x25: u32 = 0;
    let mut x26: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x25, &mut x26, x24, x16, x13);
    let mut x27: u32 = 0;
    let mut x28: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x27, &mut x28, x26, x14, x11);
    let mut x29: u32 = 0;
    let mut x30: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x29, &mut x30, x28, x12, x9);
    let mut x31: u32 = 0;
    let mut x32: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x31, &mut x32, 0x0, x6, x19);
    let mut x33: u32 = 0;
    let mut x34: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x33, &mut x34, x32, (0x0 as u32), x21);
    let mut x35: u32 = 0;
    let mut x36: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x35, &mut x36, x34, x7, x23);
    let mut x37: u32 = 0;
    let mut x38: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x37, &mut x38, x36, ((x8 as fiat_p192_u1) as u32), x25);
    let mut x39: u32 = 0;
    let mut x40: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x39, &mut x40, x38, x6, x27);
    let mut x41: u32 = 0;
    let mut x42: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x41, &mut x42, x40, (0x0 as u32), x29);
    let mut x43: u32 = 0;
    let mut x44: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x43, &mut x44, x42, (0x0 as u32), ((x30 as u32) + x10));
    let mut x45: u32 = 0;
    let mut x46: u32 = 0;
    fiat_p192_mulx_u32(&mut x45, &mut x46, x1, 0x2);
    let mut x47: u32 = 0;
    let mut x48: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x47, &mut x48, 0x0, x33, x1);
    let mut x49: u32 = 0;
    let mut x50: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x49, &mut x50, x48, x35, (0x0 as u32));
    let mut x51: u32 = 0;
    let mut x52: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x51, &mut x52, x50, x37, x45);
    let mut x53: u32 = 0;
    let mut x54: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x53, &mut x54, x52, x39, ((x46 as fiat_p192_u1) as u32));
    let mut x55: u32 = 0;
    let mut x56: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x55, &mut x56, x54, x41, x1);
    let mut x57: u32 = 0;
    let mut x58: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x57, &mut x58, x56, x43, (0x0 as u32));
    let mut x59: u32 = 0;
    let mut x60: u32 = 0;
    fiat_p192_mulx_u32(&mut x59, &mut x60, x47, 0xffffffff);
    let mut x61: u32 = 0;
    let mut x62: u32 = 0;
    fiat_p192_mulx_u32(&mut x61, &mut x62, x47, 0xffffffff);
    let mut x63: u32 = 0;
    let mut x64: u32 = 0;
    fiat_p192_mulx_u32(&mut x63, &mut x64, x47, 0xffffffff);
    let mut x65: u32 = 0;
    let mut x66: u32 = 0;
    fiat_p192_mulx_u32(&mut x65, &mut x66, x47, 0xfffffffe);
    let mut x67: u32 = 0;
    let mut x68: u32 = 0;
    fiat_p192_mulx_u32(&mut x67, &mut x68, x47, 0xffffffff);
    let mut x69: u32 = 0;
    let mut x70: u32 = 0;
    fiat_p192_mulx_u32(&mut x69, &mut x70, x47, 0xffffffff);
    let mut x71: u32 = 0;
    let mut x72: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x71, &mut x72, 0x0, x70, x67);
    let mut x73: u32 = 0;
    let mut x74: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x73, &mut x74, x72, x68, x65);
    let mut x75: u32 = 0;
    let mut x76: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x75, &mut x76, x74, x66, x63);
    let mut x77: u32 = 0;
    let mut x78: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x77, &mut x78, x76, x64, x61);
    let mut x79: u32 = 0;
    let mut x80: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x79, &mut x80, x78, x62, x59);
    let mut x81: u32 = 0;
    let mut x82: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x81, &mut x82, 0x0, x47, x69);
    let mut x83: u32 = 0;
    let mut x84: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x83, &mut x84, x82, x49, x71);
    let mut x85: u32 = 0;
    let mut x86: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x85, &mut x86, x84, x51, x73);
    let mut x87: u32 = 0;
    let mut x88: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x87, &mut x88, x86, x53, x75);
    let mut x89: u32 = 0;
    let mut x90: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x89, &mut x90, x88, x55, x77);
    let mut x91: u32 = 0;
    let mut x92: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x91, &mut x92, x90, x57, x79);
    let mut x93: u32 = 0;
    let mut x94: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x93,
        &mut x94,
        x92,
        ((x58 as u32) + (x44 as u32)),
        ((x80 as u32) + x60),
    );
    let mut x95: u32 = 0;
    let mut x96: u32 = 0;
    fiat_p192_mulx_u32(&mut x95, &mut x96, x2, 0x2);
    let mut x97: u32 = 0;
    let mut x98: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x97, &mut x98, 0x0, x83, x2);
    let mut x99: u32 = 0;
    let mut x100: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x99, &mut x100, x98, x85, (0x0 as u32));
    let mut x101: u32 = 0;
    let mut x102: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x101, &mut x102, x100, x87, x95);
    let mut x103: u32 = 0;
    let mut x104: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x103,
        &mut x104,
        x102,
        x89,
        ((x96 as fiat_p192_u1) as u32),
    );
    let mut x105: u32 = 0;
    let mut x106: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x105, &mut x106, x104, x91, x2);
    let mut x107: u32 = 0;
    let mut x108: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x107, &mut x108, x106, x93, (0x0 as u32));
    let mut x109: u32 = 0;
    let mut x110: u32 = 0;
    fiat_p192_mulx_u32(&mut x109, &mut x110, x97, 0xffffffff);
    let mut x111: u32 = 0;
    let mut x112: u32 = 0;
    fiat_p192_mulx_u32(&mut x111, &mut x112, x97, 0xffffffff);
    let mut x113: u32 = 0;
    let mut x114: u32 = 0;
    fiat_p192_mulx_u32(&mut x113, &mut x114, x97, 0xffffffff);
    let mut x115: u32 = 0;
    let mut x116: u32 = 0;
    fiat_p192_mulx_u32(&mut x115, &mut x116, x97, 0xfffffffe);
    let mut x117: u32 = 0;
    let mut x118: u32 = 0;
    fiat_p192_mulx_u32(&mut x117, &mut x118, x97, 0xffffffff);
    let mut x119: u32 = 0;
    let mut x120: u32 = 0;
    fiat_p192_mulx_u32(&mut x119, &mut x120, x97, 0xffffffff);
    let mut x121: u32 = 0;
    let mut x122: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x121, &mut x122, 0x0, x120, x117);
    let mut x123: u32 = 0;
    let mut x124: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x123, &mut x124, x122, x118, x115);
    let mut x125: u32 = 0;
    let mut x126: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x125, &mut x126, x124, x116, x113);
    let mut x127: u32 = 0;
    let mut x128: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x127, &mut x128, x126, x114, x111);
    let mut x129: u32 = 0;
    let mut x130: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x129, &mut x130, x128, x112, x109);
    let mut x131: u32 = 0;
    let mut x132: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x131, &mut x132, 0x0, x97, x119);
    let mut x133: u32 = 0;
    let mut x134: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x133, &mut x134, x132, x99, x121);
    let mut x135: u32 = 0;
    let mut x136: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x135, &mut x136, x134, x101, x123);
    let mut x137: u32 = 0;
    let mut x138: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x137, &mut x138, x136, x103, x125);
    let mut x139: u32 = 0;
    let mut x140: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x139, &mut x140, x138, x105, x127);
    let mut x141: u32 = 0;
    let mut x142: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x141, &mut x142, x140, x107, x129);
    let mut x143: u32 = 0;
    let mut x144: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x143,
        &mut x144,
        x142,
        ((x108 as u32) + (x94 as u32)),
        ((x130 as u32) + x110),
    );
    let mut x145: u32 = 0;
    let mut x146: u32 = 0;
    fiat_p192_mulx_u32(&mut x145, &mut x146, x3, 0x2);
    let mut x147: u32 = 0;
    let mut x148: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x147, &mut x148, 0x0, x133, x3);
    let mut x149: u32 = 0;
    let mut x150: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x149, &mut x150, x148, x135, (0x0 as u32));
    let mut x151: u32 = 0;
    let mut x152: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x151, &mut x152, x150, x137, x145);
    let mut x153: u32 = 0;
    let mut x154: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x153,
        &mut x154,
        x152,
        x139,
        ((x146 as fiat_p192_u1) as u32),
    );
    let mut x155: u32 = 0;
    let mut x156: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x155, &mut x156, x154, x141, x3);
    let mut x157: u32 = 0;
    let mut x158: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x157, &mut x158, x156, x143, (0x0 as u32));
    let mut x159: u32 = 0;
    let mut x160: u32 = 0;
    fiat_p192_mulx_u32(&mut x159, &mut x160, x147, 0xffffffff);
    let mut x161: u32 = 0;
    let mut x162: u32 = 0;
    fiat_p192_mulx_u32(&mut x161, &mut x162, x147, 0xffffffff);
    let mut x163: u32 = 0;
    let mut x164: u32 = 0;
    fiat_p192_mulx_u32(&mut x163, &mut x164, x147, 0xffffffff);
    let mut x165: u32 = 0;
    let mut x166: u32 = 0;
    fiat_p192_mulx_u32(&mut x165, &mut x166, x147, 0xfffffffe);
    let mut x167: u32 = 0;
    let mut x168: u32 = 0;
    fiat_p192_mulx_u32(&mut x167, &mut x168, x147, 0xffffffff);
    let mut x169: u32 = 0;
    let mut x170: u32 = 0;
    fiat_p192_mulx_u32(&mut x169, &mut x170, x147, 0xffffffff);
    let mut x171: u32 = 0;
    let mut x172: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x171, &mut x172, 0x0, x170, x167);
    let mut x173: u32 = 0;
    let mut x174: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x173, &mut x174, x172, x168, x165);
    let mut x175: u32 = 0;
    let mut x176: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x175, &mut x176, x174, x166, x163);
    let mut x177: u32 = 0;
    let mut x178: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x177, &mut x178, x176, x164, x161);
    let mut x179: u32 = 0;
    let mut x180: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x179, &mut x180, x178, x162, x159);
    let mut x181: u32 = 0;
    let mut x182: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x181, &mut x182, 0x0, x147, x169);
    let mut x183: u32 = 0;
    let mut x184: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x183, &mut x184, x182, x149, x171);
    let mut x185: u32 = 0;
    let mut x186: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x185, &mut x186, x184, x151, x173);
    let mut x187: u32 = 0;
    let mut x188: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x187, &mut x188, x186, x153, x175);
    let mut x189: u32 = 0;
    let mut x190: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x189, &mut x190, x188, x155, x177);
    let mut x191: u32 = 0;
    let mut x192: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x191, &mut x192, x190, x157, x179);
    let mut x193: u32 = 0;
    let mut x194: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x193,
        &mut x194,
        x192,
        ((x158 as u32) + (x144 as u32)),
        ((x180 as u32) + x160),
    );
    let mut x195: u32 = 0;
    let mut x196: u32 = 0;
    fiat_p192_mulx_u32(&mut x195, &mut x196, x4, 0x2);
    let mut x197: u32 = 0;
    let mut x198: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x197, &mut x198, 0x0, x183, x4);
    let mut x199: u32 = 0;
    let mut x200: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x199, &mut x200, x198, x185, (0x0 as u32));
    let mut x201: u32 = 0;
    let mut x202: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x201, &mut x202, x200, x187, x195);
    let mut x203: u32 = 0;
    let mut x204: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x203,
        &mut x204,
        x202,
        x189,
        ((x196 as fiat_p192_u1) as u32),
    );
    let mut x205: u32 = 0;
    let mut x206: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x205, &mut x206, x204, x191, x4);
    let mut x207: u32 = 0;
    let mut x208: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x207, &mut x208, x206, x193, (0x0 as u32));
    let mut x209: u32 = 0;
    let mut x210: u32 = 0;
    fiat_p192_mulx_u32(&mut x209, &mut x210, x197, 0xffffffff);
    let mut x211: u32 = 0;
    let mut x212: u32 = 0;
    fiat_p192_mulx_u32(&mut x211, &mut x212, x197, 0xffffffff);
    let mut x213: u32 = 0;
    let mut x214: u32 = 0;
    fiat_p192_mulx_u32(&mut x213, &mut x214, x197, 0xffffffff);
    let mut x215: u32 = 0;
    let mut x216: u32 = 0;
    fiat_p192_mulx_u32(&mut x215, &mut x216, x197, 0xfffffffe);
    let mut x217: u32 = 0;
    let mut x218: u32 = 0;
    fiat_p192_mulx_u32(&mut x217, &mut x218, x197, 0xffffffff);
    let mut x219: u32 = 0;
    let mut x220: u32 = 0;
    fiat_p192_mulx_u32(&mut x219, &mut x220, x197, 0xffffffff);
    let mut x221: u32 = 0;
    let mut x222: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x221, &mut x222, 0x0, x220, x217);
    let mut x223: u32 = 0;
    let mut x224: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x223, &mut x224, x222, x218, x215);
    let mut x225: u32 = 0;
    let mut x226: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x225, &mut x226, x224, x216, x213);
    let mut x227: u32 = 0;
    let mut x228: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x227, &mut x228, x226, x214, x211);
    let mut x229: u32 = 0;
    let mut x230: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x229, &mut x230, x228, x212, x209);
    let mut x231: u32 = 0;
    let mut x232: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x231, &mut x232, 0x0, x197, x219);
    let mut x233: u32 = 0;
    let mut x234: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x233, &mut x234, x232, x199, x221);
    let mut x235: u32 = 0;
    let mut x236: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x235, &mut x236, x234, x201, x223);
    let mut x237: u32 = 0;
    let mut x238: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x237, &mut x238, x236, x203, x225);
    let mut x239: u32 = 0;
    let mut x240: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x239, &mut x240, x238, x205, x227);
    let mut x241: u32 = 0;
    let mut x242: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x241, &mut x242, x240, x207, x229);
    let mut x243: u32 = 0;
    let mut x244: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x243,
        &mut x244,
        x242,
        ((x208 as u32) + (x194 as u32)),
        ((x230 as u32) + x210),
    );
    let mut x245: u32 = 0;
    let mut x246: u32 = 0;
    fiat_p192_mulx_u32(&mut x245, &mut x246, x5, 0x2);
    let mut x247: u32 = 0;
    let mut x248: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x247, &mut x248, 0x0, x233, x5);
    let mut x249: u32 = 0;
    let mut x250: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x249, &mut x250, x248, x235, (0x0 as u32));
    let mut x251: u32 = 0;
    let mut x252: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x251, &mut x252, x250, x237, x245);
    let mut x253: u32 = 0;
    let mut x254: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x253,
        &mut x254,
        x252,
        x239,
        ((x246 as fiat_p192_u1) as u32),
    );
    let mut x255: u32 = 0;
    let mut x256: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x255, &mut x256, x254, x241, x5);
    let mut x257: u32 = 0;
    let mut x258: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x257, &mut x258, x256, x243, (0x0 as u32));
    let mut x259: u32 = 0;
    let mut x260: u32 = 0;
    fiat_p192_mulx_u32(&mut x259, &mut x260, x247, 0xffffffff);
    let mut x261: u32 = 0;
    let mut x262: u32 = 0;
    fiat_p192_mulx_u32(&mut x261, &mut x262, x247, 0xffffffff);
    let mut x263: u32 = 0;
    let mut x264: u32 = 0;
    fiat_p192_mulx_u32(&mut x263, &mut x264, x247, 0xffffffff);
    let mut x265: u32 = 0;
    let mut x266: u32 = 0;
    fiat_p192_mulx_u32(&mut x265, &mut x266, x247, 0xfffffffe);
    let mut x267: u32 = 0;
    let mut x268: u32 = 0;
    fiat_p192_mulx_u32(&mut x267, &mut x268, x247, 0xffffffff);
    let mut x269: u32 = 0;
    let mut x270: u32 = 0;
    fiat_p192_mulx_u32(&mut x269, &mut x270, x247, 0xffffffff);
    let mut x271: u32 = 0;
    let mut x272: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x271, &mut x272, 0x0, x270, x267);
    let mut x273: u32 = 0;
    let mut x274: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x273, &mut x274, x272, x268, x265);
    let mut x275: u32 = 0;
    let mut x276: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x275, &mut x276, x274, x266, x263);
    let mut x277: u32 = 0;
    let mut x278: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x277, &mut x278, x276, x264, x261);
    let mut x279: u32 = 0;
    let mut x280: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x279, &mut x280, x278, x262, x259);
    let mut x281: u32 = 0;
    let mut x282: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x281, &mut x282, 0x0, x247, x269);
    let mut x283: u32 = 0;
    let mut x284: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x283, &mut x284, x282, x249, x271);
    let mut x285: u32 = 0;
    let mut x286: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x285, &mut x286, x284, x251, x273);
    let mut x287: u32 = 0;
    let mut x288: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x287, &mut x288, x286, x253, x275);
    let mut x289: u32 = 0;
    let mut x290: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x289, &mut x290, x288, x255, x277);
    let mut x291: u32 = 0;
    let mut x292: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x291, &mut x292, x290, x257, x279);
    let mut x293: u32 = 0;
    let mut x294: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x293,
        &mut x294,
        x292,
        ((x258 as u32) + (x244 as u32)),
        ((x280 as u32) + x260),
    );
    let mut x295: u32 = 0;
    let mut x296: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x295, &mut x296, 0x0, x283, 0xffffffff);
    let mut x297: u32 = 0;
    let mut x298: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x297, &mut x298, x296, x285, 0xffffffff);
    let mut x299: u32 = 0;
    let mut x300: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x299, &mut x300, x298, x287, 0xfffffffe);
    let mut x301: u32 = 0;
    let mut x302: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x301, &mut x302, x300, x289, 0xffffffff);
    let mut x303: u32 = 0;
    let mut x304: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x303, &mut x304, x302, x291, 0xffffffff);
    let mut x305: u32 = 0;
    let mut x306: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x305, &mut x306, x304, x293, 0xffffffff);
    let mut x307: u32 = 0;
    let mut x308: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x307, &mut x308, x306, (x294 as u32), (0x0 as u32));
    let mut x309: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x309, x308, x295, x283);
    let mut x310: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x310, x308, x297, x285);
    let mut x311: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x311, x308, x299, x287);
    let mut x312: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x312, x308, x301, x289);
    let mut x313: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x313, x308, x303, x291);
    let mut x314: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x314, x308, x305, x293);
    *IndexConst(&mut out1).index_mut(0) = x309;
    *IndexConst(&mut out1).index_mut(1) = x310;
    *IndexConst(&mut out1).index_mut(2) = x311;
    *IndexConst(&mut out1).index_mut(3) = x312;
    *IndexConst(&mut out1).index_mut(4) = x313;
    *IndexConst(&mut out1).index_mut(5) = x314;
}

/// The function fiat_p192_selectznz is a multi-limb conditional select.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub const fn fiat_p192_selectznz(
    mut out1: &mut [u32; 6],
    arg1: fiat_p192_u1,
    arg2: &[u32; 6],
    arg3: &[u32; 6],
) {
    let mut x1: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x1,
        arg1,
        (*IndexConst(arg2).index(0)),
        (*IndexConst(arg3).index(0)),
    );
    let mut x2: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x2,
        arg1,
        (*IndexConst(arg2).index(1)),
        (*IndexConst(arg3).index(1)),
    );
    let mut x3: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x3,
        arg1,
        (*IndexConst(arg2).index(2)),
        (*IndexConst(arg3).index(2)),
    );
    let mut x4: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x4,
        arg1,
        (*IndexConst(arg2).index(3)),
        (*IndexConst(arg3).index(3)),
    );
    let mut x5: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x5,
        arg1,
        (*IndexConst(arg2).index(4)),
        (*IndexConst(arg3).index(4)),
    );
    let mut x6: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x6,
        arg1,
        (*IndexConst(arg2).index(5)),
        (*IndexConst(arg3).index(5)),
    );
    *IndexConst(&mut out1).index_mut(0) = x1;
    *IndexConst(&mut out1).index_mut(1) = x2;
    *IndexConst(&mut out1).index_mut(2) = x3;
    *IndexConst(&mut out1).index_mut(3) = x4;
    *IndexConst(&mut out1).index_mut(4) = x5;
    *IndexConst(&mut out1).index_mut(5) = x6;
}

/// The function fiat_p192_msat returns the saturated representation of the prime modulus.
///
/// Postconditions:
///   twos_complement_eval out1 = m
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub const fn fiat_p192_msat(mut out1: &mut [u32; 7]) {
    *IndexConst(&mut out1).index_mut(0) = 0xffffffff;
    *IndexConst(&mut out1).index_mut(1) = 0xffffffff;
    *IndexConst(&mut out1).index_mut(2) = 0xfffffffe;
    *IndexConst(&mut out1).index_mut(3) = 0xffffffff;
    *IndexConst(&mut out1).index_mut(4) = 0xffffffff;
    *IndexConst(&mut out1).index_mut(5) = 0xffffffff;
    *IndexConst(&mut out1).index_mut(6) = (0x0 as u32);
}

/// The function fiat_p192_divstep computes a divstep.
///
/// Preconditions:
///   0 ≤ eval arg4 < m
///   0 ≤ eval arg5 < m
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
///   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
///   0 ≤ eval out5 < m
///   0 ≤ eval out5 < m
///   0 ≤ eval out2 < m
///   0 ≤ eval out3 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub const fn fiat_p192_divstep(
    out1: &mut u32,
    mut out2: &mut [u32; 7],
    mut out3: &mut [u32; 7],
    mut out4: &mut [u32; 6],
    mut out5: &mut [u32; 6],
    arg1: u32,
    arg2: &[u32; 7],
    arg3: &[u32; 7],
    arg4: &[u32; 6],
    arg5: &[u32; 6],
) {
    let mut x1: u32 = 0;
    let mut x2: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x1, &mut x2, 0x0, (!arg1), (0x1 as u32));
    let x3: fiat_p192_u1 = (((x1 >> 31) as fiat_p192_u1)
        & (((*IndexConst(arg3).index(0)) & (0x1 as u32)) as fiat_p192_u1));
    let mut x4: u32 = 0;
    let mut x5: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x4, &mut x5, 0x0, (!arg1), (0x1 as u32));
    let mut x6: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x6, x3, arg1, x4);
    let mut x7: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x7,
        x3,
        (*IndexConst(arg2).index(0)),
        (*IndexConst(arg3).index(0)),
    );
    let mut x8: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x8,
        x3,
        (*IndexConst(arg2).index(1)),
        (*IndexConst(arg3).index(1)),
    );
    let mut x9: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x9,
        x3,
        (*IndexConst(arg2).index(2)),
        (*IndexConst(arg3).index(2)),
    );
    let mut x10: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x10,
        x3,
        (*IndexConst(arg2).index(3)),
        (*IndexConst(arg3).index(3)),
    );
    let mut x11: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x11,
        x3,
        (*IndexConst(arg2).index(4)),
        (*IndexConst(arg3).index(4)),
    );
    let mut x12: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x12,
        x3,
        (*IndexConst(arg2).index(5)),
        (*IndexConst(arg3).index(5)),
    );
    let mut x13: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x13,
        x3,
        (*IndexConst(arg2).index(6)),
        (*IndexConst(arg3).index(6)),
    );
    let mut x14: u32 = 0;
    let mut x15: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x14,
        &mut x15,
        0x0,
        (0x1 as u32),
        (!(*IndexConst(arg2).index(0))),
    );
    let mut x16: u32 = 0;
    let mut x17: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x16,
        &mut x17,
        x15,
        (0x0 as u32),
        (!(*IndexConst(arg2).index(1))),
    );
    let mut x18: u32 = 0;
    let mut x19: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x18,
        &mut x19,
        x17,
        (0x0 as u32),
        (!(*IndexConst(arg2).index(2))),
    );
    let mut x20: u32 = 0;
    let mut x21: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x20,
        &mut x21,
        x19,
        (0x0 as u32),
        (!(*IndexConst(arg2).index(3))),
    );
    let mut x22: u32 = 0;
    let mut x23: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x22,
        &mut x23,
        x21,
        (0x0 as u32),
        (!(*IndexConst(arg2).index(4))),
    );
    let mut x24: u32 = 0;
    let mut x25: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x24,
        &mut x25,
        x23,
        (0x0 as u32),
        (!(*IndexConst(arg2).index(5))),
    );
    let mut x26: u32 = 0;
    let mut x27: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(
        &mut x26,
        &mut x27,
        x25,
        (0x0 as u32),
        (!(*IndexConst(arg2).index(6))),
    );
    let mut x28: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x28, x3, (*IndexConst(arg3).index(0)), x14);
    let mut x29: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x29, x3, (*IndexConst(arg3).index(1)), x16);
    let mut x30: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x30, x3, (*IndexConst(arg3).index(2)), x18);
    let mut x31: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x31, x3, (*IndexConst(arg3).index(3)), x20);
    let mut x32: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x32, x3, (*IndexConst(arg3).index(4)), x22);
    let mut x33: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x33, x3, (*IndexConst(arg3).index(5)), x24);
    let mut x34: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x34, x3, (*IndexConst(arg3).index(6)), x26);
    let mut x35: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x35,
        x3,
        (*IndexConst(arg4).index(0)),
        (*IndexConst(arg5).index(0)),
    );
    let mut x36: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x36,
        x3,
        (*IndexConst(arg4).index(1)),
        (*IndexConst(arg5).index(1)),
    );
    let mut x37: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x37,
        x3,
        (*IndexConst(arg4).index(2)),
        (*IndexConst(arg5).index(2)),
    );
    let mut x38: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x38,
        x3,
        (*IndexConst(arg4).index(3)),
        (*IndexConst(arg5).index(3)),
    );
    let mut x39: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x39,
        x3,
        (*IndexConst(arg4).index(4)),
        (*IndexConst(arg5).index(4)),
    );
    let mut x40: u32 = 0;
    fiat_p192_cmovznz_u32(
        &mut x40,
        x3,
        (*IndexConst(arg4).index(5)),
        (*IndexConst(arg5).index(5)),
    );
    let mut x41: u32 = 0;
    let mut x42: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x41, &mut x42, 0x0, x35, x35);
    let mut x43: u32 = 0;
    let mut x44: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x43, &mut x44, x42, x36, x36);
    let mut x45: u32 = 0;
    let mut x46: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x45, &mut x46, x44, x37, x37);
    let mut x47: u32 = 0;
    let mut x48: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x47, &mut x48, x46, x38, x38);
    let mut x49: u32 = 0;
    let mut x50: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x49, &mut x50, x48, x39, x39);
    let mut x51: u32 = 0;
    let mut x52: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x51, &mut x52, x50, x40, x40);
    let mut x53: u32 = 0;
    let mut x54: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x53, &mut x54, 0x0, x41, 0xffffffff);
    let mut x55: u32 = 0;
    let mut x56: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x55, &mut x56, x54, x43, 0xffffffff);
    let mut x57: u32 = 0;
    let mut x58: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x57, &mut x58, x56, x45, 0xfffffffe);
    let mut x59: u32 = 0;
    let mut x60: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x59, &mut x60, x58, x47, 0xffffffff);
    let mut x61: u32 = 0;
    let mut x62: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x61, &mut x62, x60, x49, 0xffffffff);
    let mut x63: u32 = 0;
    let mut x64: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x63, &mut x64, x62, x51, 0xffffffff);
    let mut x65: u32 = 0;
    let mut x66: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x65, &mut x66, x64, (x52 as u32), (0x0 as u32));
    let x67: u32 = (*IndexConst(arg4).index(5));
    let x68: u32 = (*IndexConst(arg4).index(4));
    let x69: u32 = (*IndexConst(arg4).index(3));
    let x70: u32 = (*IndexConst(arg4).index(2));
    let x71: u32 = (*IndexConst(arg4).index(1));
    let x72: u32 = (*IndexConst(arg4).index(0));
    let mut x73: u32 = 0;
    let mut x74: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x73, &mut x74, 0x0, (0x0 as u32), x72);
    let mut x75: u32 = 0;
    let mut x76: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x75, &mut x76, x74, (0x0 as u32), x71);
    let mut x77: u32 = 0;
    let mut x78: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x77, &mut x78, x76, (0x0 as u32), x70);
    let mut x79: u32 = 0;
    let mut x80: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x79, &mut x80, x78, (0x0 as u32), x69);
    let mut x81: u32 = 0;
    let mut x82: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x81, &mut x82, x80, (0x0 as u32), x68);
    let mut x83: u32 = 0;
    let mut x84: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x83, &mut x84, x82, (0x0 as u32), x67);
    let mut x85: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x85, x84, (0x0 as u32), 0xffffffff);
    let mut x86: u32 = 0;
    let mut x87: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x86, &mut x87, 0x0, x73, x85);
    let mut x88: u32 = 0;
    let mut x89: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x88, &mut x89, x87, x75, x85);
    let mut x90: u32 = 0;
    let mut x91: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x90, &mut x91, x89, x77, (x85 & 0xfffffffe));
    let mut x92: u32 = 0;
    let mut x93: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x92, &mut x93, x91, x79, x85);
    let mut x94: u32 = 0;
    let mut x95: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x94, &mut x95, x93, x81, x85);
    let mut x96: u32 = 0;
    let mut x97: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x96, &mut x97, x95, x83, x85);
    let mut x98: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x98, x3, (*IndexConst(arg5).index(0)), x86);
    let mut x99: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x99, x3, (*IndexConst(arg5).index(1)), x88);
    let mut x100: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x100, x3, (*IndexConst(arg5).index(2)), x90);
    let mut x101: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x101, x3, (*IndexConst(arg5).index(3)), x92);
    let mut x102: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x102, x3, (*IndexConst(arg5).index(4)), x94);
    let mut x103: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x103, x3, (*IndexConst(arg5).index(5)), x96);
    let x104: fiat_p192_u1 = ((x28 & (0x1 as u32)) as fiat_p192_u1);
    let mut x105: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x105, x104, (0x0 as u32), x7);
    let mut x106: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x106, x104, (0x0 as u32), x8);
    let mut x107: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x107, x104, (0x0 as u32), x9);
    let mut x108: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x108, x104, (0x0 as u32), x10);
    let mut x109: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x109, x104, (0x0 as u32), x11);
    let mut x110: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x110, x104, (0x0 as u32), x12);
    let mut x111: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x111, x104, (0x0 as u32), x13);
    let mut x112: u32 = 0;
    let mut x113: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x112, &mut x113, 0x0, x28, x105);
    let mut x114: u32 = 0;
    let mut x115: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x114, &mut x115, x113, x29, x106);
    let mut x116: u32 = 0;
    let mut x117: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x116, &mut x117, x115, x30, x107);
    let mut x118: u32 = 0;
    let mut x119: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x118, &mut x119, x117, x31, x108);
    let mut x120: u32 = 0;
    let mut x121: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x120, &mut x121, x119, x32, x109);
    let mut x122: u32 = 0;
    let mut x123: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x122, &mut x123, x121, x33, x110);
    let mut x124: u32 = 0;
    let mut x125: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x124, &mut x125, x123, x34, x111);
    let mut x126: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x126, x104, (0x0 as u32), x35);
    let mut x127: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x127, x104, (0x0 as u32), x36);
    let mut x128: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x128, x104, (0x0 as u32), x37);
    let mut x129: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x129, x104, (0x0 as u32), x38);
    let mut x130: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x130, x104, (0x0 as u32), x39);
    let mut x131: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x131, x104, (0x0 as u32), x40);
    let mut x132: u32 = 0;
    let mut x133: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x132, &mut x133, 0x0, x98, x126);
    let mut x134: u32 = 0;
    let mut x135: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x134, &mut x135, x133, x99, x127);
    let mut x136: u32 = 0;
    let mut x137: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x136, &mut x137, x135, x100, x128);
    let mut x138: u32 = 0;
    let mut x139: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x138, &mut x139, x137, x101, x129);
    let mut x140: u32 = 0;
    let mut x141: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x140, &mut x141, x139, x102, x130);
    let mut x142: u32 = 0;
    let mut x143: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x142, &mut x143, x141, x103, x131);
    let mut x144: u32 = 0;
    let mut x145: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x144, &mut x145, 0x0, x132, 0xffffffff);
    let mut x146: u32 = 0;
    let mut x147: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x146, &mut x147, x145, x134, 0xffffffff);
    let mut x148: u32 = 0;
    let mut x149: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x148, &mut x149, x147, x136, 0xfffffffe);
    let mut x150: u32 = 0;
    let mut x151: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x150, &mut x151, x149, x138, 0xffffffff);
    let mut x152: u32 = 0;
    let mut x153: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x152, &mut x153, x151, x140, 0xffffffff);
    let mut x154: u32 = 0;
    let mut x155: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x154, &mut x155, x153, x142, 0xffffffff);
    let mut x156: u32 = 0;
    let mut x157: fiat_p192_u1 = 0;
    fiat_p192_subborrowx_u32(&mut x156, &mut x157, x155, (x143 as u32), (0x0 as u32));
    let mut x158: u32 = 0;
    let mut x159: fiat_p192_u1 = 0;
    fiat_p192_addcarryx_u32(&mut x158, &mut x159, 0x0, x6, (0x1 as u32));
    let x160: u32 = ((x112 >> 1) | ((x114 << 31) & 0xffffffff));
    let x161: u32 = ((x114 >> 1) | ((x116 << 31) & 0xffffffff));
    let x162: u32 = ((x116 >> 1) | ((x118 << 31) & 0xffffffff));
    let x163: u32 = ((x118 >> 1) | ((x120 << 31) & 0xffffffff));
    let x164: u32 = ((x120 >> 1) | ((x122 << 31) & 0xffffffff));
    let x165: u32 = ((x122 >> 1) | ((x124 << 31) & 0xffffffff));
    let x166: u32 = ((x124 & 0x80000000) | (x124 >> 1));
    let mut x167: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x167, x66, x53, x41);
    let mut x168: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x168, x66, x55, x43);
    let mut x169: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x169, x66, x57, x45);
    let mut x170: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x170, x66, x59, x47);
    let mut x171: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x171, x66, x61, x49);
    let mut x172: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x172, x66, x63, x51);
    let mut x173: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x173, x157, x144, x132);
    let mut x174: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x174, x157, x146, x134);
    let mut x175: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x175, x157, x148, x136);
    let mut x176: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x176, x157, x150, x138);
    let mut x177: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x177, x157, x152, x140);
    let mut x178: u32 = 0;
    fiat_p192_cmovznz_u32(&mut x178, x157, x154, x142);
    *out1 = x158;
    *IndexConst(&mut out2).index_mut(0) = x7;
    *IndexConst(&mut out2).index_mut(1) = x8;
    *IndexConst(&mut out2).index_mut(2) = x9;
    *IndexConst(&mut out2).index_mut(3) = x10;
    *IndexConst(&mut out2).index_mut(4) = x11;
    *IndexConst(&mut out2).index_mut(5) = x12;
    *IndexConst(&mut out2).index_mut(6) = x13;
    *IndexConst(&mut out3).index_mut(0) = x160;
    *IndexConst(&mut out3).index_mut(1) = x161;
    *IndexConst(&mut out3).index_mut(2) = x162;
    *IndexConst(&mut out3).index_mut(3) = x163;
    *IndexConst(&mut out3).index_mut(4) = x164;
    *IndexConst(&mut out3).index_mut(5) = x165;
    *IndexConst(&mut out3).index_mut(6) = x166;
    *IndexConst(&mut out4).index_mut(0) = x167;
    *IndexConst(&mut out4).index_mut(1) = x168;
    *IndexConst(&mut out4).index_mut(2) = x169;
    *IndexConst(&mut out4).index_mut(3) = x170;
    *IndexConst(&mut out4).index_mut(4) = x171;
    *IndexConst(&mut out4).index_mut(5) = x172;
    *IndexConst(&mut out5).index_mut(0) = x173;
    *IndexConst(&mut out5).index_mut(1) = x174;
    *IndexConst(&mut out5).index_mut(2) = x175;
    *IndexConst(&mut out5).index_mut(3) = x176;
    *IndexConst(&mut out5).index_mut(4) = x177;
    *IndexConst(&mut out5).index_mut(5) = x178;
}

/// The function fiat_p192_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
///
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub const fn fiat_p192_divstep_precomp(mut out1: &mut [u32; 6]) {
    *IndexConst(&mut out1).index_mut(0) = 0xffe00000;
    *IndexConst(&mut out1).index_mut(1) = 0xffffffff;
    *IndexConst(&mut out1).index_mut(2) = 0xffefffff;
    *IndexConst(&mut out1).index_mut(3) = 0xffffffff;
    *IndexConst(&mut out1).index_mut(4) = 0x1fffff;
    *IndexConst(&mut out1).index_mut(5) = (0x0 as u32);
}
