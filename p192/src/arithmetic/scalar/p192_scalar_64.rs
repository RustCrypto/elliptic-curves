//! Autogenerated: fiat-crypto word-by-word-montgomery --lang Rust --inline p192_scalar 64 0xffffffffffffffffffffffff99def836146bc9b1b4d22831 mul square add sub opp from_montgomery to_montgomery selectznz msat divstep divstep_precomp
//! curve description: p192_scalar
//! machine_wordsize = 64 (from "64")
//! requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, selectznz, msat, divstep, divstep_precomp
//! m = 0xffffffffffffffffffffffff99def836146bc9b1b4d22831 (from "0xffffffffffffffffffffffff99def836146bc9b1b4d22831")
//!
//! NOTE: In addition to the bounds specified above each function, all
//!   functions synthesized for this Montgomery arithmetic require the
//!   input to be strictly less than the prime modulus (m), and also
//!   require the input to be in the unique saturated representation.
//!   All functions also ensure that these two properties are true of
//!   return values.
//!
//! Computed values:
//!   eval z = z[0] + (z[1] << 64) + (z[2] << 128)
//!   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184)
//!   twos_complement_eval z = let x1 := z[0] + (z[1] << 64) + (z[2] << 128) in
//!                            if x1 & (2^192-1) < 2^191 then x1 & (2^192-1) else (x1 & (2^192-1)) - 2^192

#![allow(unused_parens)]
#![allow(non_camel_case_types)]

/// Since `Index` and `IndexMut` aren't callable in `const` contexts yet, this helper type helps unify
/// arrays and user-defined array-wrapper types into a single type which can be indexed in `const`
/// contexts. Once `const trait`s are stabilized this type can go away
struct IndexConst<T: ?Sized>(T);

impl<'a, T, const N: usize> IndexConst<&'a [T; N]> {
    #[inline(always)]
    #[allow(unused)]
    const fn index(self, i: usize) -> &'a T {
        &self.0[i]
    }
}
impl<'a, 'b, T, const N: usize> IndexConst<&'a mut &'b mut [T; N]> {
    #[inline(always)]
    #[allow(unused)]
    const fn index_mut(self, i: usize) -> &'a mut T {
        &mut self.0[i]
    }
}

/** fiat_p192_scalar_u1 represents values of 1 bits, stored in one byte. */
pub type fiat_p192_scalar_u1 = u8;
/** fiat_p192_scalar_i1 represents values of 1 bits, stored in one byte. */
pub type fiat_p192_scalar_i1 = i8;
/** fiat_p192_scalar_u2 represents values of 2 bits, stored in one byte. */
pub type fiat_p192_scalar_u2 = u8;
/** fiat_p192_scalar_i2 represents values of 2 bits, stored in one byte. */
pub type fiat_p192_scalar_i2 = i8;

/** The type fiat_p192_scalar_montgomery_domain_field_element is a field element in the Montgomery domain. */
/** Bounds: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]] */
#[derive(Clone, Copy)]
pub struct fiat_p192_scalar_montgomery_domain_field_element(pub [u64; 3]);

impl core::ops::Index<usize> for fiat_p192_scalar_montgomery_domain_field_element {
    type Output = u64;
    #[inline]
    fn index(&self, index: usize) -> &Self::Output {
        &self.0[index]
    }
}

impl core::ops::IndexMut<usize> for fiat_p192_scalar_montgomery_domain_field_element {
    #[inline]
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.0[index]
    }
}

impl<'a> IndexConst<&'a fiat_p192_scalar_montgomery_domain_field_element> {
    #[allow(unused)]
    #[inline(always)]
    const fn index(self, i: usize) -> &'a u64 {
        &self.0.0[i]
    }
}

impl<'a, 'b> IndexConst<&'a mut &'b mut fiat_p192_scalar_montgomery_domain_field_element> {
    #[allow(unused)]
    #[inline(always)]
    const fn index_mut(self, i: usize) -> &'a mut u64 {
        &mut self.0.0[i]
    }
}

/** The type fiat_p192_scalar_non_montgomery_domain_field_element is a field element NOT in the Montgomery domain. */
/** Bounds: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]] */
#[derive(Clone, Copy)]
pub struct fiat_p192_scalar_non_montgomery_domain_field_element(pub [u64; 3]);

impl core::ops::Index<usize> for fiat_p192_scalar_non_montgomery_domain_field_element {
    type Output = u64;
    #[inline]
    fn index(&self, index: usize) -> &Self::Output {
        &self.0[index]
    }
}

impl core::ops::IndexMut<usize> for fiat_p192_scalar_non_montgomery_domain_field_element {
    #[inline]
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.0[index]
    }
}

impl<'a> IndexConst<&'a fiat_p192_scalar_non_montgomery_domain_field_element> {
    #[allow(unused)]
    #[inline(always)]
    const fn index(self, i: usize) -> &'a u64 {
        &self.0.0[i]
    }
}

impl<'a, 'b> IndexConst<&'a mut &'b mut fiat_p192_scalar_non_montgomery_domain_field_element> {
    #[allow(unused)]
    #[inline(always)]
    const fn index_mut(self, i: usize) -> &'a mut u64 {
        &mut self.0.0[i]
    }
}

/// The function fiat_p192_scalar_addcarryx_u64 is an addition with carry.
///
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^64
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^64⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffffffffffff]
///   arg3: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub const fn fiat_p192_scalar_addcarryx_u64(
    out1: &mut u64,
    out2: &mut fiat_p192_scalar_u1,
    arg1: fiat_p192_scalar_u1,
    arg2: u64,
    arg3: u64,
) {
    let x1: u128 = (((arg1 as u128) + (arg2 as u128)) + (arg3 as u128));
    let x2: u64 = ((x1 & (0xffffffffffffffff as u128)) as u64);
    let x3: fiat_p192_scalar_u1 = ((x1 >> 64) as fiat_p192_scalar_u1);
    *out1 = x2;
    *out2 = x3;
}

/// The function fiat_p192_scalar_subborrowx_u64 is a subtraction with borrow.
///
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^64
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^64⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffffffffffff]
///   arg3: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub const fn fiat_p192_scalar_subborrowx_u64(
    out1: &mut u64,
    out2: &mut fiat_p192_scalar_u1,
    arg1: fiat_p192_scalar_u1,
    arg2: u64,
    arg3: u64,
) {
    let x1: i128 = (((arg2 as i128) - (arg1 as i128)) - (arg3 as i128));
    let x2: fiat_p192_scalar_i1 = ((x1 >> 64) as fiat_p192_scalar_i1);
    let x3: u64 = ((x1 & (0xffffffffffffffff as i128)) as u64);
    *out1 = x3;
    *out2 = (((0x0 as fiat_p192_scalar_i2) - (x2 as fiat_p192_scalar_i2)) as fiat_p192_scalar_u1);
}

/// The function fiat_p192_scalar_mulx_u64 is a multiplication, returning the full double-width result.
///
/// Postconditions:
///   out1 = (arg1 * arg2) mod 2^64
///   out2 = ⌊arg1 * arg2 / 2^64⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffffffffffff]
///   arg2: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
///   out2: [0x0 ~> 0xffffffffffffffff]
#[inline]
pub const fn fiat_p192_scalar_mulx_u64(out1: &mut u64, out2: &mut u64, arg1: u64, arg2: u64) {
    let x1: u128 = ((arg1 as u128) * (arg2 as u128));
    let x2: u64 = ((x1 & (0xffffffffffffffff as u128)) as u64);
    let x3: u64 = ((x1 >> 64) as u64);
    *out1 = x2;
    *out2 = x3;
}

/// The function fiat_p192_scalar_cmovznz_u64 is a single-word conditional move.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffffffffffff]
///   arg3: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
#[inline]
pub const fn fiat_p192_scalar_cmovznz_u64(
    out1: &mut u64,
    arg1: fiat_p192_scalar_u1,
    arg2: u64,
    arg3: u64,
) {
    let x1: fiat_p192_scalar_u1 = (!(!arg1));
    let x2: u64 = ((((((0x0 as fiat_p192_scalar_i2) - (x1 as fiat_p192_scalar_i2))
        as fiat_p192_scalar_i1) as i128)
        & (0xffffffffffffffff as i128)) as u64);
    let x3: u64 = ((x2 & arg3) | ((!x2) & arg2));
    *out1 = x3;
}

/// The function fiat_p192_scalar_mul multiplies two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_scalar_mul(
    mut out1: &mut fiat_p192_scalar_montgomery_domain_field_element,
    arg1: &fiat_p192_scalar_montgomery_domain_field_element,
    arg2: &fiat_p192_scalar_montgomery_domain_field_element,
) {
    let x1: u64 = (*IndexConst(arg1).index(1));
    let x2: u64 = (*IndexConst(arg1).index(2));
    let x3: u64 = (*IndexConst(arg1).index(0));
    let mut x4: u64 = 0;
    let mut x5: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x4, &mut x5, x3, (*IndexConst(arg2).index(2)));
    let mut x6: u64 = 0;
    let mut x7: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x6, &mut x7, x3, (*IndexConst(arg2).index(1)));
    let mut x8: u64 = 0;
    let mut x9: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x8, &mut x9, x3, (*IndexConst(arg2).index(0)));
    let mut x10: u64 = 0;
    let mut x11: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x10, &mut x11, 0x0, x9, x6);
    let mut x12: u64 = 0;
    let mut x13: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x12, &mut x13, x11, x7, x4);
    let x14: u64 = ((x13 as u64) + x5);
    let mut x15: u64 = 0;
    let mut x16: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x15, &mut x16, x8, 0x882672070ddbcf2f);
    let mut x17: u64 = 0;
    let mut x18: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x17, &mut x18, x15, 0xffffffffffffffff);
    let mut x19: u64 = 0;
    let mut x20: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x19, &mut x20, x15, 0xffffffff99def836);
    let mut x21: u64 = 0;
    let mut x22: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x21, &mut x22, x15, 0x146bc9b1b4d22831);
    let mut x23: u64 = 0;
    let mut x24: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x23, &mut x24, 0x0, x22, x19);
    let mut x25: u64 = 0;
    let mut x26: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x25, &mut x26, x24, x20, x17);
    let x27: u64 = ((x26 as u64) + x18);
    let mut x28: u64 = 0;
    let mut x29: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x28, &mut x29, 0x0, x8, x21);
    let mut x30: u64 = 0;
    let mut x31: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x30, &mut x31, x29, x10, x23);
    let mut x32: u64 = 0;
    let mut x33: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x32, &mut x33, x31, x12, x25);
    let mut x34: u64 = 0;
    let mut x35: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x34, &mut x35, x33, x14, x27);
    let mut x36: u64 = 0;
    let mut x37: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x36, &mut x37, x1, (*IndexConst(arg2).index(2)));
    let mut x38: u64 = 0;
    let mut x39: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x38, &mut x39, x1, (*IndexConst(arg2).index(1)));
    let mut x40: u64 = 0;
    let mut x41: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x40, &mut x41, x1, (*IndexConst(arg2).index(0)));
    let mut x42: u64 = 0;
    let mut x43: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x42, &mut x43, 0x0, x41, x38);
    let mut x44: u64 = 0;
    let mut x45: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x44, &mut x45, x43, x39, x36);
    let x46: u64 = ((x45 as u64) + x37);
    let mut x47: u64 = 0;
    let mut x48: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x47, &mut x48, 0x0, x30, x40);
    let mut x49: u64 = 0;
    let mut x50: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x49, &mut x50, x48, x32, x42);
    let mut x51: u64 = 0;
    let mut x52: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x51, &mut x52, x50, x34, x44);
    let mut x53: u64 = 0;
    let mut x54: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x53, &mut x54, x52, (x35 as u64), x46);
    let mut x55: u64 = 0;
    let mut x56: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x55, &mut x56, x47, 0x882672070ddbcf2f);
    let mut x57: u64 = 0;
    let mut x58: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x57, &mut x58, x55, 0xffffffffffffffff);
    let mut x59: u64 = 0;
    let mut x60: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x59, &mut x60, x55, 0xffffffff99def836);
    let mut x61: u64 = 0;
    let mut x62: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x61, &mut x62, x55, 0x146bc9b1b4d22831);
    let mut x63: u64 = 0;
    let mut x64: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x63, &mut x64, 0x0, x62, x59);
    let mut x65: u64 = 0;
    let mut x66: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x65, &mut x66, x64, x60, x57);
    let x67: u64 = ((x66 as u64) + x58);
    let mut x68: u64 = 0;
    let mut x69: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x68, &mut x69, 0x0, x47, x61);
    let mut x70: u64 = 0;
    let mut x71: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x70, &mut x71, x69, x49, x63);
    let mut x72: u64 = 0;
    let mut x73: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x72, &mut x73, x71, x51, x65);
    let mut x74: u64 = 0;
    let mut x75: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x74, &mut x75, x73, x53, x67);
    let x76: u64 = ((x75 as u64) + (x54 as u64));
    let mut x77: u64 = 0;
    let mut x78: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x77, &mut x78, x2, (*IndexConst(arg2).index(2)));
    let mut x79: u64 = 0;
    let mut x80: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x79, &mut x80, x2, (*IndexConst(arg2).index(1)));
    let mut x81: u64 = 0;
    let mut x82: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x81, &mut x82, x2, (*IndexConst(arg2).index(0)));
    let mut x83: u64 = 0;
    let mut x84: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x83, &mut x84, 0x0, x82, x79);
    let mut x85: u64 = 0;
    let mut x86: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x85, &mut x86, x84, x80, x77);
    let x87: u64 = ((x86 as u64) + x78);
    let mut x88: u64 = 0;
    let mut x89: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x88, &mut x89, 0x0, x70, x81);
    let mut x90: u64 = 0;
    let mut x91: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x90, &mut x91, x89, x72, x83);
    let mut x92: u64 = 0;
    let mut x93: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x92, &mut x93, x91, x74, x85);
    let mut x94: u64 = 0;
    let mut x95: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x94, &mut x95, x93, x76, x87);
    let mut x96: u64 = 0;
    let mut x97: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x96, &mut x97, x88, 0x882672070ddbcf2f);
    let mut x98: u64 = 0;
    let mut x99: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x98, &mut x99, x96, 0xffffffffffffffff);
    let mut x100: u64 = 0;
    let mut x101: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x100, &mut x101, x96, 0xffffffff99def836);
    let mut x102: u64 = 0;
    let mut x103: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x102, &mut x103, x96, 0x146bc9b1b4d22831);
    let mut x104: u64 = 0;
    let mut x105: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x104, &mut x105, 0x0, x103, x100);
    let mut x106: u64 = 0;
    let mut x107: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x106, &mut x107, x105, x101, x98);
    let x108: u64 = ((x107 as u64) + x99);
    let mut x109: u64 = 0;
    let mut x110: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x109, &mut x110, 0x0, x88, x102);
    let mut x111: u64 = 0;
    let mut x112: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x111, &mut x112, x110, x90, x104);
    let mut x113: u64 = 0;
    let mut x114: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x113, &mut x114, x112, x92, x106);
    let mut x115: u64 = 0;
    let mut x116: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x115, &mut x116, x114, x94, x108);
    let x117: u64 = ((x116 as u64) + (x95 as u64));
    let mut x118: u64 = 0;
    let mut x119: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x118, &mut x119, 0x0, x111, 0x146bc9b1b4d22831);
    let mut x120: u64 = 0;
    let mut x121: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x120, &mut x121, x119, x113, 0xffffffff99def836);
    let mut x122: u64 = 0;
    let mut x123: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x122, &mut x123, x121, x115, 0xffffffffffffffff);
    let mut x124: u64 = 0;
    let mut x125: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x124, &mut x125, x123, x117, (0x0 as u64));
    let mut x126: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x126, x125, x118, x111);
    let mut x127: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x127, x125, x120, x113);
    let mut x128: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x128, x125, x122, x115);
    *IndexConst(&mut out1).index_mut(0) = x126;
    *IndexConst(&mut out1).index_mut(1) = x127;
    *IndexConst(&mut out1).index_mut(2) = x128;
}

/// The function fiat_p192_scalar_square squares a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_scalar_square(
    mut out1: &mut fiat_p192_scalar_montgomery_domain_field_element,
    arg1: &fiat_p192_scalar_montgomery_domain_field_element,
) {
    let x1: u64 = (*IndexConst(arg1).index(1));
    let x2: u64 = (*IndexConst(arg1).index(2));
    let x3: u64 = (*IndexConst(arg1).index(0));
    let mut x4: u64 = 0;
    let mut x5: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x4, &mut x5, x3, (*IndexConst(arg1).index(2)));
    let mut x6: u64 = 0;
    let mut x7: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x6, &mut x7, x3, (*IndexConst(arg1).index(1)));
    let mut x8: u64 = 0;
    let mut x9: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x8, &mut x9, x3, (*IndexConst(arg1).index(0)));
    let mut x10: u64 = 0;
    let mut x11: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x10, &mut x11, 0x0, x9, x6);
    let mut x12: u64 = 0;
    let mut x13: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x12, &mut x13, x11, x7, x4);
    let x14: u64 = ((x13 as u64) + x5);
    let mut x15: u64 = 0;
    let mut x16: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x15, &mut x16, x8, 0x882672070ddbcf2f);
    let mut x17: u64 = 0;
    let mut x18: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x17, &mut x18, x15, 0xffffffffffffffff);
    let mut x19: u64 = 0;
    let mut x20: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x19, &mut x20, x15, 0xffffffff99def836);
    let mut x21: u64 = 0;
    let mut x22: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x21, &mut x22, x15, 0x146bc9b1b4d22831);
    let mut x23: u64 = 0;
    let mut x24: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x23, &mut x24, 0x0, x22, x19);
    let mut x25: u64 = 0;
    let mut x26: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x25, &mut x26, x24, x20, x17);
    let x27: u64 = ((x26 as u64) + x18);
    let mut x28: u64 = 0;
    let mut x29: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x28, &mut x29, 0x0, x8, x21);
    let mut x30: u64 = 0;
    let mut x31: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x30, &mut x31, x29, x10, x23);
    let mut x32: u64 = 0;
    let mut x33: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x32, &mut x33, x31, x12, x25);
    let mut x34: u64 = 0;
    let mut x35: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x34, &mut x35, x33, x14, x27);
    let mut x36: u64 = 0;
    let mut x37: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x36, &mut x37, x1, (*IndexConst(arg1).index(2)));
    let mut x38: u64 = 0;
    let mut x39: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x38, &mut x39, x1, (*IndexConst(arg1).index(1)));
    let mut x40: u64 = 0;
    let mut x41: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x40, &mut x41, x1, (*IndexConst(arg1).index(0)));
    let mut x42: u64 = 0;
    let mut x43: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x42, &mut x43, 0x0, x41, x38);
    let mut x44: u64 = 0;
    let mut x45: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x44, &mut x45, x43, x39, x36);
    let x46: u64 = ((x45 as u64) + x37);
    let mut x47: u64 = 0;
    let mut x48: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x47, &mut x48, 0x0, x30, x40);
    let mut x49: u64 = 0;
    let mut x50: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x49, &mut x50, x48, x32, x42);
    let mut x51: u64 = 0;
    let mut x52: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x51, &mut x52, x50, x34, x44);
    let mut x53: u64 = 0;
    let mut x54: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x53, &mut x54, x52, (x35 as u64), x46);
    let mut x55: u64 = 0;
    let mut x56: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x55, &mut x56, x47, 0x882672070ddbcf2f);
    let mut x57: u64 = 0;
    let mut x58: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x57, &mut x58, x55, 0xffffffffffffffff);
    let mut x59: u64 = 0;
    let mut x60: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x59, &mut x60, x55, 0xffffffff99def836);
    let mut x61: u64 = 0;
    let mut x62: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x61, &mut x62, x55, 0x146bc9b1b4d22831);
    let mut x63: u64 = 0;
    let mut x64: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x63, &mut x64, 0x0, x62, x59);
    let mut x65: u64 = 0;
    let mut x66: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x65, &mut x66, x64, x60, x57);
    let x67: u64 = ((x66 as u64) + x58);
    let mut x68: u64 = 0;
    let mut x69: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x68, &mut x69, 0x0, x47, x61);
    let mut x70: u64 = 0;
    let mut x71: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x70, &mut x71, x69, x49, x63);
    let mut x72: u64 = 0;
    let mut x73: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x72, &mut x73, x71, x51, x65);
    let mut x74: u64 = 0;
    let mut x75: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x74, &mut x75, x73, x53, x67);
    let x76: u64 = ((x75 as u64) + (x54 as u64));
    let mut x77: u64 = 0;
    let mut x78: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x77, &mut x78, x2, (*IndexConst(arg1).index(2)));
    let mut x79: u64 = 0;
    let mut x80: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x79, &mut x80, x2, (*IndexConst(arg1).index(1)));
    let mut x81: u64 = 0;
    let mut x82: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x81, &mut x82, x2, (*IndexConst(arg1).index(0)));
    let mut x83: u64 = 0;
    let mut x84: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x83, &mut x84, 0x0, x82, x79);
    let mut x85: u64 = 0;
    let mut x86: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x85, &mut x86, x84, x80, x77);
    let x87: u64 = ((x86 as u64) + x78);
    let mut x88: u64 = 0;
    let mut x89: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x88, &mut x89, 0x0, x70, x81);
    let mut x90: u64 = 0;
    let mut x91: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x90, &mut x91, x89, x72, x83);
    let mut x92: u64 = 0;
    let mut x93: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x92, &mut x93, x91, x74, x85);
    let mut x94: u64 = 0;
    let mut x95: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x94, &mut x95, x93, x76, x87);
    let mut x96: u64 = 0;
    let mut x97: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x96, &mut x97, x88, 0x882672070ddbcf2f);
    let mut x98: u64 = 0;
    let mut x99: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x98, &mut x99, x96, 0xffffffffffffffff);
    let mut x100: u64 = 0;
    let mut x101: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x100, &mut x101, x96, 0xffffffff99def836);
    let mut x102: u64 = 0;
    let mut x103: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x102, &mut x103, x96, 0x146bc9b1b4d22831);
    let mut x104: u64 = 0;
    let mut x105: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x104, &mut x105, 0x0, x103, x100);
    let mut x106: u64 = 0;
    let mut x107: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x106, &mut x107, x105, x101, x98);
    let x108: u64 = ((x107 as u64) + x99);
    let mut x109: u64 = 0;
    let mut x110: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x109, &mut x110, 0x0, x88, x102);
    let mut x111: u64 = 0;
    let mut x112: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x111, &mut x112, x110, x90, x104);
    let mut x113: u64 = 0;
    let mut x114: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x113, &mut x114, x112, x92, x106);
    let mut x115: u64 = 0;
    let mut x116: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x115, &mut x116, x114, x94, x108);
    let x117: u64 = ((x116 as u64) + (x95 as u64));
    let mut x118: u64 = 0;
    let mut x119: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x118, &mut x119, 0x0, x111, 0x146bc9b1b4d22831);
    let mut x120: u64 = 0;
    let mut x121: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x120, &mut x121, x119, x113, 0xffffffff99def836);
    let mut x122: u64 = 0;
    let mut x123: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x122, &mut x123, x121, x115, 0xffffffffffffffff);
    let mut x124: u64 = 0;
    let mut x125: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x124, &mut x125, x123, x117, (0x0 as u64));
    let mut x126: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x126, x125, x118, x111);
    let mut x127: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x127, x125, x120, x113);
    let mut x128: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x128, x125, x122, x115);
    *IndexConst(&mut out1).index_mut(0) = x126;
    *IndexConst(&mut out1).index_mut(1) = x127;
    *IndexConst(&mut out1).index_mut(2) = x128;
}

/// The function fiat_p192_scalar_add adds two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_scalar_add(
    mut out1: &mut fiat_p192_scalar_montgomery_domain_field_element,
    arg1: &fiat_p192_scalar_montgomery_domain_field_element,
    arg2: &fiat_p192_scalar_montgomery_domain_field_element,
) {
    let mut x1: u64 = 0;
    let mut x2: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x1,
        &mut x2,
        0x0,
        (*IndexConst(arg1).index(0)),
        (*IndexConst(arg2).index(0)),
    );
    let mut x3: u64 = 0;
    let mut x4: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x3,
        &mut x4,
        x2,
        (*IndexConst(arg1).index(1)),
        (*IndexConst(arg2).index(1)),
    );
    let mut x5: u64 = 0;
    let mut x6: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x5,
        &mut x6,
        x4,
        (*IndexConst(arg1).index(2)),
        (*IndexConst(arg2).index(2)),
    );
    let mut x7: u64 = 0;
    let mut x8: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x7, &mut x8, 0x0, x1, 0x146bc9b1b4d22831);
    let mut x9: u64 = 0;
    let mut x10: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x9, &mut x10, x8, x3, 0xffffffff99def836);
    let mut x11: u64 = 0;
    let mut x12: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x11, &mut x12, x10, x5, 0xffffffffffffffff);
    let mut x13: u64 = 0;
    let mut x14: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x13, &mut x14, x12, (x6 as u64), (0x0 as u64));
    let mut x15: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x15, x14, x7, x1);
    let mut x16: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x16, x14, x9, x3);
    let mut x17: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x17, x14, x11, x5);
    *IndexConst(&mut out1).index_mut(0) = x15;
    *IndexConst(&mut out1).index_mut(1) = x16;
    *IndexConst(&mut out1).index_mut(2) = x17;
}

/// The function fiat_p192_scalar_sub subtracts two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_scalar_sub(
    mut out1: &mut fiat_p192_scalar_montgomery_domain_field_element,
    arg1: &fiat_p192_scalar_montgomery_domain_field_element,
    arg2: &fiat_p192_scalar_montgomery_domain_field_element,
) {
    let mut x1: u64 = 0;
    let mut x2: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(
        &mut x1,
        &mut x2,
        0x0,
        (*IndexConst(arg1).index(0)),
        (*IndexConst(arg2).index(0)),
    );
    let mut x3: u64 = 0;
    let mut x4: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(
        &mut x3,
        &mut x4,
        x2,
        (*IndexConst(arg1).index(1)),
        (*IndexConst(arg2).index(1)),
    );
    let mut x5: u64 = 0;
    let mut x6: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(
        &mut x5,
        &mut x6,
        x4,
        (*IndexConst(arg1).index(2)),
        (*IndexConst(arg2).index(2)),
    );
    let mut x7: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x7, x6, (0x0 as u64), 0xffffffffffffffff);
    let mut x8: u64 = 0;
    let mut x9: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x8, &mut x9, 0x0, x1, (x7 & 0x146bc9b1b4d22831));
    let mut x10: u64 = 0;
    let mut x11: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x10, &mut x11, x9, x3, (x7 & 0xffffffff99def836));
    let mut x12: u64 = 0;
    let mut x13: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x12, &mut x13, x11, x5, x7);
    *IndexConst(&mut out1).index_mut(0) = x8;
    *IndexConst(&mut out1).index_mut(1) = x10;
    *IndexConst(&mut out1).index_mut(2) = x12;
}

/// The function fiat_p192_scalar_opp negates a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_scalar_opp(
    mut out1: &mut fiat_p192_scalar_montgomery_domain_field_element,
    arg1: &fiat_p192_scalar_montgomery_domain_field_element,
) {
    let mut x1: u64 = 0;
    let mut x2: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(
        &mut x1,
        &mut x2,
        0x0,
        (0x0 as u64),
        (*IndexConst(arg1).index(0)),
    );
    let mut x3: u64 = 0;
    let mut x4: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(
        &mut x3,
        &mut x4,
        x2,
        (0x0 as u64),
        (*IndexConst(arg1).index(1)),
    );
    let mut x5: u64 = 0;
    let mut x6: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(
        &mut x5,
        &mut x6,
        x4,
        (0x0 as u64),
        (*IndexConst(arg1).index(2)),
    );
    let mut x7: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x7, x6, (0x0 as u64), 0xffffffffffffffff);
    let mut x8: u64 = 0;
    let mut x9: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x8, &mut x9, 0x0, x1, (x7 & 0x146bc9b1b4d22831));
    let mut x10: u64 = 0;
    let mut x11: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x10, &mut x11, x9, x3, (x7 & 0xffffffff99def836));
    let mut x12: u64 = 0;
    let mut x13: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x12, &mut x13, x11, x5, x7);
    *IndexConst(&mut out1).index_mut(0) = x8;
    *IndexConst(&mut out1).index_mut(1) = x10;
    *IndexConst(&mut out1).index_mut(2) = x12;
}

/// The function fiat_p192_scalar_from_montgomery translates a field element out of the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^3) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_scalar_from_montgomery(
    mut out1: &mut fiat_p192_scalar_non_montgomery_domain_field_element,
    arg1: &fiat_p192_scalar_montgomery_domain_field_element,
) {
    let x1: u64 = (*IndexConst(arg1).index(0));
    let mut x2: u64 = 0;
    let mut x3: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x2, &mut x3, x1, 0x882672070ddbcf2f);
    let mut x4: u64 = 0;
    let mut x5: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x4, &mut x5, x2, 0xffffffffffffffff);
    let mut x6: u64 = 0;
    let mut x7: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x6, &mut x7, x2, 0xffffffff99def836);
    let mut x8: u64 = 0;
    let mut x9: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x8, &mut x9, x2, 0x146bc9b1b4d22831);
    let mut x10: u64 = 0;
    let mut x11: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x10, &mut x11, 0x0, x9, x6);
    let mut x12: u64 = 0;
    let mut x13: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x12, &mut x13, x11, x7, x4);
    let mut x14: u64 = 0;
    let mut x15: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x14, &mut x15, 0x0, x1, x8);
    let mut x16: u64 = 0;
    let mut x17: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x16, &mut x17, x15, (0x0 as u64), x10);
    let mut x18: u64 = 0;
    let mut x19: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x18, &mut x19, x17, (0x0 as u64), x12);
    let mut x20: u64 = 0;
    let mut x21: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x20, &mut x21, x19, (0x0 as u64), ((x13 as u64) + x5));
    let mut x22: u64 = 0;
    let mut x23: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x22, &mut x23, 0x0, x16, (*IndexConst(arg1).index(1)));
    let mut x24: u64 = 0;
    let mut x25: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x24, &mut x25, x23, x18, (0x0 as u64));
    let mut x26: u64 = 0;
    let mut x27: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x26, &mut x27, x25, x20, (0x0 as u64));
    let mut x28: u64 = 0;
    let mut x29: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x28, &mut x29, x22, 0x882672070ddbcf2f);
    let mut x30: u64 = 0;
    let mut x31: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x30, &mut x31, x28, 0xffffffffffffffff);
    let mut x32: u64 = 0;
    let mut x33: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x32, &mut x33, x28, 0xffffffff99def836);
    let mut x34: u64 = 0;
    let mut x35: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x34, &mut x35, x28, 0x146bc9b1b4d22831);
    let mut x36: u64 = 0;
    let mut x37: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x36, &mut x37, 0x0, x35, x32);
    let mut x38: u64 = 0;
    let mut x39: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x38, &mut x39, x37, x33, x30);
    let mut x40: u64 = 0;
    let mut x41: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x40, &mut x41, 0x0, x22, x34);
    let mut x42: u64 = 0;
    let mut x43: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x42, &mut x43, x41, x24, x36);
    let mut x44: u64 = 0;
    let mut x45: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x44, &mut x45, x43, x26, x38);
    let mut x46: u64 = 0;
    let mut x47: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x46,
        &mut x47,
        x45,
        ((x27 as u64) + (x21 as u64)),
        ((x39 as u64) + x31),
    );
    let mut x48: u64 = 0;
    let mut x49: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x48, &mut x49, 0x0, x42, (*IndexConst(arg1).index(2)));
    let mut x50: u64 = 0;
    let mut x51: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x50, &mut x51, x49, x44, (0x0 as u64));
    let mut x52: u64 = 0;
    let mut x53: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x52, &mut x53, x51, x46, (0x0 as u64));
    let mut x54: u64 = 0;
    let mut x55: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x54, &mut x55, x48, 0x882672070ddbcf2f);
    let mut x56: u64 = 0;
    let mut x57: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x56, &mut x57, x54, 0xffffffffffffffff);
    let mut x58: u64 = 0;
    let mut x59: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x58, &mut x59, x54, 0xffffffff99def836);
    let mut x60: u64 = 0;
    let mut x61: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x60, &mut x61, x54, 0x146bc9b1b4d22831);
    let mut x62: u64 = 0;
    let mut x63: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x62, &mut x63, 0x0, x61, x58);
    let mut x64: u64 = 0;
    let mut x65: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x64, &mut x65, x63, x59, x56);
    let mut x66: u64 = 0;
    let mut x67: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x66, &mut x67, 0x0, x48, x60);
    let mut x68: u64 = 0;
    let mut x69: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x68, &mut x69, x67, x50, x62);
    let mut x70: u64 = 0;
    let mut x71: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x70, &mut x71, x69, x52, x64);
    let mut x72: u64 = 0;
    let mut x73: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x72,
        &mut x73,
        x71,
        ((x53 as u64) + (x47 as u64)),
        ((x65 as u64) + x57),
    );
    let mut x74: u64 = 0;
    let mut x75: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x74, &mut x75, 0x0, x68, 0x146bc9b1b4d22831);
    let mut x76: u64 = 0;
    let mut x77: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x76, &mut x77, x75, x70, 0xffffffff99def836);
    let mut x78: u64 = 0;
    let mut x79: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x78, &mut x79, x77, x72, 0xffffffffffffffff);
    let mut x80: u64 = 0;
    let mut x81: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x80, &mut x81, x79, (x73 as u64), (0x0 as u64));
    let mut x82: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x82, x81, x74, x68);
    let mut x83: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x83, x81, x76, x70);
    let mut x84: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x84, x81, x78, x72);
    *IndexConst(&mut out1).index_mut(0) = x82;
    *IndexConst(&mut out1).index_mut(1) = x83;
    *IndexConst(&mut out1).index_mut(2) = x84;
}

/// The function fiat_p192_scalar_to_montgomery translates a field element into the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = eval arg1 mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub const fn fiat_p192_scalar_to_montgomery(
    mut out1: &mut fiat_p192_scalar_montgomery_domain_field_element,
    arg1: &fiat_p192_scalar_non_montgomery_domain_field_element,
) {
    let x1: u64 = (*IndexConst(arg1).index(1));
    let x2: u64 = (*IndexConst(arg1).index(2));
    let x3: u64 = (*IndexConst(arg1).index(0));
    let mut x4: u64 = 0;
    let mut x5: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x4, &mut x5, x3, 0x28be5677ea0581a2);
    let mut x6: u64 = 0;
    let mut x7: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x6, &mut x7, x3, 0x4696ea5bbb3a6bee);
    let mut x8: u64 = 0;
    let mut x9: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x8, &mut x9, x3, 0xce66baccdeb35961);
    let mut x10: u64 = 0;
    let mut x11: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x10, &mut x11, 0x0, x9, x6);
    let mut x12: u64 = 0;
    let mut x13: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x12, &mut x13, x11, x7, x4);
    let mut x14: u64 = 0;
    let mut x15: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x14, &mut x15, x8, 0x882672070ddbcf2f);
    let mut x16: u64 = 0;
    let mut x17: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x16, &mut x17, x14, 0xffffffffffffffff);
    let mut x18: u64 = 0;
    let mut x19: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x18, &mut x19, x14, 0xffffffff99def836);
    let mut x20: u64 = 0;
    let mut x21: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x20, &mut x21, x14, 0x146bc9b1b4d22831);
    let mut x22: u64 = 0;
    let mut x23: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x22, &mut x23, 0x0, x21, x18);
    let mut x24: u64 = 0;
    let mut x25: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x24, &mut x25, x23, x19, x16);
    let mut x26: u64 = 0;
    let mut x27: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x26, &mut x27, 0x0, x8, x20);
    let mut x28: u64 = 0;
    let mut x29: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x28, &mut x29, x27, x10, x22);
    let mut x30: u64 = 0;
    let mut x31: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x30, &mut x31, x29, x12, x24);
    let mut x32: u64 = 0;
    let mut x33: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x32,
        &mut x33,
        x31,
        ((x13 as u64) + x5),
        ((x25 as u64) + x17),
    );
    let mut x34: u64 = 0;
    let mut x35: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x34, &mut x35, x1, 0x28be5677ea0581a2);
    let mut x36: u64 = 0;
    let mut x37: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x36, &mut x37, x1, 0x4696ea5bbb3a6bee);
    let mut x38: u64 = 0;
    let mut x39: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x38, &mut x39, x1, 0xce66baccdeb35961);
    let mut x40: u64 = 0;
    let mut x41: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x40, &mut x41, 0x0, x39, x36);
    let mut x42: u64 = 0;
    let mut x43: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x42, &mut x43, x41, x37, x34);
    let mut x44: u64 = 0;
    let mut x45: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x44, &mut x45, 0x0, x28, x38);
    let mut x46: u64 = 0;
    let mut x47: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x46, &mut x47, x45, x30, x40);
    let mut x48: u64 = 0;
    let mut x49: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x48, &mut x49, x47, x32, x42);
    let mut x50: u64 = 0;
    let mut x51: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x50, &mut x51, x44, 0x882672070ddbcf2f);
    let mut x52: u64 = 0;
    let mut x53: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x52, &mut x53, x50, 0xffffffffffffffff);
    let mut x54: u64 = 0;
    let mut x55: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x54, &mut x55, x50, 0xffffffff99def836);
    let mut x56: u64 = 0;
    let mut x57: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x56, &mut x57, x50, 0x146bc9b1b4d22831);
    let mut x58: u64 = 0;
    let mut x59: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x58, &mut x59, 0x0, x57, x54);
    let mut x60: u64 = 0;
    let mut x61: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x60, &mut x61, x59, x55, x52);
    let mut x62: u64 = 0;
    let mut x63: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x62, &mut x63, 0x0, x44, x56);
    let mut x64: u64 = 0;
    let mut x65: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x64, &mut x65, x63, x46, x58);
    let mut x66: u64 = 0;
    let mut x67: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x66, &mut x67, x65, x48, x60);
    let mut x68: u64 = 0;
    let mut x69: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x68,
        &mut x69,
        x67,
        (((x49 as u64) + (x33 as u64)) + ((x43 as u64) + x35)),
        ((x61 as u64) + x53),
    );
    let mut x70: u64 = 0;
    let mut x71: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x70, &mut x71, x2, 0x28be5677ea0581a2);
    let mut x72: u64 = 0;
    let mut x73: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x72, &mut x73, x2, 0x4696ea5bbb3a6bee);
    let mut x74: u64 = 0;
    let mut x75: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x74, &mut x75, x2, 0xce66baccdeb35961);
    let mut x76: u64 = 0;
    let mut x77: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x76, &mut x77, 0x0, x75, x72);
    let mut x78: u64 = 0;
    let mut x79: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x78, &mut x79, x77, x73, x70);
    let mut x80: u64 = 0;
    let mut x81: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x80, &mut x81, 0x0, x64, x74);
    let mut x82: u64 = 0;
    let mut x83: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x82, &mut x83, x81, x66, x76);
    let mut x84: u64 = 0;
    let mut x85: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x84, &mut x85, x83, x68, x78);
    let mut x86: u64 = 0;
    let mut x87: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x86, &mut x87, x80, 0x882672070ddbcf2f);
    let mut x88: u64 = 0;
    let mut x89: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x88, &mut x89, x86, 0xffffffffffffffff);
    let mut x90: u64 = 0;
    let mut x91: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x90, &mut x91, x86, 0xffffffff99def836);
    let mut x92: u64 = 0;
    let mut x93: u64 = 0;
    fiat_p192_scalar_mulx_u64(&mut x92, &mut x93, x86, 0x146bc9b1b4d22831);
    let mut x94: u64 = 0;
    let mut x95: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x94, &mut x95, 0x0, x93, x90);
    let mut x96: u64 = 0;
    let mut x97: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x96, &mut x97, x95, x91, x88);
    let mut x98: u64 = 0;
    let mut x99: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x98, &mut x99, 0x0, x80, x92);
    let mut x100: u64 = 0;
    let mut x101: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x100, &mut x101, x99, x82, x94);
    let mut x102: u64 = 0;
    let mut x103: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x102, &mut x103, x101, x84, x96);
    let mut x104: u64 = 0;
    let mut x105: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x104,
        &mut x105,
        x103,
        (((x85 as u64) + (x69 as u64)) + ((x79 as u64) + x71)),
        ((x97 as u64) + x89),
    );
    let mut x106: u64 = 0;
    let mut x107: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x106, &mut x107, 0x0, x100, 0x146bc9b1b4d22831);
    let mut x108: u64 = 0;
    let mut x109: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x108, &mut x109, x107, x102, 0xffffffff99def836);
    let mut x110: u64 = 0;
    let mut x111: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x110, &mut x111, x109, x104, 0xffffffffffffffff);
    let mut x112: u64 = 0;
    let mut x113: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x112, &mut x113, x111, (x105 as u64), (0x0 as u64));
    let mut x114: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x114, x113, x106, x100);
    let mut x115: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x115, x113, x108, x102);
    let mut x116: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x116, x113, x110, x104);
    *IndexConst(&mut out1).index_mut(0) = x114;
    *IndexConst(&mut out1).index_mut(1) = x115;
    *IndexConst(&mut out1).index_mut(2) = x116;
}

/// The function fiat_p192_scalar_selectznz is a multi-limb conditional select.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub const fn fiat_p192_scalar_selectznz(
    mut out1: &mut [u64; 3],
    arg1: fiat_p192_scalar_u1,
    arg2: &[u64; 3],
    arg3: &[u64; 3],
) {
    let mut x1: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x1,
        arg1,
        (*IndexConst(arg2).index(0)),
        (*IndexConst(arg3).index(0)),
    );
    let mut x2: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x2,
        arg1,
        (*IndexConst(arg2).index(1)),
        (*IndexConst(arg3).index(1)),
    );
    let mut x3: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x3,
        arg1,
        (*IndexConst(arg2).index(2)),
        (*IndexConst(arg3).index(2)),
    );
    *IndexConst(&mut out1).index_mut(0) = x1;
    *IndexConst(&mut out1).index_mut(1) = x2;
    *IndexConst(&mut out1).index_mut(2) = x3;
}

/// The function fiat_p192_scalar_msat returns the saturated representation of the prime modulus.
///
/// Postconditions:
///   twos_complement_eval out1 = m
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub const fn fiat_p192_scalar_msat(mut out1: &mut [u64; 4]) {
    *IndexConst(&mut out1).index_mut(0) = 0x146bc9b1b4d22831;
    *IndexConst(&mut out1).index_mut(1) = 0xffffffff99def836;
    *IndexConst(&mut out1).index_mut(2) = 0xffffffffffffffff;
    *IndexConst(&mut out1).index_mut(3) = (0x0 as u64);
}

/// The function fiat_p192_scalar_divstep computes a divstep.
///
/// Preconditions:
///   0 ≤ eval arg4 < m
///   0 ≤ eval arg5 < m
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
///   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
///   0 ≤ eval out5 < m
///   0 ≤ eval out5 < m
///   0 ≤ eval out2 < m
///   0 ≤ eval out3 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffffffffffff]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg4: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg5: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
///   out2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   out3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   out4: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   out5: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub const fn fiat_p192_scalar_divstep(
    out1: &mut u64,
    mut out2: &mut [u64; 4],
    mut out3: &mut [u64; 4],
    mut out4: &mut [u64; 3],
    mut out5: &mut [u64; 3],
    arg1: u64,
    arg2: &[u64; 4],
    arg3: &[u64; 4],
    arg4: &[u64; 3],
    arg5: &[u64; 3],
) {
    let mut x1: u64 = 0;
    let mut x2: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x1, &mut x2, 0x0, (!arg1), (0x1 as u64));
    let x3: fiat_p192_scalar_u1 = (((x1 >> 63) as fiat_p192_scalar_u1)
        & (((*IndexConst(arg3).index(0)) & (0x1 as u64)) as fiat_p192_scalar_u1));
    let mut x4: u64 = 0;
    let mut x5: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x4, &mut x5, 0x0, (!arg1), (0x1 as u64));
    let mut x6: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x6, x3, arg1, x4);
    let mut x7: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x7,
        x3,
        (*IndexConst(arg2).index(0)),
        (*IndexConst(arg3).index(0)),
    );
    let mut x8: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x8,
        x3,
        (*IndexConst(arg2).index(1)),
        (*IndexConst(arg3).index(1)),
    );
    let mut x9: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x9,
        x3,
        (*IndexConst(arg2).index(2)),
        (*IndexConst(arg3).index(2)),
    );
    let mut x10: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x10,
        x3,
        (*IndexConst(arg2).index(3)),
        (*IndexConst(arg3).index(3)),
    );
    let mut x11: u64 = 0;
    let mut x12: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x11,
        &mut x12,
        0x0,
        (0x1 as u64),
        (!(*IndexConst(arg2).index(0))),
    );
    let mut x13: u64 = 0;
    let mut x14: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x13,
        &mut x14,
        x12,
        (0x0 as u64),
        (!(*IndexConst(arg2).index(1))),
    );
    let mut x15: u64 = 0;
    let mut x16: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x15,
        &mut x16,
        x14,
        (0x0 as u64),
        (!(*IndexConst(arg2).index(2))),
    );
    let mut x17: u64 = 0;
    let mut x18: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(
        &mut x17,
        &mut x18,
        x16,
        (0x0 as u64),
        (!(*IndexConst(arg2).index(3))),
    );
    let mut x19: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x19, x3, (*IndexConst(arg3).index(0)), x11);
    let mut x20: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x20, x3, (*IndexConst(arg3).index(1)), x13);
    let mut x21: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x21, x3, (*IndexConst(arg3).index(2)), x15);
    let mut x22: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x22, x3, (*IndexConst(arg3).index(3)), x17);
    let mut x23: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x23,
        x3,
        (*IndexConst(arg4).index(0)),
        (*IndexConst(arg5).index(0)),
    );
    let mut x24: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x24,
        x3,
        (*IndexConst(arg4).index(1)),
        (*IndexConst(arg5).index(1)),
    );
    let mut x25: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(
        &mut x25,
        x3,
        (*IndexConst(arg4).index(2)),
        (*IndexConst(arg5).index(2)),
    );
    let mut x26: u64 = 0;
    let mut x27: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x26, &mut x27, 0x0, x23, x23);
    let mut x28: u64 = 0;
    let mut x29: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x28, &mut x29, x27, x24, x24);
    let mut x30: u64 = 0;
    let mut x31: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x30, &mut x31, x29, x25, x25);
    let mut x32: u64 = 0;
    let mut x33: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x32, &mut x33, 0x0, x26, 0x146bc9b1b4d22831);
    let mut x34: u64 = 0;
    let mut x35: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x34, &mut x35, x33, x28, 0xffffffff99def836);
    let mut x36: u64 = 0;
    let mut x37: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x36, &mut x37, x35, x30, 0xffffffffffffffff);
    let mut x38: u64 = 0;
    let mut x39: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x38, &mut x39, x37, (x31 as u64), (0x0 as u64));
    let x40: u64 = (*IndexConst(arg4).index(2));
    let x41: u64 = (*IndexConst(arg4).index(1));
    let x42: u64 = (*IndexConst(arg4).index(0));
    let mut x43: u64 = 0;
    let mut x44: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x43, &mut x44, 0x0, (0x0 as u64), x42);
    let mut x45: u64 = 0;
    let mut x46: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x45, &mut x46, x44, (0x0 as u64), x41);
    let mut x47: u64 = 0;
    let mut x48: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x47, &mut x48, x46, (0x0 as u64), x40);
    let mut x49: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x49, x48, (0x0 as u64), 0xffffffffffffffff);
    let mut x50: u64 = 0;
    let mut x51: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x50, &mut x51, 0x0, x43, (x49 & 0x146bc9b1b4d22831));
    let mut x52: u64 = 0;
    let mut x53: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x52, &mut x53, x51, x45, (x49 & 0xffffffff99def836));
    let mut x54: u64 = 0;
    let mut x55: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x54, &mut x55, x53, x47, x49);
    let mut x56: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x56, x3, (*IndexConst(arg5).index(0)), x50);
    let mut x57: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x57, x3, (*IndexConst(arg5).index(1)), x52);
    let mut x58: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x58, x3, (*IndexConst(arg5).index(2)), x54);
    let x59: fiat_p192_scalar_u1 = ((x19 & (0x1 as u64)) as fiat_p192_scalar_u1);
    let mut x60: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x60, x59, (0x0 as u64), x7);
    let mut x61: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x61, x59, (0x0 as u64), x8);
    let mut x62: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x62, x59, (0x0 as u64), x9);
    let mut x63: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x63, x59, (0x0 as u64), x10);
    let mut x64: u64 = 0;
    let mut x65: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x64, &mut x65, 0x0, x19, x60);
    let mut x66: u64 = 0;
    let mut x67: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x66, &mut x67, x65, x20, x61);
    let mut x68: u64 = 0;
    let mut x69: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x68, &mut x69, x67, x21, x62);
    let mut x70: u64 = 0;
    let mut x71: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x70, &mut x71, x69, x22, x63);
    let mut x72: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x72, x59, (0x0 as u64), x23);
    let mut x73: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x73, x59, (0x0 as u64), x24);
    let mut x74: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x74, x59, (0x0 as u64), x25);
    let mut x75: u64 = 0;
    let mut x76: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x75, &mut x76, 0x0, x56, x72);
    let mut x77: u64 = 0;
    let mut x78: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x77, &mut x78, x76, x57, x73);
    let mut x79: u64 = 0;
    let mut x80: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x79, &mut x80, x78, x58, x74);
    let mut x81: u64 = 0;
    let mut x82: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x81, &mut x82, 0x0, x75, 0x146bc9b1b4d22831);
    let mut x83: u64 = 0;
    let mut x84: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x83, &mut x84, x82, x77, 0xffffffff99def836);
    let mut x85: u64 = 0;
    let mut x86: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x85, &mut x86, x84, x79, 0xffffffffffffffff);
    let mut x87: u64 = 0;
    let mut x88: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_subborrowx_u64(&mut x87, &mut x88, x86, (x80 as u64), (0x0 as u64));
    let mut x89: u64 = 0;
    let mut x90: fiat_p192_scalar_u1 = 0;
    fiat_p192_scalar_addcarryx_u64(&mut x89, &mut x90, 0x0, x6, (0x1 as u64));
    let x91: u64 = ((x64 >> 1) | ((x66 << 63) & 0xffffffffffffffff));
    let x92: u64 = ((x66 >> 1) | ((x68 << 63) & 0xffffffffffffffff));
    let x93: u64 = ((x68 >> 1) | ((x70 << 63) & 0xffffffffffffffff));
    let x94: u64 = ((x70 & 0x8000000000000000) | (x70 >> 1));
    let mut x95: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x95, x39, x32, x26);
    let mut x96: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x96, x39, x34, x28);
    let mut x97: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x97, x39, x36, x30);
    let mut x98: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x98, x88, x81, x75);
    let mut x99: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x99, x88, x83, x77);
    let mut x100: u64 = 0;
    fiat_p192_scalar_cmovznz_u64(&mut x100, x88, x85, x79);
    *out1 = x89;
    *IndexConst(&mut out2).index_mut(0) = x7;
    *IndexConst(&mut out2).index_mut(1) = x8;
    *IndexConst(&mut out2).index_mut(2) = x9;
    *IndexConst(&mut out2).index_mut(3) = x10;
    *IndexConst(&mut out3).index_mut(0) = x91;
    *IndexConst(&mut out3).index_mut(1) = x92;
    *IndexConst(&mut out3).index_mut(2) = x93;
    *IndexConst(&mut out3).index_mut(3) = x94;
    *IndexConst(&mut out4).index_mut(0) = x95;
    *IndexConst(&mut out4).index_mut(1) = x96;
    *IndexConst(&mut out4).index_mut(2) = x97;
    *IndexConst(&mut out5).index_mut(0) = x98;
    *IndexConst(&mut out5).index_mut(1) = x99;
    *IndexConst(&mut out5).index_mut(2) = x100;
}

/// The function fiat_p192_scalar_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
///
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub const fn fiat_p192_scalar_divstep_precomp(mut out1: &mut [u64; 3]) {
    *IndexConst(&mut out1).index_mut(0) = 0xd2557b6a093d231d;
    *IndexConst(&mut out1).index_mut(1) = 0xd6e2378482e7b1;
    *IndexConst(&mut out1).index_mut(2) = 0x46ae48dd2558cd72;
}
